[
    {
        "db_id": "browser_web",
        "sql": "WITH BrowserMarketShare AS (\n    SELECT b.id, b.name, b.market_share\n    FROM browser b\n    WHERE b.market_share > 5.0  \n),\nCompatibleAccelerators AS (\n    SELECT a.accelerator_id, a.browser_id\n    FROM accelerator_compatible_browser a\n    WHERE a.compatible_since_year > 2015  \n),\nAcceleratorDetails AS (\n    SELECT w.id, w.name, w.Operating_system, w.Client, w.Connection\n    FROM Web_client_accelerator w\n)\n\nSELECT b.name\nFROM BrowserMarketShare b\nJOIN CompatibleAccelerators c ON b.id = c.browser_id\nJOIN AcceleratorDetails a ON c.accelerator_id = a.id\nWHERE a.Operating_system = 'Windows'  \nORDER BY b.market_share DESC\nLIMIT 1;",
        "sql_result_column_count": 1,
        "sql_result_rows_count": 0,
        "sql_complexity": "Complex",
        "question_style": "Formal",
        "sql_explanation": "The SQL query is structured using three Common Table Expressions (CTEs) and performs a series of operations to retrieve a specific browser name. \n\n1. **BrowserMarketShare CTE:** This selects the ID, name, and market share of browsers from the `browser` table where the market share is greater than 5.0%. This filters the browsers to only those with significant market presence.\n\n2. **CompatibleAccelerators CTE:** This selects the accelerator ID and browser ID from the `accelerator_compatible_browser` table where the compatibility was established after the year 2015. This identifies accelerators that are compatible with certain browsers only if the compatibility is relatively recent.\n\n3. **AcceleratorDetails CTE:** This selects the ID, name, operating system, client, and connection details from the `Web_client_accelerator` table. This provides detailed information about web client accelerators.\n\nThe main query joins these CTEs to find the name of the browser that has both a significant market share and is compatible with an accelerator running on the Windows operating system. The results are ordered by market share in descending order, and the query limits the output to the top result (i.e., the browser with the highest market share). \n\nThere are no vector operations involved in this query.",
        "question": "Identify the browser with the highest market share greater than 5.0% that is compatible with a web client accelerator established after 2015 and running on the Windows operating system.",
        "external_knowledge": "",
        "sqlite_sql": "WITH BrowserMarketShare AS (\n    SELECT b.id, b.name, b.market_share\n    FROM browser b\n    WHERE b.market_share > 5.0  \n),\nCompatibleAccelerators AS (\n    SELECT a.accelerator_id, a.browser_id\n    FROM accelerator_compatible_browser a\n    WHERE a.compatible_since_year > 2015  \n),\nAcceleratorDetails AS (\n    SELECT w.id, w.name, w.Operating_system, w.Client, w.Connection\n    FROM Web_client_accelerator w\n)\n\nSELECT b.name\nFROM BrowserMarketShare b\nJOIN CompatibleAccelerators c ON b.id = c.browser_id\nJOIN AcceleratorDetails a ON c.accelerator_id = a.id\nWHERE a.Operating_system = 'Windows'  \nORDER BY b.market_share DESC\nLIMIT 1;",
        "postgresql_sql": "WITH \"BrowserMarketShare\" AS (\n    SELECT \"b\".\"id\", \"b\".\"name\", \"b\".\"market_share\"\n    FROM \"browser\" \"b\"\n    WHERE \"b\".\"market_share\" > 5.0  \n),\n\"CompatibleAccelerators\" AS (\n    SELECT \"a\".\"accelerator_id\", \"a\".\"browser_id\"\n    FROM \"accelerator_compatible_browser\" \"a\"\n    WHERE \"a\".\"compatible_since_year\" > 2015  \n),\n\"AcceleratorDetails\" AS (\n    SELECT \"w\".\"id\", \"w\".\"name\", \"w\".\"Operating_system\", \"w\".\"Client\", \"w\".\"Connection\"\n    FROM \"Web_client_accelerator\" \"w\"\n)\n\nSELECT \"b\".\"name\"\nFROM \"BrowserMarketShare\" \"b\"\nJOIN \"CompatibleAccelerators\" \"c\" ON \"b\".\"id\" = \"c\".\"browser_id\"\nJOIN \"AcceleratorDetails\" \"a\" ON \"c\".\"accelerator_id\" = \"a\".\"id\"\nWHERE \"a\".\"Operating_system\" = 'Windows'  \nORDER BY \"b\".\"market_share\" DESC\nLIMIT 1;",
        "clickhouse_sql": "WITH BrowserMarketShare AS (\n    SELECT b.id, b.name, b.market_share\n    FROM browser b\n    WHERE b.market_share > 5.0  \n),\nCompatibleAccelerators AS (\n    SELECT a.accelerator_id, a.browser_id\n    FROM accelerator_compatible_browser a\n    WHERE a.compatible_since_year > 2015  \n),\nAcceleratorDetails AS (\n    SELECT w.id, w.name, w.Operating_system, w.Client, w.Connection\n    FROM Web_client_accelerator w\n)\n\nSELECT b.name\nFROM BrowserMarketShare b\nJOIN CompatibleAccelerators c ON b.id = c.browser_id\nJOIN AcceleratorDetails a ON c.accelerator_id = a.id\nWHERE a.Operating_system = 'Windows'  \nORDER BY b.market_share DESC\nLIMIT 1;",
        "integration_level": 0.0
    },
    {
        "db_id": "musical",
        "sql": "WITH ActorSubset AS (\n  SELECT Actor_ID, Musical_ID\n  FROM actor\n  WHERE age > 30\n)\nSELECT m.Musical_ID\nFROM musical m\nJOIN ActorSubset a ON m.Musical_ID = a.Musical_ID\nWHERE m.Category_embedding MATCH lembed('all-MiniLM-L6-v2', \"Best Musical Score\") AND m.k = 5;",
        "sql_result_column_count": 1,
        "sql_result_rows_count": 0,
        "sql_complexity": "Complex",
        "question_style": "Colloquial",
        "sql_explanation": "The SQL query is designed to find musicals where actors are over the age of 30 and the musical is in the category of \"Best Musical Score\". It starts by creating a temporary subset of actors who are older than 30, extracting their Actor IDs and Musical IDs from the 'actor' table. Then, it joins this subset with the 'musical' table to filter musicals that match the category \"Best Musical Score\" using vector operations. The query specifically uses the `lembed()` function to find musicals with the best relevance to this category and limits the result to the top 5 matches.",
        "question": "Hey! Can you help me find the top 5 musicals that have actors over the age of 30 and are known for having the best musical scores?",
        "external_knowledge": "",
        "sqlite_sql": "WITH ActorSubset AS (\n  SELECT Actor_ID, Musical_ID\n  FROM actor\n  WHERE age > 30\n)\nSELECT m.Musical_ID\nFROM musical m\nJOIN ActorSubset a ON m.Musical_ID = a.Musical_ID\nWHERE m.Category_embedding MATCH lembed('all-MiniLM-L6-v2', \"Best Musical Score\") AND m.k = 5;",
        "postgresql_sql": "WITH \"ActorSubset\" AS (\n    SELECT \"Actor_ID\", \"Musical_ID\"\n      FROM \"actor\"\n      WHERE \"age\" > 30\n)\n\nSELECT \"m\".\"Musical_ID\", \"m\".\"Category_embedding\" <-> lembed('all-MiniLM-L6-v2', 'Best Musical Score') AS \"distance\"\nFROM \"musical\" \"m\"\nJOIN \"ActorSubset\" \"a\" ON \"m\".\"Musical_ID\" = \"a\".\"Musical_ID\"\nORDER BY \"distance\"\nLIMIT 5;",
        "clickhouse_sql": "WITH\n    lembed('all-MiniLM-L6-v2', 'Best Musical Score') AS ref_vec_0,\n\nActorSubset AS (\n    SELECT Actor_ID, Musical_ID\n      FROM actor\n      WHERE age > 30\n)\n\nSELECT m.Musical_ID, L2Distance(m.Category_embedding, ref_vec_0) AS distance\nFROM musical m\nJOIN ActorSubset a ON m.Musical_ID = a.Musical_ID\nORDER BY distance\nLIMIT 5;",
        "integration_level": 5.0
    },
    {
        "db_id": "musical",
        "sql": "SELECT Musical_ID\nFROM musical\nWHERE Category_embedding MATCH lembed('all-MiniLM-L6-v2', \"Best Musical Book Award\")\nLIMIT 1;",
        "sql_result_column_count": 1,
        "sql_result_rows_count": 1,
        "sql_complexity": "Simple",
        "question_style": "Colloquial",
        "sql_explanation": "The SQL query is designed to find the unique identifier (`Musical_ID`) of a musical entry in the `musical` table that best matches the concept \"Best Musical Book Award\". This is achieved through a vector similarity search using the `lembed` function with the `Category_embedding` column. The query limits the result to just the top match, ensuring that only the most relevant musical based on the \"Best Musical Book Award\" concept is returned.",
        "question": "Hey, can you find me the Musical ID of the top musical that's recognized for its \"Best Musical Book Award\"? Just need the one that stands out the most!",
        "external_knowledge": "",
        "sqlite_sql": "SELECT Musical_ID\nFROM musical\nWHERE Category_embedding MATCH lembed('all-MiniLM-L6-v2', \"Best Musical Book Award\")\nLIMIT 1;",
        "postgresql_sql": "SELECT \"Musical_ID\", \"musical\".\"Category_embedding\" <-> lembed('all-MiniLM-L6-v2', 'Best Musical Book Award') AS \"distance\"\nFROM \"musical\"\nORDER BY \"distance\"\nLIMIT 1;",
        "clickhouse_sql": "WITH\n    lembed('all-MiniLM-L6-v2', 'Best Musical Book Award') AS ref_vec_0\n\nSELECT Musical_ID, L2Distance(musical.Category_embedding, ref_vec_0) AS distance\nFROM musical\nORDER BY distance\nLIMIT 1;",
        "integration_level": 1.0
    },
    {
        "db_id": "musical",
        "sql": "SELECT Musical_ID, Name, Year, Category, distance\nFROM musical\nWHERE Category_embedding MATCH lembed('all-MiniLM-L6-v2', \"Outstanding Musical Production\")\nAND k = 3\nORDER BY distance;",
        "sql_result_column_count": 5,
        "sql_result_rows_count": 3,
        "sql_complexity": "Simple",
        "question_style": "Formal",
        "sql_explanation": "The SQL query is designed to retrieve information about musical productions from the \"musical\" table. It selects the following columns: \"Musical_ID,\" \"Name,\" \"Year,\" \"Category,\" and \"distance.\" The query filters the results to find musicals that are semantically related to the description \"Outstanding Musical Production\" by using the `Category_embedding MATCH lembed('all-MiniLM-L6-v2', \"Outstanding Musical Production\")` clause. This vector search operation ranks musicals based on their semantic similarity to the specified category, using an embedding model. The query is further restricted to the top 3 results (as indicated by `AND k = 3`) based on their similarity distance, and it orders these results by the \"distance\" column in ascending order to ensure that the most similar items appear first.",
        "question": "Identify and provide the IDs, names, years, categories, and similarity distances of the top three musical productions categorized under \"Outstanding Musical Production.\"",
        "external_knowledge": "",
        "sqlite_sql": "SELECT Musical_ID, Name, Year, Category, distance\nFROM musical\nWHERE Category_embedding MATCH lembed('all-MiniLM-L6-v2', \"Outstanding Musical Production\")\nAND k = 3\nORDER BY distance;",
        "postgresql_sql": "SELECT \"Musical_ID\", \"Name\", \"Year\", \"Category\", \"musical\".\"Category_embedding\" <-> lembed('all-MiniLM-L6-v2', 'Outstanding Musical Production') AS \"distance\"\nFROM \"musical\"\nORDER BY \"distance\"\nLIMIT 3;",
        "clickhouse_sql": "WITH\n    lembed('all-MiniLM-L6-v2', 'Outstanding Musical Production') AS ref_vec_0\n\nSELECT Musical_ID, Name, Year, Category, L2Distance(musical.Category_embedding, ref_vec_0) AS distance\nFROM musical\nORDER BY distance\nLIMIT 3;",
        "integration_level": 1.0
    },
    {
        "db_id": "farm",
        "sql": "SELECT fc.Theme\nFROM farm_competition fc\nJOIN city c ON fc.Host_city_ID = c.City_ID\nWHERE fc.Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Agricultural Innovation\") AND fc.k = 5;",
        "sql_result_column_count": 1,
        "sql_result_rows_count": 5,
        "sql_complexity": "Moderate",
        "question_style": "Metaphorical",
        "sql_explanation": "The SQL query is designed to extract themes of farm competitions that are hosted in a city. It specifically retrieves themes that are similar to the concept of \"Agricultural Innovation.\" This is achieved by using a vector search operation. The query uses the \"MATCH\" operator combined with the `lembed` function to perform an approximate nearest neighbor (ANN) search for themes that are semantically close to \"Agricultural Innovation.\" The `k = 5` clause limits the results to the top 5 themes. This means that the query is looking for the five themes of farm competitions that most closely align with the idea of agricultural innovation.",
        "question": "What are the top 5 farm competition themes that cultivate the spirit of agricultural innovation?",
        "external_knowledge": "The \"MATCH\" operator in the SQL query is used to perform an approximate nearest neighbor (ANN) search, which finds entries that are semantically similar to a given vector. The `lembed` function encodes the concept \"Agricultural Innovation\" into a vector representation. The `k = 5` specifies that the query should return the top 5 themes that have the shortest Euclidean distance to the \"Agricultural Innovation\" vector, implying the closest semantic match. In vector searches, the smaller the distance, the higher the similarity.",
        "sqlite_sql": "SELECT fc.Theme\nFROM farm_competition fc\nJOIN city c ON fc.Host_city_ID = c.City_ID\nWHERE fc.Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Agricultural Innovation\") AND fc.k = 5;",
        "postgresql_sql": "SELECT \"fc\".\"Theme\", \"fc\".\"Theme_embedding\" <-> lembed('all-MiniLM-L6-v2', 'Agricultural Innovation') AS \"distance\"\nFROM \"farm_competition\" \"fc\"\nJOIN \"city\" \"c\" ON \"fc\".\"Host_city_ID\" = \"c\".\"City_ID\"\nORDER BY \"distance\"\nLIMIT 5;",
        "clickhouse_sql": "WITH\n    lembed('all-MiniLM-L6-v2', 'Agricultural Innovation') AS ref_vec_0\n\nSELECT fc.Theme, L2Distance(fc.Theme_embedding, ref_vec_0) AS distance\nFROM farm_competition fc\nJOIN city c ON fc.Host_city_ID = c.City_ID\nORDER BY distance\nLIMIT 5;",
        "integration_level": 5.0
    },
    {
        "db_id": "farm",
        "sql": "WITH competition_knn AS (\n  SELECT \n    fc.Competition_ID,\n    fc.Host_city_ID,\n    fc.Theme,\n    fc.distance\n  FROM \n    farm_competition fc\n  WHERE \n    fc.Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Annual Farm Festival\") \n    AND fc.k = 5\n),\ncompetition_farm_stats AS (\n  SELECT \n    cr.Competition_ID,\n    SUM(f.Total_Horses + f.Total_Cattle + f.Pigs + f.Sheep_and_Goats) AS Total_Livestock\n  FROM \n    competition_record cr\n  JOIN \n    farm f ON cr.Farm_ID = f.Farm_ID\n  WHERE \n    cr.Competition_ID IN (SELECT Competition_ID FROM competition_knn)\n  GROUP BY \n    cr.Competition_ID\n)\nSELECT \n  ck.Competition_ID,\n  c.Official_Name AS Host_City_Name,\n  cfs.Total_Livestock\nFROM \n  competition_knn ck\nJOIN \n  competition_farm_stats cfs ON ck.Competition_ID = cfs.Competition_ID\nJOIN \n  city c ON ck.Host_city_ID = c.City_ID\nORDER BY \n  ck.distance\nLIMIT 3;",
        "sql_result_column_count": 3,
        "sql_result_rows_count": 3,
        "sql_complexity": "Highly Complex",
        "question_style": "Descriptive",
        "sql_explanation": "The SQL query consists of two main parts: \n\n1. **competition_knn CTE**: This part creates a Common Table Expression (CTE) that retrieves the `Competition_ID`, `Host_city_ID`, `Theme`, and `distance` from the `farm_competition` table. The query uses a vector search operation where it matches the `Theme_embedding` against the phrase \"Annual Farm Festival\" using the `lembed` function. It limits the results to the top 5 matches by specifying `k = 5`.\n\n2. **competition_farm_stats CTE**: This CTE calculates the total livestock count for each competition. It joins the `competition_record` and `farm` tables based on `Farm_ID`, then sums up the `Total_Horses`, `Total_Cattle`, `Pigs`, and `Sheep_and_Goats` for each competition. It only includes competitions from the previous CTE (`competition_knn`).\n\nFinally, the main query selects the `Competition_ID`, `Official_Name` of the host city, and the `Total_Livestock` from these CTEs. The results are joined with the `city` table to get the host city name. The output is sorted by the `distance` from the vector search operation, and restricted to the top 3 entries.",
        "question": "I would like to know the names of the host cities and the total livestock count for the top 3 competitions closest to the theme \"Annual Farm Festival\". The competitions should be selected based on vector similarity, ordered by proximity, and must include those with the highest livestock numbers.",
        "external_knowledge": "",
        "sqlite_sql": "WITH competition_knn AS (\n  SELECT \n    fc.Competition_ID,\n    fc.Host_city_ID,\n    fc.Theme,\n    fc.distance\n  FROM \n    farm_competition fc\n  WHERE \n    fc.Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Annual Farm Festival\") \n    AND fc.k = 5\n),\ncompetition_farm_stats AS (\n  SELECT \n    cr.Competition_ID,\n    SUM(f.Total_Horses + f.Total_Cattle + f.Pigs + f.Sheep_and_Goats) AS Total_Livestock\n  FROM \n    competition_record cr\n  JOIN \n    farm f ON cr.Farm_ID = f.Farm_ID\n  WHERE \n    cr.Competition_ID IN (SELECT Competition_ID FROM competition_knn)\n  GROUP BY \n    cr.Competition_ID\n)\nSELECT \n  ck.Competition_ID,\n  c.Official_Name AS Host_City_Name,\n  cfs.Total_Livestock\nFROM \n  competition_knn ck\nJOIN \n  competition_farm_stats cfs ON ck.Competition_ID = cfs.Competition_ID\nJOIN \n  city c ON ck.Host_city_ID = c.City_ID\nORDER BY \n  ck.distance\nLIMIT 3;",
        "postgresql_sql": "WITH \"competition_knn\" AS (\n    SELECT \n        \"fc\".\"Competition_ID\",\n        \"fc\".\"Host_city_ID\",\n        \"fc\".\"Theme\",\n        \"fc\".\"Theme_embedding\" <-> lembed('all-MiniLM-L6-v2', 'Annual Farm Festival') AS \"distance\"\n      FROM \n        \"farm_competition\" \"fc\"\n    ORDER BY \"distance\"\n    LIMIT 5\n),\n\n\"competition_farm_stats\" AS (\n    SELECT \n        \"cr\".\"Competition_ID\",\n        SUM(\"f\".\"Total_Horses\" + \"f\".\"Total_Cattle\" + \"f\".\"Pigs\" + \"f\".\"Sheep_and_Goats\") AS \"Total_Livestock\"\n      FROM \n        \"competition_record\" \"cr\"\n      JOIN \n        \"farm\" \"f\" ON \"cr\".\"Farm_ID\" = \"f\".\"Farm_ID\"\n      WHERE \n        \"cr\".\"Competition_ID\" IN (SELECT \"Competition_ID\" FROM \"competition_knn\")\n      GROUP BY \n        \"cr\".\"Competition_ID\"\n)\n\nSELECT \n  \"ck\".\"Competition_ID\",\n  \"c\".\"Official_Name\" AS \"Host_City_Name\",\n  \"cfs\".\"Total_Livestock\"\nFROM \n  \"competition_knn\" \"ck\"\nJOIN \n  \"competition_farm_stats\" \"cfs\" ON \"ck\".\"Competition_ID\" = \"cfs\".\"Competition_ID\"\nJOIN \n  \"city\" \"c\" ON \"ck\".\"Host_city_ID\" = \"c\".\"City_ID\"\nORDER BY \n  \"ck\".\"distance\"\nLIMIT 3;",
        "clickhouse_sql": "WITH\n    lembed('all-MiniLM-L6-v2', 'Annual Farm Festival') AS ref_vec_0,\n\ncompetition_knn AS (\n    SELECT \n        fc.Competition_ID,\n        fc.Host_city_ID,\n        fc.Theme,\n        L2Distance(fc.Theme_embedding, ref_vec_0) AS distance\n      FROM \n        farm_competition fc\n    ORDER BY distance\n    LIMIT 5\n),\n\ncompetition_farm_stats AS (\n    SELECT \n        cr.Competition_ID,\n        SUM(f.Total_Horses + f.Total_Cattle + f.Pigs + f.Sheep_and_Goats) AS Total_Livestock\n      FROM \n        competition_record cr\n      JOIN \n        farm f ON cr.Farm_ID = f.Farm_ID\n      WHERE \n        cr.Competition_ID IN (SELECT Competition_ID FROM competition_knn)\n      GROUP BY \n        cr.Competition_ID\n)\n\nSELECT \n  ck.Competition_ID,\n  c.Official_Name AS Host_City_Name,\n  cfs.Total_Livestock\nFROM \n  competition_knn ck\nJOIN \n  competition_farm_stats cfs ON ck.Competition_ID = cfs.Competition_ID\nJOIN \n  city c ON ck.Host_city_ID = c.City_ID\nORDER BY \n  ck.distance\nLIMIT 3;",
        "integration_level": 9.0
    },
    {
        "db_id": "farm",
        "sql": "WITH FarmRankCTE AS (\n    SELECT f.Farm_ID, f.Total_Horses, cr.Rank\n    FROM farm f\n    JOIN competition_record cr ON f.Farm_ID = cr.Farm_ID\n    WHERE f.Total_Horses > 50\n),\nCompetitionThemeCTE AS (\n    SELECT Competition_ID, Theme, distance\n    FROM farm_competition\n    WHERE Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Agriculture Expo\")\n    LIMIT 5\n)\nSELECT fr.Farm_ID, fr.Total_Horses, ct.Theme\nFROM FarmRankCTE fr\nJOIN CompetitionThemeCTE ct ON fr.Farm_ID = ct.Competition_ID\nORDER BY ct.distance;",
        "sql_result_column_count": 3,
        "sql_result_rows_count": 9,
        "sql_complexity": "Complex",
        "question_style": "Formal",
        "sql_explanation": "The SQL query is composed of two Common Table Expressions (CTEs) and a final SELECT statement.\n\n1. **FarmRankCTE**:\n   - This CTE selects farms with more than 50 horses. For each of these farms, it retrieves the farm's ID, total number of horses, and its rank from a competition record.\n\n2. **CompetitionThemeCTE**:\n   - This CTE performs a vector search to find competitions closely related to the theme \"Agriculture Expo\". It uses the `lembed()` function for semantic similarity and retrieves the competition ID, theme, and a 'distance' metric indicating similarity. It limits the results to the top 5 closest matches.\n\n3. **Final SELECT Statement**:\n   - This part of the query joins the results from the two CTEs. It matches farms from `FarmRankCTE` with competitions from `CompetitionThemeCTE` based on the farm ID and competition ID. The query returns the farm ID, total horses, and theme of the competition, ordering the results by the similarity distance in ascending order (most similar first).",
        "question": "Identify the farms with more than 50 horses that participated in the top 5 competitions related to \"Agriculture Expo\". Please provide their farm IDs, total number of horses, and the themes of the competitions they participated in, ordered by the proximity of the competition's theme to \"Agriculture Expo\".",
        "external_knowledge": "",
        "sqlite_sql": "WITH FarmRankCTE AS (\n    SELECT f.Farm_ID, f.Total_Horses, cr.Rank\n    FROM farm f\n    JOIN competition_record cr ON f.Farm_ID = cr.Farm_ID\n    WHERE f.Total_Horses > 50\n),\nCompetitionThemeCTE AS (\n    SELECT Competition_ID, Theme, distance\n    FROM farm_competition\n    WHERE Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Agriculture Expo\")\n    LIMIT 5\n)\nSELECT fr.Farm_ID, fr.Total_Horses, ct.Theme\nFROM FarmRankCTE fr\nJOIN CompetitionThemeCTE ct ON fr.Farm_ID = ct.Competition_ID\nORDER BY ct.distance;",
        "postgresql_sql": "WITH \"FarmRankCTE\" AS (\n    SELECT \"f\".\"Farm_ID\", \"f\".\"Total_Horses\", \"cr\".\"Rank\"\n        FROM \"farm\" \"f\"\n        JOIN \"competition_record\" \"cr\" ON \"f\".\"Farm_ID\" = \"cr\".\"Farm_ID\"\n        WHERE \"f\".\"Total_Horses\" > 50\n),\n\n\"CompetitionThemeCTE\" AS (\n    SELECT \"Competition_ID\", \"Theme\", \"farm_competition\".\"Theme_embedding\" <-> lembed('all-MiniLM-L6-v2', 'Agriculture Expo') AS \"distance\"\n        FROM \"farm_competition\"\n    ORDER BY \"distance\"\n    LIMIT 5\n)\n\nSELECT \"fr\".\"Farm_ID\", \"fr\".\"Total_Horses\", \"ct\".\"Theme\"\nFROM \"FarmRankCTE\" \"fr\"\nJOIN \"CompetitionThemeCTE\" \"ct\" ON \"fr\".\"Farm_ID\" = \"ct\".\"Competition_ID\"\nORDER BY \"ct\".\"distance\";",
        "clickhouse_sql": "WITH\n    lembed('all-MiniLM-L6-v2', 'Agriculture Expo') AS ref_vec_0,\n\nFarmRankCTE AS (\n    SELECT f.Farm_ID, f.Total_Horses, cr.Rank\n        FROM farm f\n        JOIN competition_record cr ON f.Farm_ID = cr.Farm_ID\n        WHERE f.Total_Horses > 50\n),\n\nCompetitionThemeCTE AS (\n    SELECT Competition_ID, Theme, L2Distance(farm_competition.Theme_embedding, ref_vec_0) AS distance\n        FROM farm_competition\n    ORDER BY distance\n    LIMIT 5\n)\n\nSELECT fr.Farm_ID, fr.Total_Horses, ct.Theme\nFROM FarmRankCTE fr\nJOIN CompetitionThemeCTE ct ON fr.Farm_ID = ct.Competition_ID\nORDER BY ct.distance;",
        "integration_level": 1.0
    },
    {
        "db_id": "farm",
        "sql": "SELECT fc.Theme, c.Official_Name, distance\nFROM farm_competition fc\nJOIN city c ON fc.Host_city_ID = c.City_ID\nWHERE fc.Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Agricultural Innovations in Modern Farming\") AND fc.k = 5\nAND c.Area_km_2 > 500.0\nORDER BY distance LIMIT 5;",
        "sql_result_column_count": 3,
        "sql_result_rows_count": 0,
        "sql_complexity": "Moderate",
        "question_style": "Imperative",
        "sql_explanation": "The SQL query is fetching details about farm competitions based on a thematic vector search. It selects the `Theme` from the `farm_competition` table and the `Official_Name` of the host city from the `city` table. The query performs a vector similarity search using the `lembed('all-MiniLM-L6-v2', \"Agricultural Innovations in Modern Farming\")` to find competitions that are thematically linked to \"Agricultural Innovations in Modern Farming\". It limits the search to the top 5 closest matches (`k = 5`). Additionally, it filters cities where the area is greater than 500 square kilometers (`c.Area_km_2 > 500.0`). The results are ordered by similarity distance and limited to the top 5 entries (`ORDER BY distance LIMIT 5`).",
        "question": "Could you please identify the themes and official names of host cities for the top 5 farm competitions focused on agricultural innovations in modern farming? Ensure these cities all have an area larger than 500 square kilometers.",
        "external_knowledge": "",
        "sqlite_sql": "SELECT fc.Theme, c.Official_Name, distance\nFROM farm_competition fc\nJOIN city c ON fc.Host_city_ID = c.City_ID\nWHERE fc.Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Agricultural Innovations in Modern Farming\") AND fc.k = 5\nAND c.Area_km_2 > 500.0\nORDER BY distance LIMIT 5;",
        "postgresql_sql": "SELECT \"fc\".\"Theme\", \"c\".\"Official_Name\", \"fc\".\"Theme_embedding\" <-> lembed('all-MiniLM-L6-v2', 'Agricultural Innovations in Modern Farming') AS \"distance\"\nFROM \"farm_competition\" \"fc\"\nJOIN \"city\" \"c\" ON \"fc\".\"Host_city_ID\" = \"c\".\"City_ID\"\nWHERE   \"c\".\"Area_km_2\" > 500.0\nORDER BY \"distance\"\nLIMIT 5;",
        "clickhouse_sql": "WITH\n    lembed('all-MiniLM-L6-v2', 'Agricultural Innovations in Modern Farming') AS ref_vec_0\n\nSELECT fc.Theme, c.Official_Name, L2Distance(fc.Theme_embedding, ref_vec_0) AS distance\nFROM farm_competition fc\nJOIN city c ON fc.Host_city_ID = c.City_ID\nWHERE  c.Area_km_2 > 500.0\nORDER BY distance\nLIMIT 5;",
        "integration_level": 5.0
    },
    {
        "db_id": "farm",
        "sql": "SELECT Competition_ID\nFROM farm_competition\nWHERE Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Harvest Festival\") LIMIT 1;",
        "sql_result_column_count": 1,
        "sql_result_rows_count": 1,
        "sql_complexity": "Simple",
        "question_style": "Concise",
        "sql_explanation": "The SQL query is selecting the `Competition_ID` from the `farm_competition` table where the `Theme_embedding` column matches the semantic embedding of the phrase \"Harvest Festival\" using the `lembed` function with the model `all-MiniLM-L6-v2`. The query is limited to return only the top 1 closest match in terms of semantic similarity.",
        "question": "What is the ID of the competition most related to \"Harvest Festival\"?",
        "external_knowledge": "",
        "sqlite_sql": "SELECT Competition_ID\nFROM farm_competition\nWHERE Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Harvest Festival\") LIMIT 1;",
        "postgresql_sql": "SELECT \"Competition_ID\", \"farm_competition\".\"Theme_embedding\" <-> lembed('all-MiniLM-L6-v2', 'Harvest Festival') AS \"distance\"\nFROM \"farm_competition\"\nORDER BY \"distance\"\nLIMIT 1;",
        "clickhouse_sql": "WITH\n    lembed('all-MiniLM-L6-v2', 'Harvest Festival') AS ref_vec_0\n\nSELECT Competition_ID, L2Distance(farm_competition.Theme_embedding, ref_vec_0) AS distance\nFROM farm_competition\nORDER BY distance\nLIMIT 1;",
        "integration_level": 1.0
    },
    {
        "db_id": "farm",
        "sql": "SELECT fc.Competition_ID\nFROM farm_competition fc\nJOIN city c ON fc.Host_city_ID = c.City_ID\nWHERE fc.Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Agricultural Innovations\")\nAND c.Official_Name = 'Springfield'\nAND fc.k = 5;",
        "sql_result_column_count": 1,
        "sql_result_rows_count": 0,
        "sql_complexity": "Moderate",
        "question_style": "Descriptive",
        "sql_explanation": "The SQL query retrieves the competition IDs from the `farm_competition` table where the competition's theme is closely related to \"Agricultural Innovations\", according to vector embeddings using sqlite-lembed. The search utilizes the 'all-MiniLM-L6-v2' model to determine the theme similarity. Additionally, the competitions must be hosted in the city with the official name 'Springfield'. The query limits the results to the top 5 competitions, ranked by their theme's similarity to \"Agricultural Innovations\".",
        "question": "I need the competition IDs of the top 5 farm competitions with themes focused on \"Agricultural Innovations\" that are hosted in Springfield.",
        "external_knowledge": "",
        "sqlite_sql": "SELECT fc.Competition_ID\nFROM farm_competition fc\nJOIN city c ON fc.Host_city_ID = c.City_ID\nWHERE fc.Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Agricultural Innovations\")\nAND c.Official_Name = 'Springfield'\nAND fc.k = 5;",
        "postgresql_sql": "SELECT \"fc\".\"Competition_ID\", \"fc\".\"Theme_embedding\" <-> lembed('all-MiniLM-L6-v2', 'Agricultural Innovations') AS \"distance\"\nFROM \"farm_competition\" \"fc\"\nJOIN \"city\" \"c\" ON \"fc\".\"Host_city_ID\" = \"c\".\"City_ID\"\nWHERE  \"c\".\"Official_Name\" = 'Springfield'\nORDER BY \"distance\"\nLIMIT 5;",
        "clickhouse_sql": "WITH\n    lembed('all-MiniLM-L6-v2', 'Agricultural Innovations') AS ref_vec_0\n\nSELECT fc.Competition_ID, L2Distance(fc.Theme_embedding, ref_vec_0) AS distance\nFROM farm_competition fc\nJOIN city c ON fc.Host_city_ID = c.City_ID\nWHERE  c.Official_Name = 'Springfield'\nORDER BY distance\nLIMIT 5;",
        "integration_level": 5.0
    },
    {
        "db_id": "farm",
        "sql": "SELECT\n  Competition_ID,\n  Year,\n  Theme\nFROM\n  farm_competition\nWHERE\n  Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Agricultural Innovation Expo\")\nLIMIT 3;",
        "sql_result_column_count": 3,
        "sql_result_rows_count": 3,
        "sql_complexity": "Simple",
        "question_style": "Imperative",
        "sql_explanation": "The given SQL query is selecting three columns: `Competition_ID`, `Year`, and `Theme` from the `farm_competition` table. It uses a vector similarity search on the `Theme_embedding` column to find records that are semantically similar to the theme \"Agricultural Innovation Expo\" using the embedding model 'all-MiniLM-L6-v2'. The search limits the results to the top 3 competitions that match the specified theme most closely.",
        "question": "Please find the top 3 farm competitions with themes closely related to \"Agricultural Innovation Expo\" and provide their IDs, years, and themes.",
        "external_knowledge": "",
        "sqlite_sql": "SELECT\n  Competition_ID,\n  Year,\n  Theme\nFROM\n  farm_competition\nWHERE\n  Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Agricultural Innovation Expo\")\nLIMIT 3;",
        "postgresql_sql": "SELECT\n  \"Competition_ID\",\n  \"Year\",\n  \"Theme\", \"farm_competition\".\"Theme_embedding\" <-> lembed('all-MiniLM-L6-v2', 'Agricultural Innovation Expo') AS \"distance\"\nFROM\n  \"farm_competition\"\nORDER BY \"distance\"\nLIMIT 3;",
        "clickhouse_sql": "WITH\n    lembed('all-MiniLM-L6-v2', 'Agricultural Innovation Expo') AS ref_vec_0\n\nSELECT\n  Competition_ID,\n  Year,\n  Theme, L2Distance(farm_competition.Theme_embedding, ref_vec_0) AS distance\nFROM\n  farm_competition\nORDER BY distance\nLIMIT 3;",
        "integration_level": 1.0
    },
    {
        "db_id": "farm",
        "sql": "SELECT fc.Competition_ID, c.Official_Name, fc.Theme, fc.distance\nFROM farm_competition fc\nJOIN city c ON fc.Host_city_ID = c.City_ID\nWHERE fc.Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Farming Innovations 2023\") AND fc.k = 3\nORDER BY fc.distance\nLIMIT 3;",
        "sql_result_column_count": 4,
        "sql_result_rows_count": 3,
        "sql_complexity": "Moderate",
        "question_style": "Interrogative",
        "sql_explanation": "The SQL query is designed to retrieve information about farm competitions hosted by various cities. Specifically, it selects the competition ID, the official name of the host city, the theme of the competition, and the distance metric related to the theme. The query joins the `farm_competition` table (`fc`) with the `city` table (`c`) on the condition that the host city ID in the farm competition table matches the city ID in the city table. The query also incorporates a vector similarity search by matching on the theme embedding using the `lembed` function with the embedding model 'all-MiniLM-L6-v2'. It searches for themes that are similar to \"Farming Innovations 2023\" and limits the results to the top 3 by setting `fc.k = 3`. The results are ordered by the `distance` column, which likely represents how closely the themes match the given vector, and the query returns only the top 3 results in terms of similarity.",
        "question": "Could you provide details for the top 3 farm competitions most aligned with the theme \"Farming Innovations 2023\", including the competition ID, the official name of the host city, the theme of the competition, and the distance metric?",
        "external_knowledge": "",
        "sqlite_sql": "SELECT fc.Competition_ID, c.Official_Name, fc.Theme, fc.distance\nFROM farm_competition fc\nJOIN city c ON fc.Host_city_ID = c.City_ID\nWHERE fc.Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Farming Innovations 2023\") AND fc.k = 3\nORDER BY fc.distance\nLIMIT 3;",
        "postgresql_sql": "SELECT \"fc\".\"Competition_ID\", \"c\".\"Official_Name\", \"fc\".\"Theme\", \"fc\".\"Theme_embedding\" <-> lembed('all-MiniLM-L6-v2', 'Farming Innovations 2023') AS \"distance\"\nFROM \"farm_competition\" \"fc\"\nJOIN \"city\" \"c\" ON \"fc\".\"Host_city_ID\" = \"c\".\"City_ID\"\nORDER BY \"distance\"\nLIMIT 3;",
        "clickhouse_sql": "WITH\n    lembed('all-MiniLM-L6-v2', 'Farming Innovations 2023') AS ref_vec_0\n\nSELECT fc.Competition_ID, c.Official_Name, fc.Theme, L2Distance(fc.Theme_embedding, ref_vec_0) AS distance\nFROM farm_competition fc\nJOIN city c ON fc.Host_city_ID = c.City_ID\nORDER BY distance\nLIMIT 3;",
        "integration_level": 5.0
    },
    {
        "db_id": "farm",
        "sql": "SELECT Competition_ID, Theme, distance\nFROM farm_competition\nWHERE Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Harvest festival celebration\") \nAND Host_city_ID = 1\nLIMIT 5;",
        "sql_result_column_count": 3,
        "sql_result_rows_count": 1,
        "sql_complexity": "Simple",
        "question_style": "Concise",
        "sql_explanation": "The SQL query retrieves information from the table `farm_competition`. It selects the columns `Competition_ID`, `Theme`, and `distance`. The query uses a vector search with the `MATCH lembed` function to find rows where the `Theme_embedding` is similar to the concept of \"Harvest festival celebration\". Additionally, it filters the results to only include competitions hosted in the city with `Host_city_ID` equal to 1. The results are limited to the top 5 entries based on relevance to the theme specified.",
        "question": "What are the IDs and themes of the top 5 competitions related to a harvest festival celebration held in the specified city?",
        "external_knowledge": "",
        "sqlite_sql": "SELECT Competition_ID, Theme, distance\nFROM farm_competition\nWHERE Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Harvest festival celebration\") \nAND Host_city_ID = 1\nLIMIT 5;",
        "postgresql_sql": "SELECT \"Competition_ID\", \"Theme\", \"farm_competition\".\"Theme_embedding\" <-> lembed('all-MiniLM-L6-v2', 'Harvest festival celebration') AS \"distance\"\nFROM \"farm_competition\"\nWHERE  \"Host_city_ID\" = 1\nORDER BY \"distance\"\nLIMIT 5;",
        "clickhouse_sql": "WITH\n    lembed('all-MiniLM-L6-v2', 'Harvest festival celebration') AS ref_vec_0\n\nSELECT Competition_ID, Theme, L2Distance(farm_competition.Theme_embedding, ref_vec_0) AS distance\nFROM farm_competition\nWHERE  Host_city_ID = 1\nORDER BY distance\nLIMIT 5;",
        "integration_level": 2.0
    },
    {
        "db_id": "game_injury",
        "sql": "WITH InjuryMatches AS (\n  SELECT \n    ia.id,\n    ia.Injury,\n    ia.game_id,\n    distance\n  FROM injury_accident ia\n  WHERE ia.Injury_embedding MATCH lembed('all-MiniLM-L6-v2', \"ACL tear\") \n  AND k = 5 \n),\nGameDetails AS (\n  SELECT \n    g.id AS game_id,\n    g.Date,\n    g.Home_team,\n    g.Away_team,\n    g.Competition,\n    im.distance\n  FROM game g\n  JOIN InjuryMatches im ON g.id = im.game_id\n),\nStadiumAnalytics AS (\n  SELECT \n    s.name,\n    s.Capacity_Percentage,\n    gd.distance\n  FROM stadium s\n  JOIN GameDetails gd ON s.id = gd.game_id\n  WHERE s.Capacity_Percentage > 75\n)\n\nSELECT \n  sa.name\nFROM StadiumAnalytics sa\nORDER BY sa.distance\nLIMIT 1;",
        "sql_result_column_count": 1,
        "sql_result_rows_count": 1,
        "sql_complexity": "Highly Complex",
        "question_style": "Colloquial",
        "sql_explanation": "This SQL query is structured in multiple parts using Common Table Expressions (CTEs). \n\n1. **InjuryMatches CTE**: This subquery selects entries from the `injury_accident` table where the `Injury_embedding` matches the vector representation of \"ACL tear\" using the `lembed` function with the `all-MiniLM-L6-v2` model. It retrieves the ID, type of injury, game ID, and the distance value, aiming to find the 5 most relevant injuries similar to \"ACL tear\".\n\n2. **GameDetails CTE**: Here, the query joins the results of `InjuryMatches` with the `game` table to get details about the games where these injuries occurred. It selects the game ID, date, home and away team names, competition name, and the distance value from the injury match.\n\n3. **StadiumAnalytics CTE**: This subquery further filters games by joining the `GameDetails` CTE with the `stadium` table. It selects the stadium name and capacity percentage, only considering stadiums with more than 75% capacity filled, along with the distance value for ordering purposes.\n\n4. **Final SELECT Query**: The main query selects the name of the stadium from the `StadiumAnalytics` CTE, ordering the results by the distance to get the stadium most associated with games featuring \"ACL tear\" injuries. It limits the result to only one stadium.",
        "question": "Hey! Can you find out which stadium is most associated with games where players got injuries like an ACL tear? I'm curious to know which one fills more than 75% of its capacity during such games, and only the top stadium please!",
        "external_knowledge": "",
        "sqlite_sql": "WITH InjuryMatches AS (\n  SELECT \n    ia.id,\n    ia.Injury,\n    ia.game_id,\n    distance\n  FROM injury_accident ia\n  WHERE ia.Injury_embedding MATCH lembed('all-MiniLM-L6-v2', \"ACL tear\") \n  AND k = 5 \n),\nGameDetails AS (\n  SELECT \n    g.id AS game_id,\n    g.Date,\n    g.Home_team,\n    g.Away_team,\n    g.Competition,\n    im.distance\n  FROM game g\n  JOIN InjuryMatches im ON g.id = im.game_id\n),\nStadiumAnalytics AS (\n  SELECT \n    s.name,\n    s.Capacity_Percentage,\n    gd.distance\n  FROM stadium s\n  JOIN GameDetails gd ON s.id = gd.game_id\n  WHERE s.Capacity_Percentage > 75\n)\n\nSELECT \n  sa.name\nFROM StadiumAnalytics sa\nORDER BY sa.distance\nLIMIT 1;",
        "postgresql_sql": "WITH \"InjuryMatches\" AS (\n    SELECT \n        \"ia\".\"id\",\n        \"ia\".\"Injury\",\n        \"ia\".\"game_id\",\n        \"ia\".\"Injury_embedding\" <-> lembed('all-MiniLM-L6-v2', 'ACL tear') AS \"distance\"\n      FROM \"injury_accident\" \"ia\"\n    ORDER BY \"distance\"\n    LIMIT 5\n),\n\n\"GameDetails\" AS (\n    SELECT \n        \"g\".\"id\" AS \"game_id\",\n        \"g\".\"Date\",\n        \"g\".\"Home_team\",\n        \"g\".\"Away_team\",\n        \"g\".\"Competition\",\n        \"im\".\"distance\"\n      FROM \"game\" \"g\"\n      JOIN \"InjuryMatches\" \"im\" ON \"g\".\"id\" = \"im\".\"game_id\"\n),\n\n\"StadiumAnalytics\" AS (\n    SELECT \n        \"s\".\"name\",\n        \"s\".\"Capacity_Percentage\",\n        \"gd\".\"distance\"\n      FROM \"stadium\" \"s\"\n      JOIN \"GameDetails\" \"gd\" ON \"s\".\"id\" = \"gd\".\"game_id\"\n      WHERE \"s\".\"Capacity_Percentage\" > 75\n)\n\nSELECT \n  \"sa\".\"name\"\nFROM \"StadiumAnalytics\" \"sa\"\nORDER BY \"sa\".\"distance\"\nLIMIT 1;",
        "clickhouse_sql": "WITH\n    lembed('all-MiniLM-L6-v2', 'ACL tear') AS ref_vec_0,\n\nInjuryMatches AS (\n    SELECT \n        ia.id,\n        ia.Injury,\n        ia.game_id,\n        L2Distance(ia.Injury_embedding, ref_vec_0) AS distance\n      FROM injury_accident ia\n    ORDER BY distance\n    LIMIT 5\n),\n\nGameDetails AS (\n    SELECT \n        g.id AS game_id,\n        g.Date,\n        g.Home_team,\n        g.Away_team,\n        g.Competition,\n        im.distance\n      FROM game g\n      JOIN InjuryMatches im ON g.id = im.game_id\n),\n\nStadiumAnalytics AS (\n    SELECT \n        s.name,\n        s.Capacity_Percentage,\n        gd.distance\n      FROM stadium s\n      JOIN GameDetails gd ON s.id = gd.game_id\n      WHERE s.Capacity_Percentage > 75\n)\n\nSELECT \n  sa.name\nFROM StadiumAnalytics sa\nORDER BY sa.distance\nLIMIT 1;",
        "integration_level": 1.0
    },
    {
        "db_id": "game_injury",
        "sql": "SELECT game.Home_team\nFROM injury_accident\nJOIN game ON injury_accident.game_id = game.id\nWHERE injury_accident.Injury_embedding MATCH lembed('all-MiniLM-L6-v2', \"Hamstring injury during match\") AND injury_accident.k = 5;",
        "sql_result_column_count": 1,
        "sql_result_rows_count": 5,
        "sql_complexity": "Moderate",
        "question_style": "Vague",
        "sql_explanation": "The SQL query retrieves the names of home teams from the `game` table that are associated with specific injury events recorded in the `injury_accident` table. The connection between these tables is established through the `game_id` column, where `injury_accident.game_id` matches `game.id`.\n\nThe query utilizes a vector search through the `MATCH` operator with the `lembed` function to identify those injury records that are semantically similar to the description \"Hamstring injury during match\". This process looks at the embeddings of injury descriptions and selects the top 5 records that are closest in meaning to the given phrase. Thus, the query filters the results to include only those games where an injury similar to \"Hamstring injury during match\" occurred.",
        "question": "Can you tell me which home teams were involved in games where there were a few injuries that sound like a hamstring injury happened during the match?",
        "external_knowledge": "The `MATCH` operator in the query performs an approximate nearest neighbor (ANN) search, which is used to find items with similar meanings based on vector embeddings. The `lembed` function generates these embeddings using a specified model ('all-MiniLM-L6-v2') to transform the textual description into a vector form. The `k=5` parameter specifies that the search should return the top 5 records that are most similar to the phrase \"Hamstring injury during match\". In this context, \"a few\" refers to this selection of 5 similar injury events. The similarity is determined based on the Euclidean distance between the vectors, with smaller distances indicating greater similarity.",
        "sqlite_sql": "SELECT game.Home_team\nFROM injury_accident\nJOIN game ON injury_accident.game_id = game.id\nWHERE injury_accident.Injury_embedding MATCH lembed('all-MiniLM-L6-v2', \"Hamstring injury during match\") AND injury_accident.k = 5;",
        "postgresql_sql": "SELECT \"game\".\"Home_team\", \"injury_accident\".\"Injury_embedding\" <-> lembed('all-MiniLM-L6-v2', 'Hamstring injury during match') AS \"distance\"\nFROM \"injury_accident\"\nJOIN \"game\" ON \"injury_accident\".\"game_id\" = \"game\".\"id\"\nORDER BY \"distance\"\nLIMIT 5;",
        "clickhouse_sql": "WITH\n    lembed('all-MiniLM-L6-v2', 'Hamstring injury during match') AS ref_vec_0\n\nSELECT game.Home_team, L2Distance(injury_accident.Injury_embedding, ref_vec_0) AS distance\nFROM injury_accident\nJOIN game ON injury_accident.game_id = game.id\nORDER BY distance\nLIMIT 5;",
        "integration_level": 5.0
    },
    {
        "db_id": "game_injury",
        "sql": "SELECT g.Date, g.Home_team, distance\nFROM game g\nJOIN injury_accident ia ON g.id = ia.game_id\nWHERE ia.Injury_embedding MATCH lembed('all-MiniLM-L6-v2', \"Knee surgery\") AND ia.k = 5\nORDER BY distance;",
        "sql_result_column_count": 3,
        "sql_result_rows_count": 5,
        "sql_complexity": "Moderate",
        "question_style": "Colloquial",
        "sql_explanation": "The SQL query is retrieving information from two tables: `game` (aliased as `g`) and `injury_accident` (aliased as `ia`), which are joined based on the `game_id`. It selects the `Date` and `Home_team` from the `game` table, and the `distance` of the match. The query specifically looks for entries in the `injury_accident` table where the `Injury_embedding` column matches a given semantic vector representation of \"Knee surgery\" using the `lembed` function with the 'all-MiniLM-L6-v2' model. The query requests the top 5 results (`ia.k = 5`) ordered by similarity (`ORDER BY distance`), indicating the closest matches to the concept of \"Knee surgery\".",
        "question": "Hey there! Can you grab me the dates and home teams for the top 5 games most related to knee surgery incidents? Oh, and make sure they're ordered by how closely they match!",
        "external_knowledge": "",
        "sqlite_sql": "SELECT g.Date, g.Home_team, distance\nFROM game g\nJOIN injury_accident ia ON g.id = ia.game_id\nWHERE ia.Injury_embedding MATCH lembed('all-MiniLM-L6-v2', \"Knee surgery\") AND ia.k = 5\nORDER BY distance;",
        "postgresql_sql": "SELECT \"g\".\"Date\", \"g\".\"Home_team\", \"ia\".\"Injury_embedding\" <-> lembed('all-MiniLM-L6-v2', 'Knee surgery') AS \"distance\"\nFROM \"game\" \"g\"\nJOIN \"injury_accident\" \"ia\" ON \"g\".\"id\" = \"ia\".\"game_id\"\nORDER BY \"distance\"\nLIMIT 5;",
        "clickhouse_sql": "WITH\n    lembed('all-MiniLM-L6-v2', 'Knee surgery') AS ref_vec_0\n\nSELECT g.Date, g.Home_team, L2Distance(ia.Injury_embedding, ref_vec_0) AS distance\nFROM game g\nJOIN injury_accident ia ON g.id = ia.game_id\nORDER BY distance\nLIMIT 5;",
        "integration_level": 5.0
    },
    {
        "db_id": "game_injury",
        "sql": "SELECT ia.Player\nFROM injury_accident ia\nJOIN game g ON ia.game_id = g.id\nWHERE ia.Injury_embedding MATCH lembed('all-MiniLM-L6-v2', \"Knee surgery recovery\") AND ia.k = 3;",
        "sql_result_column_count": 1,
        "sql_result_rows_count": 3,
        "sql_complexity": "Moderate",
        "question_style": "Concise",
        "sql_explanation": "The SQL query is selecting the names of players from the `injury_accident` table who have had an injury incident related to \"Knee surgery recovery.\" It uses vector search capabilities provided by the `sqlite-lembed` extension to match the injury description with an embedding of the specified phrase. The query limits the results to the top 3 most relevant players based on this match. Additionally, it joins the `injury_accident` table with the `game` table using the `game_id` to ensure the injury incidents are associated with specific games.",
        "question": "Who are the top 3 players recovering from knee surgery?",
        "external_knowledge": "",
        "sqlite_sql": "SELECT ia.Player\nFROM injury_accident ia\nJOIN game g ON ia.game_id = g.id\nWHERE ia.Injury_embedding MATCH lembed('all-MiniLM-L6-v2', \"Knee surgery recovery\") AND ia.k = 3;",
        "postgresql_sql": "SELECT \"ia\".\"Player\", \"ia\".\"Injury_embedding\" <-> lembed('all-MiniLM-L6-v2', 'Knee surgery recovery') AS \"distance\"\nFROM \"injury_accident\" \"ia\"\nJOIN \"game\" \"g\" ON \"ia\".\"game_id\" = \"g\".\"id\"\nORDER BY \"distance\"\nLIMIT 3;",
        "clickhouse_sql": "WITH\n    lembed('all-MiniLM-L6-v2', 'Knee surgery recovery') AS ref_vec_0\n\nSELECT ia.Player, L2Distance(ia.Injury_embedding, ref_vec_0) AS distance\nFROM injury_accident ia\nJOIN game g ON ia.game_id = g.id\nORDER BY distance\nLIMIT 3;",
        "integration_level": 5.0
    },
    {
        "db_id": "game_injury",
        "sql": "SELECT Player\nFROM injury_accident\nWHERE Injury_embedding MATCH lembed('all-MiniLM-L6-v2', \"meniscus tear\") LIMIT 1;",
        "sql_result_column_count": 1,
        "sql_result_rows_count": 1,
        "sql_complexity": "Simple",
        "question_style": "Concise",
        "sql_explanation": "The SQL query is designed to find the player associated with an injury that matches the vector representation of \"meniscus tear\" using the `lembed` function with the \"all-MiniLM-L6-v2\" model. It utilizes vector search operations to find the most relevant injury description or record related to \"meniscus tear\". The query limits the result to one player, indicating that it aims to find the single best match for this condition.",
        "question": "Which player had a meniscus tear injury?",
        "external_knowledge": "",
        "sqlite_sql": "SELECT Player\nFROM injury_accident\nWHERE Injury_embedding MATCH lembed('all-MiniLM-L6-v2', \"meniscus tear\") LIMIT 1;",
        "postgresql_sql": "SELECT \"Player\", \"injury_accident\".\"Injury_embedding\" <-> lembed('all-MiniLM-L6-v2', 'meniscus tear') AS \"distance\"\nFROM \"injury_accident\"\nORDER BY \"distance\"\nLIMIT 1;",
        "clickhouse_sql": "WITH\n    lembed('all-MiniLM-L6-v2', 'meniscus tear') AS ref_vec_0\n\nSELECT Player, L2Distance(injury_accident.Injury_embedding, ref_vec_0) AS distance\nFROM injury_accident\nORDER BY distance\nLIMIT 1;",
        "integration_level": 1.0
    }
]