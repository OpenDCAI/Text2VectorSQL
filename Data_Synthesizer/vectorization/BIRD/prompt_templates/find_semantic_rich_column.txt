You are an expert database analyst. Given a database schema in JSON format, your task is to identify semantically rich columns in each table - those containing descriptive information like information(info), descriptions(desc), notes, review, comments, or textual content that conveys meaningful information about entities.

**Input Structure:**
{{
  "db_id": "database_name",
  "table_names_original": ["table1", "table2"],
  "table_names": ["table1", "table2"],
  "column_names_original": [
    [-1, "*"],
    [0, "column1"],
    [0, "column2"],
    [1, "column3"]
  ],
  "column_names": [
    [-1, "*"],
    [0, "column1"],
    [0, "column2"],
    [1, "column3"]
  ],
  "column_types": ["type1", "type2", "type3"],
  "primary_keys": [n1], "foreign_keys": [[n1, n2]],
  "table_description": {{
    "table1": "description of table1 columns",
    "table2": "description of table2 columns"
  }},
  "table_samples": {{
    "table1": [{{"column1": "value", "column2": "value"}}],
    "table2": [{{"column3": "value"}}]
  }}
}}

**Your Task:**
1. Your task is to identify semantically rich columns for each table in table_names_original. To do this, you must analyze both the column names and the corresponding sample data provided in table_samples.
- A column is considered semantically rich if it meets the following criteria:
  * Descriptive Column Name. The column's name suggests it contains descriptive text. Examples include description, note, comment, info, or desc.

  * Substantial Textual Content. The corresponding sample data for the column in table_samples consists of a sentence or a paragraph of string data, not just single words or short phrases.

  * Not Numerical or an Identifier. The column's content is primarily textual, not numerical data or identifiers.
- A column is NOT to be considered semantically rich if any of the following exclusion rules apply:
  * Specific Names. The column name is name, address, or title.
  * Non-descriptive Content. Despite being text, the data in table_samples represents non-descriptive information like codes, IDs, or simple labels.

2. Output a JSON object where:
   - Keys are table names (from "table_names_original")
   - Values are arrays of objects with:
        {{
          "column_name": "original_column_name",
          "column_type": "column_data_type",
          "semantic_type": "detected_semantic_description"
        }}

3. Semantic categories should be one of:
   - "description" (e.g., product_description, note, summary)
   - "information" (e.g., information, info)
   - "text_content" (e.g., comment, review)

4. Focus on columns that:
   - Have text-based data types (text, varchar, etc.)
   - Contain descriptive information in sample data

5. Avoid including:
   - Primary/foreign keys used only for relationships
   - Technical/identifier columns (IDs, codes, numbers)
   - Date/time fields unless explicitly descriptive
   - Numerical measurements
   - name, title or address

**Output Example:**
```json
{{
  "table1": [
    {{"column_name": "product_information", "column_type": "text", "semantic_type": "information"}},
    {{"column_name": "description", "column_type": "text", "semantic_type": "description"}}
  ],
  "table2": [
    {{"column_name": "title", "column_type": "text", "semantic_type": "title"}}
  ]
}}
```

**Special Considerations:**
- Use both column names and sample data to determine semantic richness
- Prefer false positives over missing important semantic columns
- For columns with multiple semantic aspects, choose the most prominent one
- If no semantically rich columns exist in a table, return an empty array for that table

**Now process this database schema:**
{dababase_schema}

Let's think step by step
