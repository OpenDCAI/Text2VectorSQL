[
  {
    "db_id": "molecular_chemistry_and_drug_discovery",
    "sql": "SELECT ligand_id, distance\nFROM ligands\nWHERE ligand_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Lige\")\nLIMIT 1;",
    "column_count": 2,
    "rows": 0,
    "complexity": "Simple",
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT ligand_id, distance\nFROM ligands\nWHERE ligand_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Lige\")\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "molecular_chemistry_and_drug_discovery",
    "sql": "WITH SimilarLigands AS (\n    SELECT ligand_id, ligand_name, distance\n    FROM ligands\n    WHERE ligand_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Lige\") LIMIT 5\n)\nSELECT l.ligand_name, ma.predicted_delta_g, e.date\nFROM SimilarLigands l\nJOIN molecular_affinities ma ON l.ligand_id = ma.ligand_id\nJOIN experiments e ON ma.experiment_id = e.experiment_id\nORDER BY l.distance, ma.predicted_delta_g DESC;",
    "column_count": 3,
    "rows": 0,
    "complexity": "Complex",
    "style": "Descriptive",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Descriptive Style**\n   - Uses detailed descriptions with contextual information.\n   - Example: I want to know the names and home addresses of all students older than 18.\n   - Vector Example: I need to find articles that most closely related to Stable Diffusion, returning the top 3 matches sorted by cosine similarity.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH SimilarLigands AS (\n    SELECT ligand_id, ligand_name, distance\n    FROM ligands\n    WHERE ligand_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Lige\") LIMIT 5\n)\nSELECT l.ligand_name, ma.predicted_delta_g, e.date\nFROM SimilarLigands l\nJOIN molecular_affinities ma ON l.ligand_id = ma.ligand_id\nJOIN experiments e ON ma.experiment_id = e.experiment_id\nORDER BY l.distance, ma.predicted_delta_g DESC;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "molecular_chemistry_and_drug_discovery",
    "sql": "SELECT experiment_id, distance\nFROM experiments\nWHERE result_summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"Successful experiment with promising results\")\nLIMIT 5;",
    "column_count": 2,
    "rows": 0,
    "complexity": "Simple",
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT experiment_id, distance\nFROM experiments\nWHERE result_summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"Successful experiment with promising results\")\nLIMIT 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "traffic_volume_and_weather_analysis",
    "sql": "SELECT t.volume, s.location\nFROM traffic_data t\nJOIN sensors s ON t.sensor_id = s.sensor_id\nWHERE s.type_embedding MATCH lembed('all-MiniLM-L6-v2', 'traffic volume sensor') AND s.k = 3;",
    "column_count": 2,
    "rows": 0,
    "complexity": "Moderate",
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT t.volume, s.location\nFROM traffic_data t\nJOIN sensors s ON t.sensor_id = s.sensor_id\nWHERE s.type_embedding MATCH lembed('all-MiniLM-L6-v2', 'traffic volume sensor') AND s.k = 3;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "molecular_chemistry_and_drug_discovery",
    "sql": "SELECT ligand_id\nFROM ligands\nWHERE ligand_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Lige\")\nLIMIT 1;",
    "column_count": 1,
    "rows": 0,
    "complexity": "Simple",
    "style": "Multi-turn Dialogue",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Multi-turn Dialogue Style**\n    - This involves a dialogue to clarify the user's query needs.\n    - Example: [{\"User\": \"I want to query some student information.\"}, {\"Assistant\": \"Which students' information would you like to query?\"}, {\"User\": \"Students older than 18.\"}, {\"Assistant\": \"What other information would you like to know about them?\"}, {\"User\": \"Names and addresses.\"}, {\"Assistant\": \"Is there anything else you need?\"}, {\"User\": \"No.\"}, {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}]\n    - Vector Example: \n      User: \"I'm looking for some articles.\"\n      Assistant: \"How many articles would you like to find and What field of paper are you looking for?\"\n      User: \"About 3, and they are related to Stable Diffusion.\"\n      Assistant: \"I'll search for 3 articles that most closely related to Stable Diffusion.\"\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT ligand_id\nFROM ligands\nWHERE ligand_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Lige\")\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Dialogue:** Create a conversation between the User and the Assistant based on the SQL query and its explanation, ensuring vector operations are properly discussed.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the dialogue naturally covers:\n   - The purpose of the vector search;\n   - How many similar items are needed (LIMIT);\n   - What the target vector represents;\n   - Any additional filtering or sorting requirements.\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Multi-turn dialogue covering vector search details)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Create natural dialogue that explores vector search parameters\n4. Ensure LIMIT, target vector and distance sorting are discussed\n",
    "contains_vector": true
  },
  {
    "db_id": "traffic_volume_and_weather_analysis",
    "sql": "SELECT location_id, name\nFROM locations\nWHERE name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Central Park\")\nLIMIT 1;",
    "column_count": 2,
    "rows": 0,
    "complexity": "Simple",
    "style": "Vague",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Vague Style**\n   - Includes ambiguous vocabulary requiring inference.\n   - Example: What are the names and addresses of those older students? (External Knowledge: 'older students' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with Stable Diffusion. (External Knowledge: 'a few' refers to vector similarity search with k=3 limit)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT location_id, name\nFROM locations\nWHERE name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Central Park\")\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "traffic_volume_and_weather_analysis",
    "sql": "SELECT rowid, distance \nFROM sensors \nWHERE location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Central Park, New York, NY\")\nORDER BY distance \nLIMIT 1;",
    "column_count": 2,
    "rows": 0,
    "complexity": "Simple",
    "style": "Formal",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Formal Style**\n   - Uses standard grammar and vocabulary.\n   - Example: Find all students older than 18 years and return their home addresses.\n   - Vector Example: Find the three articles most closely related to Stable Diffusion and return them.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT rowid, distance \nFROM sensors \nWHERE location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Central Park, New York, NY\")\nORDER BY distance \nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "molecular_chemistry_and_drug_discovery",
    "sql": "SELECT ligand_id, ligand_name, chemical_formula, molecular_weight, distance\nFROM ligands\nWHERE ligand_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Lige\")\nLIMIT 5;",
    "column_count": 5,
    "rows": 0,
    "complexity": "Simple",
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT ligand_id, ligand_name, chemical_formula, molecular_weight, distance\nFROM ligands\nWHERE ligand_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Lige\")\nLIMIT 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "traffic_volume_and_weather_analysis",
    "sql": "WITH WeatherSimilarity AS (\n    SELECT \n        weather_id,\n        timestamp AS weather_timestamp,\n        distance AS weather_distance\n    FROM weather_conditions\n    WHERE weather_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"Sunny weather with cool breeze\") \n    AND k = 5\n),\nSensorLocationSimilarity AS (\n    SELECT \n        sensor_id,\n        distance AS location_distance\n    FROM sensors\n    WHERE location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Central Park, New York City, NY, USA\")\n    AND k = 5\n),\nTrafficWeatherMatch AS (\n    SELECT \n        td.record_id,\n        td.volume,\n        ws.weather_id,\n        ws.weather_distance\n    FROM traffic_data td\n    JOIN WeatherSimilarity ws ON td.timestamp = ws.weather_timestamp\n    WHERE td.rain = 0\n),\nFinalResult AS (\n    SELECT \n        twm.record_id,\n        twm.volume,\n        sls.sensor_id,\n        sls.location_distance\n    FROM TrafficWeatherMatch twm\n    JOIN SensorLocationSimilarity sls ON twm.record_id = sls.sensor_id\n)\nSELECT \n    record_id, \n    volume\nFROM FinalResult\nORDER BY location_distance;",
    "column_count": 2,
    "rows": 0,
    "complexity": "Highly Complex",
    "style": "Multi-turn Dialogue",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Multi-turn Dialogue Style**\n    - This involves a dialogue to clarify the user's query needs.\n    - Example: [{\"User\": \"I want to query some student information.\"}, {\"Assistant\": \"Which students' information would you like to query?\"}, {\"User\": \"Students older than 18.\"}, {\"Assistant\": \"What other information would you like to know about them?\"}, {\"User\": \"Names and addresses.\"}, {\"Assistant\": \"Is there anything else you need?\"}, {\"User\": \"No.\"}, {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}]\n    - Vector Example: \n      User: \"I'm looking for some articles.\"\n      Assistant: \"How many articles would you like to find and What field of paper are you looking for?\"\n      User: \"About 3, and they are related to Stable Diffusion.\"\n      Assistant: \"I'll search for 3 articles that most closely related to Stable Diffusion.\"\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH WeatherSimilarity AS (\n    SELECT \n        weather_id,\n        timestamp AS weather_timestamp,\n        distance AS weather_distance\n    FROM weather_conditions\n    WHERE weather_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"Sunny weather with cool breeze\") \n    AND k = 5\n),\nSensorLocationSimilarity AS (\n    SELECT \n        sensor_id,\n        distance AS location_distance\n    FROM sensors\n    WHERE location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Central Park, New York City, NY, USA\")\n    AND k = 5\n),\nTrafficWeatherMatch AS (\n    SELECT \n        td.record_id,\n        td.volume,\n        ws.weather_id,\n        ws.weather_distance\n    FROM traffic_data td\n    JOIN WeatherSimilarity ws ON td.timestamp = ws.weather_timestamp\n    WHERE td.rain = 0\n),\nFinalResult AS (\n    SELECT \n        twm.record_id,\n        twm.volume,\n        sls.sensor_id,\n        sls.location_distance\n    FROM TrafficWeatherMatch twm\n    JOIN SensorLocationSimilarity sls ON twm.record_id = sls.sensor_id\n)\nSELECT \n    record_id, \n    volume\nFROM FinalResult\nORDER BY location_distance;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Dialogue:** Create a conversation between the User and the Assistant based on the SQL query and its explanation, ensuring vector operations are properly discussed.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the dialogue naturally covers:\n   - The purpose of the vector search;\n   - How many similar items are needed (LIMIT);\n   - What the target vector represents;\n   - Any additional filtering or sorting requirements.\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Multi-turn dialogue covering vector search details)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Create natural dialogue that explores vector search parameters\n4. Ensure LIMIT, target vector and distance sorting are discussed\n",
    "contains_vector": true
  },
  {
    "db_id": "nfl_game_prediction_and_analysis",
    "sql": "WITH HighWDVOA AS (\n    SELECT t.team_id, t.team_name\n    FROM teams t\n    JOIN team_metrics tm ON t.team_id = tm.team_id\n    WHERE tm.wdvoa > 30 AND tm.season = 2023\n),\nSimilarGames AS (\n    SELECT g.game_id, g.home_team_id, g.away_team_id, distance\n    FROM games g\n    WHERE g.location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Stadium: 500 Main St, San Francisco, CA. Capacity: 70,000. Home team: 49ers\") LIMIT 5\n)\nSELECT g.game_id, AVG(p.confidence_level) AS avg_confidence\nFROM SimilarGames sg\nJOIN games g ON g.game_id = sg.game_id\nJOIN game_predictions p ON p.game_id = g.game_id\nJOIN HighWDVOA h ON (g.home_team_id = h.team_id OR g.away_team_id = h.team_id)\nGROUP BY g.game_id\nHAVING avg_confidence > 0.8\nORDER BY avg_confidence DESC;",
    "column_count": 2,
    "rows": 0,
    "complexity": "Complex",
    "style": "Formal",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Formal Style**\n   - Uses standard grammar and vocabulary.\n   - Example: Find all students older than 18 years and return their home addresses.\n   - Vector Example: Find the three articles most closely related to Stable Diffusion and return them.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH HighWDVOA AS (\n    SELECT t.team_id, t.team_name\n    FROM teams t\n    JOIN team_metrics tm ON t.team_id = tm.team_id\n    WHERE tm.wdvoa > 30 AND tm.season = 2023\n),\nSimilarGames AS (\n    SELECT g.game_id, g.home_team_id, g.away_team_id, distance\n    FROM games g\n    WHERE g.location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Stadium: 500 Main St, San Francisco, CA. Capacity: 70,000. Home team: 49ers\") LIMIT 5\n)\nSELECT g.game_id, AVG(p.confidence_level) AS avg_confidence\nFROM SimilarGames sg\nJOIN games g ON g.game_id = sg.game_id\nJOIN game_predictions p ON p.game_id = g.game_id\nJOIN HighWDVOA h ON (g.home_team_id = h.team_id OR g.away_team_id = h.team_id)\nGROUP BY g.game_id\nHAVING avg_confidence > 0.8\nORDER BY avg_confidence DESC;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "molecular_chemistry_and_drug_discovery",
    "sql": "SELECT p.name\nFROM protein_targets p\nJOIN binding_sites b ON p.protein_id = b.protein_id\nWHERE p.name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Protine\")\nAND b.binding_affinity < -7.5\nAND p.k = 1;",
    "column_count": 1,
    "rows": 0,
    "complexity": "Moderate",
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT p.name\nFROM protein_targets p\nJOIN binding_sites b ON p.protein_id = b.protein_id\nWHERE p.name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Protine\")\nAND b.binding_affinity < -7.5\nAND p.k = 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "nfl_game_prediction_and_analysis",
    "sql": "WITH TeamPerformance AS (\n    SELECT \n        tm.team_id,\n        tm.season,\n        AVG(tm.wdvoa) AS avg_wdvoa,\n        AVG(tm.ego) AS avg_ego\n    FROM team_metrics tm\n    GROUP BY tm.team_id, tm.season\n),\nHomeTeamAnalysis AS (\n    SELECT \n        g.game_id,\n        g.home_team_id,\n        tp.avg_wdvoa AS home_avg_wdvoa,\n        tp.avg_ego AS home_avg_ego\n    FROM games g\n    JOIN TeamPerformance tp ON g.home_team_id = tp.team_id AND g.season = tp.season\n),\nAwayTeamAnalysis AS (\n    SELECT \n        g.game_id,\n        g.away_team_id,\n        tp.avg_wdvoa AS away_avg_wdvoa,\n        tp.avg_ego AS away_avg_ego\n    FROM games g\n    JOIN TeamPerformance tp ON g.away_team_id = tp.team_id AND g.season = tp.season\n),\nBettingAndPredictions AS (\n    SELECT \n        g.game_id,\n        AVG(bd.betting_spread) AS avg_betting_spread,\n        AVG(gp.confidence_level) AS avg_confidence\n    FROM games g\n    JOIN betting_data bd ON g.game_id = bd.game_id\n    JOIN game_predictions gp ON g.game_id = gp.game_id\n    GROUP BY g.game_id\n),\nLocationSimilarity AS (\n    SELECT \n        g.game_id,\n        vec.distance AS location_similarity\n    FROM games g\n    JOIN (\n        SELECT rowid, distance \n        FROM games \n        WHERE location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\") \n        ORDER BY distance \n        LIMIT 5\n    ) AS vec ON g.rowid = vec.rowid\n)\nSELECT \n    g.game_id,\n    hta.home_avg_wdvoa - ata.away_avg_wdvoa AS wdvoa_diff,\n    hta.home_avg_ego - ata.away_avg_ego AS ego_diff,\n    bap.avg_betting_spread,\n    bap.avg_confidence,\n    ls.location_similarity\nFROM games g\nJOIN HomeTeamAnalysis hta ON g.game_id = hta.game_id\nJOIN AwayTeamAnalysis ata ON g.game_id = ata.game_id\nJOIN BettingAndPredictions bap ON g.game_id = bap.game_id\nJOIN LocationSimilarity ls ON g.game_id = ls.game_id\nWHERE hta.home_avg_ego > ata.away_avg_ego\nORDER BY g.game_id;",
    "column_count": 6,
    "rows": 0,
    "complexity": "Highly Complex",
    "style": "Multi-turn Dialogue",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Multi-turn Dialogue Style**\n    - This involves a dialogue to clarify the user's query needs.\n    - Example: [{\"User\": \"I want to query some student information.\"}, {\"Assistant\": \"Which students' information would you like to query?\"}, {\"User\": \"Students older than 18.\"}, {\"Assistant\": \"What other information would you like to know about them?\"}, {\"User\": \"Names and addresses.\"}, {\"Assistant\": \"Is there anything else you need?\"}, {\"User\": \"No.\"}, {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}]\n    - Vector Example: \n      User: \"I'm looking for some articles.\"\n      Assistant: \"How many articles would you like to find and What field of paper are you looking for?\"\n      User: \"About 3, and they are related to Stable Diffusion.\"\n      Assistant: \"I'll search for 3 articles that most closely related to Stable Diffusion.\"\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH TeamPerformance AS (\n    SELECT \n        tm.team_id,\n        tm.season,\n        AVG(tm.wdvoa) AS avg_wdvoa,\n        AVG(tm.ego) AS avg_ego\n    FROM team_metrics tm\n    GROUP BY tm.team_id, tm.season\n),\nHomeTeamAnalysis AS (\n    SELECT \n        g.game_id,\n        g.home_team_id,\n        tp.avg_wdvoa AS home_avg_wdvoa,\n        tp.avg_ego AS home_avg_ego\n    FROM games g\n    JOIN TeamPerformance tp ON g.home_team_id = tp.team_id AND g.season = tp.season\n),\nAwayTeamAnalysis AS (\n    SELECT \n        g.game_id,\n        g.away_team_id,\n        tp.avg_wdvoa AS away_avg_wdvoa,\n        tp.avg_ego AS away_avg_ego\n    FROM games g\n    JOIN TeamPerformance tp ON g.away_team_id = tp.team_id AND g.season = tp.season\n),\nBettingAndPredictions AS (\n    SELECT \n        g.game_id,\n        AVG(bd.betting_spread) AS avg_betting_spread,\n        AVG(gp.confidence_level) AS avg_confidence\n    FROM games g\n    JOIN betting_data bd ON g.game_id = bd.game_id\n    JOIN game_predictions gp ON g.game_id = gp.game_id\n    GROUP BY g.game_id\n),\nLocationSimilarity AS (\n    SELECT \n        g.game_id,\n        vec.distance AS location_similarity\n    FROM games g\n    JOIN (\n        SELECT rowid, distance \n        FROM games \n        WHERE location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\") \n        ORDER BY distance \n        LIMIT 5\n    ) AS vec ON g.rowid = vec.rowid\n)\nSELECT \n    g.game_id,\n    hta.home_avg_wdvoa - ata.away_avg_wdvoa AS wdvoa_diff,\n    hta.home_avg_ego - ata.away_avg_ego AS ego_diff,\n    bap.avg_betting_spread,\n    bap.avg_confidence,\n    ls.location_similarity\nFROM games g\nJOIN HomeTeamAnalysis hta ON g.game_id = hta.game_id\nJOIN AwayTeamAnalysis ata ON g.game_id = ata.game_id\nJOIN BettingAndPredictions bap ON g.game_id = bap.game_id\nJOIN LocationSimilarity ls ON g.game_id = ls.game_id\nWHERE hta.home_avg_ego > ata.away_avg_ego\nORDER BY g.game_id;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Dialogue:** Create a conversation between the User and the Assistant based on the SQL query and its explanation, ensuring vector operations are properly discussed.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the dialogue naturally covers:\n   - The purpose of the vector search;\n   - How many similar items are needed (LIMIT);\n   - What the target vector represents;\n   - Any additional filtering or sorting requirements.\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Multi-turn dialogue covering vector search details)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Create natural dialogue that explores vector search parameters\n4. Ensure LIMIT, target vector and distance sorting are discussed\n",
    "contains_vector": true
  },
  {
    "db_id": "traffic_volume_and_weather_analysis",
    "sql": "SELECT location_id\nFROM locations\nWHERE name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Central Park, New York\") \nLIMIT 1;",
    "column_count": 1,
    "rows": 0,
    "complexity": "Simple",
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT location_id\nFROM locations\nWHERE name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Central Park, New York\") \nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "molecular_chemistry_and_drug_discovery",
    "sql": "WITH SimilarLigands AS (\n    SELECT ligand_id, ligand_name, distance\n    FROM ligands\n    WHERE ligand_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Lige\") -- Generating a variation of the ligand name \"Ligand\" to perform fuzzy matching\n    ORDER BY distance\n    LIMIT 5\n),\nAffinityPredictions AS (\n    SELECT ap.experiment_id, ap.confidence_level\n    FROM affinity_predictions ap\n    JOIN molecular_affinities ma ON ap.experiment_id = ma.experiment_id\n    WHERE ap.tool_id = (\n        SELECT tool_id\n        FROM software_tools\n        WHERE name = 'ToolName' AND version = 'VersionX'\n    )\n)\nSELECT sl.ligand_name, AVG(ap.confidence_level) AS average_confidence\nFROM SimilarLigands sl\nJOIN experiments e ON sl.ligand_id = e.ligand_id\nJOIN AffinityPredictions ap ON e.experiment_id = ap.experiment_id\nGROUP BY sl.ligand_name\nHAVING average_confidence > 0.7;",
    "column_count": 2,
    "rows": 0,
    "complexity": "Complex",
    "style": "Descriptive",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Descriptive Style**\n   - Uses detailed descriptions with contextual information.\n   - Example: I want to know the names and home addresses of all students older than 18.\n   - Vector Example: I need to find articles that most closely related to Stable Diffusion, returning the top 3 matches sorted by cosine similarity.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH SimilarLigands AS (\n    SELECT ligand_id, ligand_name, distance\n    FROM ligands\n    WHERE ligand_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Lige\") -- Generating a variation of the ligand name \"Ligand\" to perform fuzzy matching\n    ORDER BY distance\n    LIMIT 5\n),\nAffinityPredictions AS (\n    SELECT ap.experiment_id, ap.confidence_level\n    FROM affinity_predictions ap\n    JOIN molecular_affinities ma ON ap.experiment_id = ma.experiment_id\n    WHERE ap.tool_id = (\n        SELECT tool_id\n        FROM software_tools\n        WHERE name = 'ToolName' AND version = 'VersionX'\n    )\n)\nSELECT sl.ligand_name, AVG(ap.confidence_level) AS average_confidence\nFROM SimilarLigands sl\nJOIN experiments e ON sl.ligand_id = e.ligand_id\nJOIN AffinityPredictions ap ON e.experiment_id = ap.experiment_id\nGROUP BY sl.ligand_name\nHAVING average_confidence > 0.7;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "nfl_game_prediction_and_analysis",
    "sql": "SELECT game_id, home_team_id, distance\nFROM games\nWHERE location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\") \nLIMIT 5;",
    "column_count": 3,
    "rows": 0,
    "complexity": "Simple",
    "style": "Imperative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Imperative Style**\n   - Uses command or directive sentences.\n   - Example: Could you please gather all the students who are older than 18? I really need to know their names and where they live!\n   - Vector Example: Please find the three articles most closely related to Stable Diffusion and return their name.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT game_id, home_team_id, distance\nFROM games\nWHERE location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\") \nLIMIT 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "traffic_volume_and_weather_analysis",
    "sql": "SELECT rowid, distance \nFROM locations \nWHERE name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Central Park\")\nLIMIT 1;",
    "column_count": 2,
    "rows": 0,
    "complexity": "Simple",
    "style": "Vague",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Vague Style**\n   - Includes ambiguous vocabulary requiring inference.\n   - Example: What are the names and addresses of those older students? (External Knowledge: 'older students' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with Stable Diffusion. (External Knowledge: 'a few' refers to vector similarity search with k=3 limit)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT rowid, distance \nFROM locations \nWHERE name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Central Park\")\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "nfl_game_prediction_and_analysis",
    "sql": "WITH BettingAnalysis AS (\n    SELECT \n        g.game_id,\n        AVG(bd.betting_spread) AS avg_initial_spread,\n        COUNT(*) AS total_bets\n    FROM games g\n    JOIN betting_data bd ON g.game_id = bd.game_id\n    GROUP BY g.game_id\n),\nPredictionAnalysis AS (\n    SELECT \n        gp.game_id,\n        AVG(gp.confidence_level) AS avg_confidence,\n        SUM(CASE WHEN gp.make_pick = 1 AND g.pick_right = 1 THEN 1 ELSE 0 END) AS correct_predictions\n    FROM games g\n    JOIN game_predictions gp ON g.game_id = gp.game_id\n    GROUP BY gp.game_id\n),\nTeamPerformance AS (\n    SELECT \n        tm.team_id,\n        tm.season,\n        AVG(tm.wdvoa) AS avg_wdvoa\n    FROM team_metrics tm\n    GROUP BY tm.team_id, tm.season\n),\nLocationSimilarity AS (\n    SELECT \n        g.game_id,\n        g.location,\n        vec.distance AS location_similarity\n    FROM games g\n    JOIN (\n        SELECT rowid, distance \n        FROM games \n        WHERE location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\") \n        ORDER BY distance \n        LIMIT 5\n    ) AS vec ON g.rowid = vec.rowid\n)\nSELECT \n    g.game_id\nFROM games g\nJOIN BettingAnalysis ba ON g.game_id = ba.game_id\nJOIN PredictionAnalysis pa ON g.game_id = pa.game_id\nJOIN TeamPerformance tp ON g.home_team_id = tp.team_id\nJOIN LocationSimilarity ls ON g.game_id = ls.game_id\nWHERE pa.correct_predictions > 2\nORDER BY g.game_id;",
    "column_count": 1,
    "rows": 0,
    "complexity": "Highly Complex",
    "style": "Descriptive",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Descriptive Style**\n   - Uses detailed descriptions with contextual information.\n   - Example: I want to know the names and home addresses of all students older than 18.\n   - Vector Example: I need to find articles that most closely related to Stable Diffusion, returning the top 3 matches sorted by cosine similarity.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH BettingAnalysis AS (\n    SELECT \n        g.game_id,\n        AVG(bd.betting_spread) AS avg_initial_spread,\n        COUNT(*) AS total_bets\n    FROM games g\n    JOIN betting_data bd ON g.game_id = bd.game_id\n    GROUP BY g.game_id\n),\nPredictionAnalysis AS (\n    SELECT \n        gp.game_id,\n        AVG(gp.confidence_level) AS avg_confidence,\n        SUM(CASE WHEN gp.make_pick = 1 AND g.pick_right = 1 THEN 1 ELSE 0 END) AS correct_predictions\n    FROM games g\n    JOIN game_predictions gp ON g.game_id = gp.game_id\n    GROUP BY gp.game_id\n),\nTeamPerformance AS (\n    SELECT \n        tm.team_id,\n        tm.season,\n        AVG(tm.wdvoa) AS avg_wdvoa\n    FROM team_metrics tm\n    GROUP BY tm.team_id, tm.season\n),\nLocationSimilarity AS (\n    SELECT \n        g.game_id,\n        g.location,\n        vec.distance AS location_similarity\n    FROM games g\n    JOIN (\n        SELECT rowid, distance \n        FROM games \n        WHERE location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\") \n        ORDER BY distance \n        LIMIT 5\n    ) AS vec ON g.rowid = vec.rowid\n)\nSELECT \n    g.game_id\nFROM games g\nJOIN BettingAnalysis ba ON g.game_id = ba.game_id\nJOIN PredictionAnalysis pa ON g.game_id = pa.game_id\nJOIN TeamPerformance tp ON g.home_team_id = tp.team_id\nJOIN LocationSimilarity ls ON g.game_id = ls.game_id\nWHERE pa.correct_predictions > 2\nORDER BY g.game_id;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "traffic_volume_and_weather_analysis",
    "sql": "SELECT location_id, name \nFROM locations \nWHERE name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Central Park in New York City\") \nORDER BY distance \nLIMIT 1;",
    "column_count": 2,
    "rows": 0,
    "complexity": "Simple",
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT location_id, name \nFROM locations \nWHERE name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Central Park in New York City\") \nORDER BY distance \nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "molecular_chemistry_and_drug_discovery",
    "sql": "WITH RelevantExperimentData AS (\n    SELECT e.experiment_id, e.result_summary\n    FROM experiments e\n    JOIN molecular_affinities ma ON e.experiment_id = ma.experiment_id\n    WHERE ma.predicted_delta_g < -5.0\n),\nSimilarExperiments AS (\n    SELECT e.experiment_id, e.result_summary, distance\n    FROM experiments e\n    WHERE e.result_summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"Optimal binding affinity results\") AND k = 10\n    ORDER BY distance\n),\nFinalData AS (\n    SELECT re.experiment_id, re.result_summary\n    FROM RelevantExperimentData re\n    JOIN SimilarExperiments se ON re.experiment_id = se.experiment_id\n)\nSELECT fd.result_summary\nFROM FinalData fd\nORDER BY fd.experiment_id\nLIMIT 1;",
    "column_count": 1,
    "rows": 0,
    "complexity": "Complex",
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH RelevantExperimentData AS (\n    SELECT e.experiment_id, e.result_summary\n    FROM experiments e\n    JOIN molecular_affinities ma ON e.experiment_id = ma.experiment_id\n    WHERE ma.predicted_delta_g < -5.0\n),\nSimilarExperiments AS (\n    SELECT e.experiment_id, e.result_summary, distance\n    FROM experiments e\n    WHERE e.result_summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"Optimal binding affinity results\") AND k = 10\n    ORDER BY distance\n),\nFinalData AS (\n    SELECT re.experiment_id, re.result_summary\n    FROM RelevantExperimentData re\n    JOIN SimilarExperiments se ON re.experiment_id = se.experiment_id\n)\nSELECT fd.result_summary\nFROM FinalData fd\nORDER BY fd.experiment_id\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "thoroughbred_horse_auction_and_pedigree_analysis",
    "sql": "SELECT hip_no, horse_name\nFROM horses\nWHERE horse_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Star Light\")\nAND k = 1;",
    "column_count": 2,
    "rows": 0,
    "complexity": "Simple",
    "style": "Vague",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Vague Style**\n   - Includes ambiguous vocabulary requiring inference.\n   - Example: What are the names and addresses of those older students? (External Knowledge: 'older students' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with Stable Diffusion. (External Knowledge: 'a few' refers to vector similarity search with k=3 limit)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT hip_no, horse_name\nFROM horses\nWHERE horse_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Star Light\")\nAND k = 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "traffic_volume_and_weather_analysis",
    "sql": "SELECT td.volume\nFROM traffic_data td\nJOIN weather_conditions wc ON td.timestamp = wc.timestamp\nWHERE wc.weather_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"heavy rainstorm and strong winds\") AND k = 3;",
    "column_count": 1,
    "rows": 0,
    "complexity": "Moderate",
    "style": "Concise",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Concise Style**\n   - Use short sentences.\n   - Example: Students older than 18, return their names and addresses.\n   - Vector Example: Top 3 related articles to Stable Diffusion.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT td.volume\nFROM traffic_data td\nJOIN weather_conditions wc ON td.timestamp = wc.timestamp\nWHERE wc.weather_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"heavy rainstorm and strong winds\") AND k = 3;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "nfl_game_prediction_and_analysis",
    "sql": "SELECT game_id, home_team_id, away_team_id\nFROM games\nWHERE location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\nORDER BY distance\nLIMIT 3;",
    "column_count": 3,
    "rows": 0,
    "complexity": "Simple",
    "style": "Descriptive",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Descriptive Style**\n   - Uses detailed descriptions with contextual information.\n   - Example: I want to know the names and home addresses of all students older than 18.\n   - Vector Example: I need to find articles that most closely related to Stable Diffusion, returning the top 3 matches sorted by cosine similarity.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT game_id, home_team_id, away_team_id\nFROM games\nWHERE location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\nORDER BY distance\nLIMIT 3;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "thoroughbred_horse_auction_and_pedigree_analysis",
    "sql": "SELECT hip_no, horse_name, sire, dam\nFROM horses\nWHERE horse_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Philly\")\nLIMIT 5;",
    "column_count": 4,
    "rows": 0,
    "complexity": "Simple",
    "style": "Metaphorical",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Metaphorical Style**\n   - Uses metaphors or metaphorical expressions.\n   - Example: Find the names and addresses of those who have reached adulthood. (External Knowledge: 'reached adulthood' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with SD in ai. (External Knowledge: 'SD in ai' refers to Stable Diffusion)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT hip_no, horse_name, sire, dam\nFROM horses\nWHERE horse_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Philly\")\nLIMIT 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "thoroughbred_horse_auction_and_pedigree_analysis",
    "sql": "SELECT hip_no\nFROM horses\nWHERE horse_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\") \nLIMIT 1;",
    "column_count": 1,
    "rows": 0,
    "complexity": "Simple",
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT hip_no\nFROM horses\nWHERE horse_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\") \nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "nfl_game_prediction_and_analysis",
    "sql": "SELECT game_id, distance \nFROM games \nWHERE location_embedding MATCH lembed('all-MiniLM-L6-v2', 'Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots') \nORDER BY distance \nLIMIT 1;",
    "column_count": 2,
    "rows": 0,
    "complexity": "Simple",
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT game_id, distance \nFROM games \nWHERE location_embedding MATCH lembed('all-MiniLM-L6-v2', 'Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots') \nORDER BY distance \nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "thoroughbred_horse_auction_and_pedigree_analysis",
    "sql": "SELECT h.horse_name, a.auction_name\nFROM horses h\nJOIN auctions a ON h.auction_id = a.auction_id\nWHERE h.horse_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Star\")\nAND a.status = 'Active'\nAND h.k = 5\nORDER BY h.distance;",
    "column_count": 2,
    "rows": 0,
    "complexity": "Moderate",
    "style": "Descriptive",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Descriptive Style**\n   - Uses detailed descriptions with contextual information.\n   - Example: I want to know the names and home addresses of all students older than 18.\n   - Vector Example: I need to find articles that most closely related to Stable Diffusion, returning the top 3 matches sorted by cosine similarity.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT h.horse_name, a.auction_name\nFROM horses h\nJOIN auctions a ON h.auction_id = a.auction_id\nWHERE h.horse_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Star\")\nAND a.status = 'Active'\nAND h.k = 5\nORDER BY h.distance;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "nfl_game_prediction_and_analysis",
    "sql": "WITH TeamPerformance AS (\n    SELECT \n        tm.team_id,\n        tm.season,\n        AVG(tm.wdvoa) AS avg_wdvoa\n    FROM team_metrics tm\n    GROUP BY tm.team_id, tm.season\n),\nBettingSummary AS (\n    SELECT \n        bd.game_id,\n        AVG(bd.betting_odds) AS avg_betting_odds,\n        COUNT(bd.betting_id) AS total_bets\n    FROM betting_data bd\n    GROUP BY bd.game_id\n),\nLocationSimilarity AS (\n    SELECT \n        g.game_id,\n        g.location,\n        vec.distance AS location_similarity\n    FROM games g\n    JOIN (\n        SELECT rowid, distance \n        FROM games \n        WHERE location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\") \n        ORDER BY distance \n        LIMIT 5\n    ) AS vec ON g.rowid = vec.rowid\n),\nGameAnalysis AS (\n    SELECT \n        g.game_id,\n        g.season,\n        g.week,\n        tp.avg_wdvoa,\n        bs.avg_betting_odds,\n        bs.total_bets,\n        ls.location_similarity\n    FROM games g\n    JOIN TeamPerformance tp ON g.home_team_id = tp.team_id\n    JOIN BettingSummary bs ON g.game_id = bs.game_id\n    JOIN LocationSimilarity ls ON g.game_id = ls.game_id\n    WHERE g.season = 2023\n)\nSELECT ga.avg_betting_odds\nFROM GameAnalysis ga\nWHERE ga.avg_wdvoa > 0.1\nAND ga.location_similarity < 0.5\nLIMIT 1;",
    "column_count": 1,
    "rows": 0,
    "complexity": "Highly Complex",
    "style": "Concise",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Concise Style**\n   - Use short sentences.\n   - Example: Students older than 18, return their names and addresses.\n   - Vector Example: Top 3 related articles to Stable Diffusion.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH TeamPerformance AS (\n    SELECT \n        tm.team_id,\n        tm.season,\n        AVG(tm.wdvoa) AS avg_wdvoa\n    FROM team_metrics tm\n    GROUP BY tm.team_id, tm.season\n),\nBettingSummary AS (\n    SELECT \n        bd.game_id,\n        AVG(bd.betting_odds) AS avg_betting_odds,\n        COUNT(bd.betting_id) AS total_bets\n    FROM betting_data bd\n    GROUP BY bd.game_id\n),\nLocationSimilarity AS (\n    SELECT \n        g.game_id,\n        g.location,\n        vec.distance AS location_similarity\n    FROM games g\n    JOIN (\n        SELECT rowid, distance \n        FROM games \n        WHERE location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\") \n        ORDER BY distance \n        LIMIT 5\n    ) AS vec ON g.rowid = vec.rowid\n),\nGameAnalysis AS (\n    SELECT \n        g.game_id,\n        g.season,\n        g.week,\n        tp.avg_wdvoa,\n        bs.avg_betting_odds,\n        bs.total_bets,\n        ls.location_similarity\n    FROM games g\n    JOIN TeamPerformance tp ON g.home_team_id = tp.team_id\n    JOIN BettingSummary bs ON g.game_id = bs.game_id\n    JOIN LocationSimilarity ls ON g.game_id = ls.game_id\n    WHERE g.season = 2023\n)\nSELECT ga.avg_betting_odds\nFROM GameAnalysis ga\nWHERE ga.avg_wdvoa > 0.1\nAND ga.location_similarity < 0.5\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "thoroughbred_horse_auction_and_pedigree_analysis",
    "sql": "SELECT horse_name\nFROM horses\nWHERE horse_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Bucky\")\nLIMIT 1;",
    "column_count": 1,
    "rows": 0,
    "complexity": "Simple",
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT horse_name\nFROM horses\nWHERE horse_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Bucky\")\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  }
]