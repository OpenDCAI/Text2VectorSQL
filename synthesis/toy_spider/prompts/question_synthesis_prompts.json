[
  {
    "db_id": "perpetrator",
    "sql": "SELECT Perpetrator_ID\nFROM perpetrator\nWHERE Location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Central Park, New York, NY, USA\") LIMIT 1;",
    "complexity": "Simple",
    "column_count": 1,
    "rows": 1,
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT Perpetrator_ID\nFROM perpetrator\nWHERE Location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Central Park, New York, NY, USA\") LIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "perpetrator",
    "sql": "WITH PerpetratorSearch AS (\n  SELECT Perpetrator_ID, Location, Year, distance\n  FROM perpetrator\n  WHERE Location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n  AND Year BETWEEN 2015 AND 2020\n  AND k = 5\n)\n\nSELECT p.People_ID\nFROM perpetrator p\nJOIN PerpetratorSearch ps ON p.Perpetrator_ID = ps.Perpetrator_ID\nORDER BY ps.distance\nLIMIT 1;",
    "complexity": "Complex",
    "column_count": 1,
    "rows": 0,
    "style": "Formal",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Formal Style**\n   - Uses standard grammar and vocabulary.\n   - Example: Find all students older than 18 years and return their home addresses.\n   - Vector Example: Find the three articles most closely related to Stable Diffusion and return them.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH PerpetratorSearch AS (\n  SELECT Perpetrator_ID, Location, Year, distance\n  FROM perpetrator\n  WHERE Location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n  AND Year BETWEEN 2015 AND 2020\n  AND k = 5\n)\n\nSELECT p.People_ID\nFROM perpetrator p\nJOIN PerpetratorSearch ps ON p.Perpetrator_ID = ps.Perpetrator_ID\nORDER BY ps.distance\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "musical",
    "sql": "SELECT m.Musical_ID\nFROM musical m\nJOIN actor a ON m.Musical_ID = a.Musical_ID\nWHERE m.Category_embedding MATCH lembed('all-MiniLM-L6-v2', \"Best Performance by a Supporting Actor in a Musical\") AND m.k = 5\nAND a.age > 30\nORDER BY m.distance;",
    "complexity": "Moderate",
    "column_count": 1,
    "rows": 0,
    "style": "Descriptive",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Descriptive Style**\n   - Uses detailed descriptions with contextual information.\n   - Example: I want to know the names and home addresses of all students older than 18.\n   - Vector Example: I need to find articles that most closely related to Stable Diffusion, returning the top 3 matches sorted by cosine similarity.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT m.Musical_ID\nFROM musical m\nJOIN actor a ON m.Musical_ID = a.Musical_ID\nWHERE m.Category_embedding MATCH lembed('all-MiniLM-L6-v2', \"Best Performance by a Supporting Actor in a Musical\") AND m.k = 5\nAND a.age > 30\nORDER BY m.distance;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "musical",
    "sql": "SELECT Musical_ID, Name, Category\nFROM musical\nWHERE Category_embedding MATCH lembed('all-MiniLM-L6-v2', \"Best Performance by a Leading Actor\")\nAND k = 5;",
    "complexity": "Simple",
    "column_count": 3,
    "rows": 5,
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT Musical_ID, Name, Category\nFROM musical\nWHERE Category_embedding MATCH lembed('all-MiniLM-L6-v2', \"Best Performance by a Leading Actor\")\nAND k = 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "perpetrator",
    "sql": "SELECT p.Name, pt.Location\nFROM people p\nJOIN perpetrator pt ON p.People_ID = pt.People_ID\nWHERE pt.Location_embedding MATCH lembed('all-MiniLM-L6-v2', \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\") AND pt.k = 5\nORDER BY pt.distance\nLIMIT 10;",
    "complexity": "Moderate",
    "column_count": 2,
    "rows": 5,
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT p.Name, pt.Location\nFROM people p\nJOIN perpetrator pt ON p.People_ID = pt.People_ID\nWHERE pt.Location_embedding MATCH lembed('all-MiniLM-L6-v2', \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\") AND pt.k = 5\nORDER BY pt.distance\nLIMIT 10;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "musical",
    "sql": "WITH ActorInfo AS (\n  SELECT a.Name AS ActorName, a.Character, m.Name AS MusicalName\n  FROM actor a\n  JOIN musical m ON a.Musical_ID = m.Musical_ID\n  WHERE a.age > 30\n)\n\nSELECT MusicalName\nFROM musical\nJOIN ActorInfo ON musical.Name = ActorInfo.MusicalName\nWHERE Category_embedding MATCH lembed('all-MiniLM-L6-v2', \"Performance by a Leading Actor\") AND k = 5\nORDER BY distance;",
    "complexity": "Complex",
    "column_count": 1,
    "rows": 0,
    "style": "Imperative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Imperative Style**\n   - Uses command or directive sentences.\n   - Example: Could you please gather all the students who are older than 18? I really need to know their names and where they live!\n   - Vector Example: Please find the three articles most closely related to Stable Diffusion and return their name.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH ActorInfo AS (\n  SELECT a.Name AS ActorName, a.Character, m.Name AS MusicalName\n  FROM actor a\n  JOIN musical m ON a.Musical_ID = m.Musical_ID\n  WHERE a.age > 30\n)\n\nSELECT MusicalName\nFROM musical\nJOIN ActorInfo ON musical.Name = ActorInfo.MusicalName\nWHERE Category_embedding MATCH lembed('all-MiniLM-L6-v2', \"Performance by a Leading Actor\") AND k = 5\nORDER BY distance;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "farm",
    "sql": "WITH CityDensity AS (\n  SELECT City_ID, Official_Name, Population / Area_km_2 AS Density\n  FROM city\n  ORDER BY Density DESC\n  LIMIT 3\n),\nTopWorkingHorses AS (\n  SELECT Farm_ID, Working_Horses\n  FROM farm\n  ORDER BY Working_Horses DESC\n  LIMIT 5\n)\nSELECT c.City_ID, c.Official_Name, f.Farm_ID, f.Working_Horses, fc.Competition_ID, fc.Theme, fc.distance\nFROM CityDensity c\nJOIN TopWorkingHorses f ON c.City_ID = f.Farm_ID\nJOIN farm_competition fc ON fc.Host_city_ID = c.City_ID\nWHERE fc.Hosts_embedding MATCH lembed('all-MiniLM-L6-v2', \"A small town with growing infrastructure\") AND fc.k = 5\nORDER BY fc.distance;",
    "complexity": "Complex",
    "column_count": 7,
    "rows": 3,
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH CityDensity AS (\n  SELECT City_ID, Official_Name, Population / Area_km_2 AS Density\n  FROM city\n  ORDER BY Density DESC\n  LIMIT 3\n),\nTopWorkingHorses AS (\n  SELECT Farm_ID, Working_Horses\n  FROM farm\n  ORDER BY Working_Horses DESC\n  LIMIT 5\n)\nSELECT c.City_ID, c.Official_Name, f.Farm_ID, f.Working_Horses, fc.Competition_ID, fc.Theme, fc.distance\nFROM CityDensity c\nJOIN TopWorkingHorses f ON c.City_ID = f.Farm_ID\nJOIN farm_competition fc ON fc.Host_city_ID = c.City_ID\nWHERE fc.Hosts_embedding MATCH lembed('all-MiniLM-L6-v2', \"A small town with growing infrastructure\") AND fc.k = 5\nORDER BY fc.distance;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "musical",
    "sql": "SELECT Musical_ID\nFROM musical\nWHERE Category_embedding MATCH lembed('all-MiniLM-L6-v2', \"Best Performance by a Leading Actress in a Musical\")\nORDER BY distance\nLIMIT 1;",
    "complexity": "Simple",
    "column_count": 1,
    "rows": 1,
    "style": "Multi-turn Dialogue",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Multi-turn Dialogue Style**\n    - This involves a dialogue to clarify the user's query needs.\n    - Example: [{\"User\": \"I want to query some student information.\"}, {\"Assistant\": \"Which students' information would you like to query?\"}, {\"User\": \"Students older than 18.\"}, {\"Assistant\": \"What other information would you like to know about them?\"}, {\"User\": \"Names and addresses.\"}, {\"Assistant\": \"Is there anything else you need?\"}, {\"User\": \"No.\"}, {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}]\n    - Vector Example: \n      User: \"I'm looking for some articles.\"\n      Assistant: \"How many articles would you like to find and What field of paper are you looking for?\"\n      User: \"About 3, and they are related to Stable Diffusion.\"\n      Assistant: \"I'll search for 3 articles that most closely related to Stable Diffusion.\"\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT Musical_ID\nFROM musical\nWHERE Category_embedding MATCH lembed('all-MiniLM-L6-v2', \"Best Performance by a Leading Actress in a Musical\")\nORDER BY distance\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Dialogue:** Create a conversation between the User and the Assistant based on the SQL query and its explanation, ensuring vector operations are properly discussed.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the dialogue naturally covers:\n   - The purpose of the vector search;\n   - How many similar items are needed (LIMIT);\n   - What the target vector represents;\n   - Any additional filtering or sorting requirements.\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Multi-turn dialogue covering vector search details)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Create natural dialogue that explores vector search parameters\n4. Ensure LIMIT, target vector and distance sorting are discussed\n",
    "contains_vector": true
  },
  {
    "db_id": "musical",
    "sql": "SELECT COUNT(m.Musical_ID)\nFROM musical m\nJOIN actor a ON m.Musical_ID = a.Musical_ID\nWHERE m.Category_embedding MATCH lembed('all-MiniLM-L6-v2', \"Outstanding performance in musical theater\") AND k = 3\nAND a.age BETWEEN 20 AND 40\nAND m.Year >= 2000\nAND m.Result = 'Won';",
    "complexity": "Highly Complex",
    "column_count": 1,
    "rows": 1,
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT COUNT(m.Musical_ID)\nFROM musical m\nJOIN actor a ON m.Musical_ID = a.Musical_ID\nWHERE m.Category_embedding MATCH lembed('all-MiniLM-L6-v2', \"Outstanding performance in musical theater\") AND k = 3\nAND a.age BETWEEN 20 AND 40\nAND m.Year >= 2000\nAND m.Result = 'Won';\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "farm",
    "sql": "WITH StatusMatchingCities AS (\n  SELECT City_ID, Official_Name, Status, distance\n  FROM city\n  WHERE Status_embedding MATCH lembed('all-MiniLM-L6-v2', \"Metropolitan\")\n  AND k = 5\n)\n\nSELECT ci.value\nFROM StatusMatchingCities smc\nJOIN city_info ci ON smc.City_ID = ci.key\nWHERE smc.Status = 'Metropolitan'\nORDER BY smc.distance;",
    "complexity": "Complex",
    "column_count": 1,
    "rows": 0,
    "style": "Vague",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Vague Style**\n   - Includes ambiguous vocabulary requiring inference.\n   - Example: What are the names and addresses of those older students? (External Knowledge: 'older students' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with Stable Diffusion. (External Knowledge: 'a few' refers to vector similarity search with k=3 limit)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH StatusMatchingCities AS (\n  SELECT City_ID, Official_Name, Status, distance\n  FROM city\n  WHERE Status_embedding MATCH lembed('all-MiniLM-L6-v2', \"Metropolitan\")\n  AND k = 5\n)\n\nSELECT ci.value\nFROM StatusMatchingCities smc\nJOIN city_info ci ON smc.City_ID = ci.key\nWHERE smc.Status = 'Metropolitan'\nORDER BY smc.distance;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "perpetrator",
    "sql": "SELECT p.Name\nFROM perpetrator per\nJOIN people p ON per.People_ID = p.People_ID\nWHERE per.Location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Central Park: 59th St to 110th St, New York, NY 10023. Area: 843 acres. Famous for: iconic skyline views\") AND per.k = 5;",
    "complexity": "Moderate",
    "column_count": 1,
    "rows": 5,
    "style": "Formal",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Formal Style**\n   - Uses standard grammar and vocabulary.\n   - Example: Find all students older than 18 years and return their home addresses.\n   - Vector Example: Find the three articles most closely related to Stable Diffusion and return them.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT p.Name\nFROM perpetrator per\nJOIN people p ON per.People_ID = p.People_ID\nWHERE per.Location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Central Park: 59th St to 110th St, New York, NY 10023. Area: 843 acres. Famous for: iconic skyline views\") AND per.k = 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "farm",
    "sql": "SELECT c.City_ID\nFROM city c\nJOIN farm_competition fc ON c.City_ID = fc.Host_city_ID\nWHERE fc.Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Agricultural Innovations and Sustainability\") AND fc.k = 3;",
    "complexity": "Moderate",
    "column_count": 1,
    "rows": 3,
    "style": "Formal",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Formal Style**\n   - Uses standard grammar and vocabulary.\n   - Example: Find all students older than 18 years and return their home addresses.\n   - Vector Example: Find the three articles most closely related to Stable Diffusion and return them.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT c.City_ID\nFROM city c\nJOIN farm_competition fc ON c.City_ID = fc.Host_city_ID\nWHERE fc.Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Agricultural Innovations and Sustainability\") AND fc.k = 3;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "farm",
    "sql": "SELECT c.Official_Name\nFROM city c\nWHERE c.Status_embedding MATCH lembed('all-MiniLM-L6-v2', \"Town\") \n  LIMIT 1;",
    "complexity": "Moderate",
    "column_count": 1,
    "rows": 1,
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT c.Official_Name\nFROM city c\nWHERE c.Status_embedding MATCH lembed('all-MiniLM-L6-v2', \"Town\") \n  LIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "farm",
    "sql": "SELECT City_ID, Official_Name, Status, Area_km_2, distance\nFROM city\nWHERE Status_embedding MATCH lembed('all-MiniLM-L6-v2', \"Metropolis\") \nAND k = 3;",
    "complexity": "Simple",
    "column_count": 5,
    "rows": 3,
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT City_ID, Official_Name, Status, Area_km_2, distance\nFROM city\nWHERE Status_embedding MATCH lembed('all-MiniLM-L6-v2', \"Metropolis\") \nAND k = 3;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "farm",
    "sql": "SELECT City_ID\nFROM city\nWHERE Status_embedding MATCH lembed('all-MiniLM-L6-v2', \"Capital City\") \nLIMIT 1;",
    "complexity": "Simple",
    "column_count": 1,
    "rows": 1,
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT City_ID\nFROM city\nWHERE Status_embedding MATCH lembed('all-MiniLM-L6-v2', \"Capital City\") \nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "farm",
    "sql": "WITH FilteredCities AS (\n  SELECT City_ID, Official_Name, Population\n  FROM city\n  WHERE Population > 1000000\n)\n\nSELECT fc.City_ID\nFROM FilteredCities fc\nJOIN city c ON fc.City_ID = c.City_ID\nWHERE c.Status_embedding MATCH lembed('all-MiniLM-L6-v2', \"Capital city with bustling economy\") AND c.k = 5\nORDER BY distance;",
    "complexity": "Complex",
    "column_count": 1,
    "rows": 0,
    "style": "Multi-turn Dialogue",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Multi-turn Dialogue Style**\n    - This involves a dialogue to clarify the user's query needs.\n    - Example: [{\"User\": \"I want to query some student information.\"}, {\"Assistant\": \"Which students' information would you like to query?\"}, {\"User\": \"Students older than 18.\"}, {\"Assistant\": \"What other information would you like to know about them?\"}, {\"User\": \"Names and addresses.\"}, {\"Assistant\": \"Is there anything else you need?\"}, {\"User\": \"No.\"}, {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}]\n    - Vector Example: \n      User: \"I'm looking for some articles.\"\n      Assistant: \"How many articles would you like to find and What field of paper are you looking for?\"\n      User: \"About 3, and they are related to Stable Diffusion.\"\n      Assistant: \"I'll search for 3 articles that most closely related to Stable Diffusion.\"\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH FilteredCities AS (\n  SELECT City_ID, Official_Name, Population\n  FROM city\n  WHERE Population > 1000000\n)\n\nSELECT fc.City_ID\nFROM FilteredCities fc\nJOIN city c ON fc.City_ID = c.City_ID\nWHERE c.Status_embedding MATCH lembed('all-MiniLM-L6-v2', \"Capital city with bustling economy\") AND c.k = 5\nORDER BY distance;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Dialogue:** Create a conversation between the User and the Assistant based on the SQL query and its explanation, ensuring vector operations are properly discussed.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the dialogue naturally covers:\n   - The purpose of the vector search;\n   - How many similar items are needed (LIMIT);\n   - What the target vector represents;\n   - Any additional filtering or sorting requirements.\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Multi-turn dialogue covering vector search details)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Create natural dialogue that explores vector search parameters\n4. Ensure LIMIT, target vector and distance sorting are discussed\n",
    "contains_vector": true
  },
  {
    "db_id": "farm",
    "sql": "WITH CompetitionsWithTheme AS (\n    SELECT \n        fc.Competition_ID, \n        fc.Host_city_ID, \n        fc.Theme, \n        distance\n    FROM \n        farm_competition fc\n    WHERE \n        fc.Theme_embedding MATCH lembed('all-MiniLM-L6-v2', 'Agriculture Innovation') \n        AND k = 5\n)\n\n\nSELECT \n    c.Official_Name AS CityName, \n    c.Population, \n    ct.Theme\nFROM \n    CompetitionsWithTheme ct\nJOIN \n    city c ON ct.Host_city_ID = c.City_ID\nORDER BY \n    ct.distance;",
    "complexity": "Complex",
    "column_count": 3,
    "rows": 5,
    "style": "Formal",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Formal Style**\n   - Uses standard grammar and vocabulary.\n   - Example: Find all students older than 18 years and return their home addresses.\n   - Vector Example: Find the three articles most closely related to Stable Diffusion and return them.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH CompetitionsWithTheme AS (\n    SELECT \n        fc.Competition_ID, \n        fc.Host_city_ID, \n        fc.Theme, \n        distance\n    FROM \n        farm_competition fc\n    WHERE \n        fc.Theme_embedding MATCH lembed('all-MiniLM-L6-v2', 'Agriculture Innovation') \n        AND k = 5\n)\n\n\nSELECT \n    c.Official_Name AS CityName, \n    c.Population, \n    ct.Theme\nFROM \n    CompetitionsWithTheme ct\nJOIN \n    city c ON ct.Host_city_ID = c.City_ID\nORDER BY \n    ct.distance;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "farm",
    "sql": "SELECT City_ID, Official_Name\nFROM city\nWHERE Status_embedding MATCH lembed('all-MiniLM-L6-v2', \"Metropolitan City\")\nLIMIT 1;",
    "complexity": "Simple",
    "column_count": 2,
    "rows": 1,
    "style": "Multi-turn Dialogue",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Multi-turn Dialogue Style**\n    - This involves a dialogue to clarify the user's query needs.\n    - Example: [{\"User\": \"I want to query some student information.\"}, {\"Assistant\": \"Which students' information would you like to query?\"}, {\"User\": \"Students older than 18.\"}, {\"Assistant\": \"What other information would you like to know about them?\"}, {\"User\": \"Names and addresses.\"}, {\"Assistant\": \"Is there anything else you need?\"}, {\"User\": \"No.\"}, {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}]\n    - Vector Example: \n      User: \"I'm looking for some articles.\"\n      Assistant: \"How many articles would you like to find and What field of paper are you looking for?\"\n      User: \"About 3, and they are related to Stable Diffusion.\"\n      Assistant: \"I'll search for 3 articles that most closely related to Stable Diffusion.\"\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT City_ID, Official_Name\nFROM city\nWHERE Status_embedding MATCH lembed('all-MiniLM-L6-v2', \"Metropolitan City\")\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Dialogue:** Create a conversation between the User and the Assistant based on the SQL query and its explanation, ensuring vector operations are properly discussed.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the dialogue naturally covers:\n   - The purpose of the vector search;\n   - How many similar items are needed (LIMIT);\n   - What the target vector represents;\n   - Any additional filtering or sorting requirements.\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Multi-turn dialogue covering vector search details)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Create natural dialogue that explores vector search parameters\n4. Ensure LIMIT, target vector and distance sorting are discussed\n",
    "contains_vector": true
  },
  {
    "db_id": "farm",
    "sql": "SELECT fc.Theme\nFROM city c\nJOIN farm_competition fc ON c.City_ID = fc.Host_city_ID\nWHERE c.Status_embedding MATCH lembed('all-MiniLM-L6-v2', \"Village\") AND c.k = 5;",
    "complexity": "Moderate",
    "column_count": 1,
    "rows": 6,
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT fc.Theme\nFROM city c\nJOIN farm_competition fc ON c.City_ID = fc.Host_city_ID\nWHERE c.Status_embedding MATCH lembed('all-MiniLM-L6-v2', \"Village\") AND c.k = 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "game_injury",
    "sql": "SELECT ia.Player\nFROM injury_accident ia\nJOIN game g ON ia.game_id = g.id\nWHERE ia.Injury_embedding MATCH lembed('all-MiniLM-L6-v2', \"Knee ligament tear\")\nAND g.Season = 2022\nAND ia.k = 3;",
    "complexity": "Moderate",
    "column_count": 1,
    "rows": 0,
    "style": "Multi-turn Dialogue",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Multi-turn Dialogue Style**\n    - This involves a dialogue to clarify the user's query needs.\n    - Example: [{\"User\": \"I want to query some student information.\"}, {\"Assistant\": \"Which students' information would you like to query?\"}, {\"User\": \"Students older than 18.\"}, {\"Assistant\": \"What other information would you like to know about them?\"}, {\"User\": \"Names and addresses.\"}, {\"Assistant\": \"Is there anything else you need?\"}, {\"User\": \"No.\"}, {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}]\n    - Vector Example: \n      User: \"I'm looking for some articles.\"\n      Assistant: \"How many articles would you like to find and What field of paper are you looking for?\"\n      User: \"About 3, and they are related to Stable Diffusion.\"\n      Assistant: \"I'll search for 3 articles that most closely related to Stable Diffusion.\"\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT ia.Player\nFROM injury_accident ia\nJOIN game g ON ia.game_id = g.id\nWHERE ia.Injury_embedding MATCH lembed('all-MiniLM-L6-v2', \"Knee ligament tear\")\nAND g.Season = 2022\nAND ia.k = 3;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Dialogue:** Create a conversation between the User and the Assistant based on the SQL query and its explanation, ensuring vector operations are properly discussed.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the dialogue naturally covers:\n   - The purpose of the vector search;\n   - How many similar items are needed (LIMIT);\n   - What the target vector represents;\n   - Any additional filtering or sorting requirements.\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Multi-turn dialogue covering vector search details)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Create natural dialogue that explores vector search parameters\n4. Ensure LIMIT, target vector and distance sorting are discussed\n",
    "contains_vector": true
  },
  {
    "db_id": "farm",
    "sql": "SELECT City_ID, Official_Name\nFROM city\nWHERE Status_embedding MATCH lembed('all-MiniLM-L6-v2', \"Metropolis\") \nAND k = 3;",
    "complexity": "Simple",
    "column_count": 2,
    "rows": 3,
    "style": "Vague",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Vague Style**\n   - Includes ambiguous vocabulary requiring inference.\n   - Example: What are the names and addresses of those older students? (External Knowledge: 'older students' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with Stable Diffusion. (External Knowledge: 'a few' refers to vector similarity search with k=3 limit)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT City_ID, Official_Name\nFROM city\nWHERE Status_embedding MATCH lembed('all-MiniLM-L6-v2', \"Metropolis\") \nAND k = 3;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "perpetrator",
    "sql": "SELECT p.Name\nFROM perpetrator pe\nJOIN people p ON pe.People_ID = p.People_ID\nWHERE pe.Location_embedding MATCH lembed('all-MiniLM-L6-v2', 'Central Park, NY') AND pe.k = 5;",
    "complexity": "Moderate",
    "column_count": 1,
    "rows": 5,
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT p.Name\nFROM perpetrator pe\nJOIN people p ON pe.People_ID = p.People_ID\nWHERE pe.Location_embedding MATCH lembed('all-MiniLM-L6-v2', 'Central Park, NY') AND pe.k = 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "station_weather",
    "sql": "SELECT id, network_name, services\nFROM station\nWHERE services_embedding MATCH lembed('all-MiniLM-L6-v2', \"Northern line and Southern Rail\")\nLIMIT 5;",
    "complexity": "Simple",
    "column_count": 3,
    "rows": 5,
    "style": "Metaphorical",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Metaphorical Style**\n   - Uses metaphors or metaphorical expressions.\n   - Example: Find the names and addresses of those who have reached adulthood. (External Knowledge: 'reached adulthood' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with SD in ai. (External Knowledge: 'SD in ai' refers to Stable Diffusion)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT id, network_name, services\nFROM station\nWHERE services_embedding MATCH lembed('all-MiniLM-L6-v2', \"Northern line and Southern Rail\")\nLIMIT 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "perpetrator",
    "sql": "SELECT Perpetrator_ID, Location \nFROM perpetrator \nWHERE Location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Central Park, New York, NY\") \nLIMIT 1;",
    "complexity": "Simple",
    "column_count": 2,
    "rows": 1,
    "style": "Descriptive",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Descriptive Style**\n   - Uses detailed descriptions with contextual information.\n   - Example: I want to know the names and home addresses of all students older than 18.\n   - Vector Example: I need to find articles that most closely related to Stable Diffusion, returning the top 3 matches sorted by cosine similarity.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT Perpetrator_ID, Location \nFROM perpetrator \nWHERE Location_embedding MATCH lembed('all-MiniLM-L6-v2', \"Central Park, New York, NY\") \nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "game_injury",
    "sql": "SELECT s.name\nFROM injury_accident ia\nJOIN game g ON ia.game_id = g.id\nJOIN stadium s ON g.stadium_id = s.id\nWHERE ia.Injury_embedding MATCH lembed('all-MiniLM-L6-v2', \"ACL tear in knee\") AND ia.k = 3;",
    "complexity": "Moderate",
    "column_count": 1,
    "rows": 3,
    "style": "Formal",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Formal Style**\n   - Uses standard grammar and vocabulary.\n   - Example: Find all students older than 18 years and return their home addresses.\n   - Vector Example: Find the three articles most closely related to Stable Diffusion and return them.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT s.name\nFROM injury_accident ia\nJOIN game g ON ia.game_id = g.id\nJOIN stadium s ON g.stadium_id = s.id\nWHERE ia.Injury_embedding MATCH lembed('all-MiniLM-L6-v2', \"ACL tear in knee\") AND ia.k = 3;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "station_weather",
    "sql": "SELECT id \nFROM station \nWHERE services_embedding MATCH lembed('all-MiniLM-L6-v2', \"National Rail Train Services\") \nLIMIT 1;",
    "complexity": "Simple",
    "column_count": 1,
    "rows": 1,
    "style": "Imperative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Imperative Style**\n   - Uses command or directive sentences.\n   - Example: Could you please gather all the students who are older than 18? I really need to know their names and where they live!\n   - Vector Example: Please find the three articles most closely related to Stable Diffusion and return their name.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT id \nFROM station \nWHERE services_embedding MATCH lembed('all-MiniLM-L6-v2', \"National Rail Train Services\") \nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "farm",
    "sql": "WITH RankedCities AS (\n  SELECT \n    c.City_ID,\n    c.Official_Name,\n    c.Status,\n    c.Population,\n    f.Farm_ID,\n    f.Year,\n    cr.Rank,\n    fc.Theme,\n    fc.Hosts,\n    c.distance as city_distance\n  FROM \n    city c\n  JOIN \n    farm_competition fc ON c.City_ID = fc.Host_city_ID\n  JOIN \n    competition_record cr ON fc.Competition_ID = cr.Competition_ID\n  JOIN \n    farm f ON cr.Farm_ID = f.Farm_ID\n  WHERE \n    c.Status_embedding MATCH lembed('all-MiniLM-L6-v2', 'Major city status with high population density') AND c.k = 5\n    AND fc.Theme_embedding MATCH lembed('all-MiniLM-L6-v2', 'Annual agricultural showcase with international participants') AND fc.k = 3\n  ORDER BY \n    city_distance\n  LIMIT 10\n)\nSELECT \n  Official_Name, \n  MAX(Population) AS Max_Population\nFROM \n  RankedCities\nGROUP BY \n  Official_Name\nORDER BY \n  Max_Population DESC;",
    "complexity": "Highly Complex",
    "column_count": 2,
    "rows": 2,
    "style": "Vague",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Vague Style**\n   - Includes ambiguous vocabulary requiring inference.\n   - Example: What are the names and addresses of those older students? (External Knowledge: 'older students' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with Stable Diffusion. (External Knowledge: 'a few' refers to vector similarity search with k=3 limit)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH RankedCities AS (\n  SELECT \n    c.City_ID,\n    c.Official_Name,\n    c.Status,\n    c.Population,\n    f.Farm_ID,\n    f.Year,\n    cr.Rank,\n    fc.Theme,\n    fc.Hosts,\n    c.distance as city_distance\n  FROM \n    city c\n  JOIN \n    farm_competition fc ON c.City_ID = fc.Host_city_ID\n  JOIN \n    competition_record cr ON fc.Competition_ID = cr.Competition_ID\n  JOIN \n    farm f ON cr.Farm_ID = f.Farm_ID\n  WHERE \n    c.Status_embedding MATCH lembed('all-MiniLM-L6-v2', 'Major city status with high population density') AND c.k = 5\n    AND fc.Theme_embedding MATCH lembed('all-MiniLM-L6-v2', 'Annual agricultural showcase with international participants') AND fc.k = 3\n  ORDER BY \n    city_distance\n  LIMIT 10\n)\nSELECT \n  Official_Name, \n  MAX(Population) AS Max_Population\nFROM \n  RankedCities\nGROUP BY \n  Official_Name\nORDER BY \n  Max_Population DESC;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "station_weather",
    "sql": "SELECT id, distance\nFROM station\nWHERE services_embedding MATCH lembed('all-MiniLM-L6-v2', \"Central line and Northern Railways\")\nAND k = 5;",
    "complexity": "Simple",
    "column_count": 2,
    "rows": 5,
    "style": "Concise",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Concise Style**\n   - Use short sentences.\n   - Example: Students older than 18, return their names and addresses.\n   - Vector Example: Top 3 related articles to Stable Diffusion.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT id, distance\nFROM station\nWHERE services_embedding MATCH lembed('all-MiniLM-L6-v2', \"Central line and Northern Railways\")\nAND k = 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  }
]