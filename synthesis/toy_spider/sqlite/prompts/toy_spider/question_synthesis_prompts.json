[
  {
    "db_id": "browser_web",
    "sql": "SELECT id, name, Operating_system, distance\nFROM Web_client_accelerator\nWHERE Operating_system_embedding MATCH lembed('all-MiniLM-L6-v2', \"Appliance Linux\") \nAND k = 3\nORDER BY distance;",
    "complexity": "Simple",
    "column_count": 4,
    "rows": 3,
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT id, name, Operating_system, distance\nFROM Web_client_accelerator\nWHERE Operating_system_embedding MATCH lembed('all-MiniLM-L6-v2', \"Appliance Linux\") \nAND k = 3\nORDER BY distance;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "browser_web",
    "sql": "SELECT id, name\nFROM Web_client_accelerator\nWHERE Operating_system_embedding MATCH lembed('all-MiniLM-L6-v2', 'Ubuntu Linux system with advanced security features')\nAND k = 3;",
    "complexity": "Simple",
    "column_count": 2,
    "rows": 3,
    "style": "Formal",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Formal Style**\n   - Uses standard grammar and vocabulary.\n   - Example: Find all students older than 18 years and return their home addresses.\n   - Vector Example: Find the three articles most closely related to Stable Diffusion and return them.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT id, name\nFROM Web_client_accelerator\nWHERE Operating_system_embedding MATCH lembed('all-MiniLM-L6-v2', 'Ubuntu Linux system with advanced security features')\nAND k = 3;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "browser_web",
    "sql": "SELECT id\nFROM Web_client_accelerator\nWHERE Operating_system_embedding MATCH lembed('all-MiniLM-L6-v2', \"Appliance (Linux)\")\nLIMIT 1;",
    "complexity": "Simple",
    "column_count": 1,
    "rows": 1,
    "style": "Descriptive",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Descriptive Style**\n   - Uses detailed descriptions with contextual information.\n   - Example: I want to know the names and home addresses of all students older than 18.\n   - Vector Example: I need to find articles that most closely related to Stable Diffusion, returning the top 3 matches sorted by cosine similarity.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT id\nFROM Web_client_accelerator\nWHERE Operating_system_embedding MATCH lembed('all-MiniLM-L6-v2', \"Appliance (Linux)\")\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "browser_web",
    "sql": "SELECT wc.id\nFROM Web_client_accelerator wc\nJOIN accelerator_compatible_browser acb ON wc.id = acb.accelerator_id\nWHERE wc.Operating_system_embedding MATCH lembed('all-MiniLM-L6-v2', \"Windows 10\") AND wc.k = 3\nORDER BY distance\nLIMIT 1;",
    "complexity": "Moderate",
    "column_count": 1,
    "rows": 1,
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT wc.id\nFROM Web_client_accelerator wc\nJOIN accelerator_compatible_browser acb ON wc.id = acb.accelerator_id\nWHERE wc.Operating_system_embedding MATCH lembed('all-MiniLM-L6-v2', \"Windows 10\") AND wc.k = 3\nORDER BY distance\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "browser_web",
    "sql": "SELECT wca.name, b.name\nFROM Web_client_accelerator wca\nJOIN accelerator_compatible_browser acb ON wca.id = acb.accelerator_id\nJOIN browser b ON acb.browser_id = b.id\nWHERE wca.Operating_system_embedding MATCH lembed('all-MiniLM-L6-v2', \"Appliance (Linux)\")\nAND wca.k = 5;",
    "complexity": "Moderate",
    "column_count": 2,
    "rows": 5,
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT wca.name, b.name\nFROM Web_client_accelerator wca\nJOIN accelerator_compatible_browser acb ON wca.id = acb.accelerator_id\nJOIN browser b ON acb.browser_id = b.id\nWHERE wca.Operating_system_embedding MATCH lembed('all-MiniLM-L6-v2', \"Appliance (Linux)\")\nAND wca.k = 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "browser_web",
    "sql": "WITH SimilarOperatingSystems AS (\n  SELECT \n    id, \n    name, \n    Operating_system, \n    Client, \n    Connection, \n    distance \n  FROM \n    Web_client_accelerator \n  WHERE \n    Operating_system_embedding MATCH lembed('all-MiniLM-L6-v2', \"Windows Server\") AND k = 10\n)\n\nSELECT \n  s.id, \n  b.name as browser_name\nFROM \n  SimilarOperatingSystems s\nJOIN \n  accelerator_compatible_browser acb ON s.id = acb.accelerator_id\nJOIN \n  browser b ON acb.browser_id = b.id\nWHERE \n  b.market_share > 5\nORDER BY \n  s.distance\nLIMIT 5;",
    "complexity": "Highly Complex",
    "column_count": 2,
    "rows": 2,
    "style": "Imperative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Imperative Style**\n   - Uses command or directive sentences.\n   - Example: Could you please gather all the students who are older than 18? I really need to know their names and where they live!\n   - Vector Example: Please find the three articles most closely related to Stable Diffusion and return their name.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH SimilarOperatingSystems AS (\n  SELECT \n    id, \n    name, \n    Operating_system, \n    Client, \n    Connection, \n    distance \n  FROM \n    Web_client_accelerator \n  WHERE \n    Operating_system_embedding MATCH lembed('all-MiniLM-L6-v2', \"Windows Server\") AND k = 10\n)\n\nSELECT \n  s.id, \n  b.name as browser_name\nFROM \n  SimilarOperatingSystems s\nJOIN \n  accelerator_compatible_browser acb ON s.id = acb.accelerator_id\nJOIN \n  browser b ON acb.browser_id = b.id\nWHERE \n  b.market_share > 5\nORDER BY \n  s.distance\nLIMIT 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "browser_web",
    "sql": "WITH CompatibleAccelerators AS (\n  SELECT\n    wca.id AS accelerator_id,\n    wca.name AS accelerator_name,\n    acb.compatible_since_year\n  FROM\n    Web_client_accelerator wca\n  JOIN\n    accelerator_compatible_browser acb ON wca.id = acb.accelerator_id\n  JOIN\n    browser b ON acb.browser_id = b.id\n  WHERE\n    b.name = 'Chrome'\n)\n\nSELECT\n  ca.accelerator_name,\n  wca.Client,\n  wca.distance\nFROM\n  CompatibleAccelerators ca\nJOIN\n  Web_client_accelerator wca ON ca.accelerator_id = wca.id\nWHERE\n  wca.Client_embedding MATCH lembed('all-MiniLM-L6-v2', 'Internet Service Provider') AND wca.k = 5\nORDER BY\n  wca.distance;",
    "complexity": "Complex",
    "column_count": 3,
    "rows": 0,
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH CompatibleAccelerators AS (\n  SELECT\n    wca.id AS accelerator_id,\n    wca.name AS accelerator_name,\n    acb.compatible_since_year\n  FROM\n    Web_client_accelerator wca\n  JOIN\n    accelerator_compatible_browser acb ON wca.id = acb.accelerator_id\n  JOIN\n    browser b ON acb.browser_id = b.id\n  WHERE\n    b.name = 'Chrome'\n)\n\nSELECT\n  ca.accelerator_name,\n  wca.Client,\n  wca.distance\nFROM\n  CompatibleAccelerators ca\nJOIN\n  Web_client_accelerator wca ON ca.accelerator_id = wca.id\nWHERE\n  wca.Client_embedding MATCH lembed('all-MiniLM-L6-v2', 'Internet Service Provider') AND wca.k = 5\nORDER BY\n  wca.distance;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "browser_web",
    "sql": "SELECT wca.name\nFROM Web_client_accelerator wca\nJOIN accelerator_compatible_browser acb ON wca.id = acb.accelerator_id\nJOIN browser b ON acb.browser_id = b.id\nWHERE wca.Operating_system_embedding MATCH lembed('all-MiniLM-L6-v2', \"Linux\") AND wca.k = 1\nAND b.market_share > 20.0\nORDER BY distance\nLIMIT 1;",
    "complexity": "Moderate",
    "column_count": 1,
    "rows": 0,
    "style": "Multi-turn Dialogue",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Multi-turn Dialogue Style**\n    - This involves a dialogue to clarify the user's query needs.\n    - Example: [{\"User\": \"I want to query some student information.\"}, {\"Assistant\": \"Which students' information would you like to query?\"}, {\"User\": \"Students older than 18.\"}, {\"Assistant\": \"What other information would you like to know about them?\"}, {\"User\": \"Names and addresses.\"}, {\"Assistant\": \"Is there anything else you need?\"}, {\"User\": \"No.\"}, {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}]\n    - Vector Example: \n      User: \"I'm looking for some articles.\"\n      Assistant: \"How many articles would you like to find and What field of paper are you looking for?\"\n      User: \"About 3, and they are related to Stable Diffusion.\"\n      Assistant: \"I'll search for 3 articles that most closely related to Stable Diffusion.\"\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT wca.name\nFROM Web_client_accelerator wca\nJOIN accelerator_compatible_browser acb ON wca.id = acb.accelerator_id\nJOIN browser b ON acb.browser_id = b.id\nWHERE wca.Operating_system_embedding MATCH lembed('all-MiniLM-L6-v2', \"Linux\") AND wca.k = 1\nAND b.market_share > 20.0\nORDER BY distance\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Dialogue:** Create a conversation between the User and the Assistant based on the SQL query and its explanation, ensuring vector operations are properly discussed.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the dialogue naturally covers:\n   - The purpose of the vector search;\n   - How many similar items are needed (LIMIT);\n   - What the target vector represents;\n   - Any additional filtering or sorting requirements.\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Multi-turn dialogue covering vector search details)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Create natural dialogue that explores vector search parameters\n4. Ensure LIMIT, target vector and distance sorting are discussed\n",
    "contains_vector": true
  },
  {
    "db_id": "farm",
    "sql": "SELECT Competition_ID, Host_city_ID\nFROM farm_competition\nWHERE Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"A festive atmosphere with music and dance\") \nLIMIT 1;",
    "complexity": "Simple",
    "column_count": 2,
    "rows": 1,
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT Competition_ID, Host_city_ID\nFROM farm_competition\nWHERE Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"A festive atmosphere with music and dance\") \nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "farm",
    "sql": "SELECT c.Official_Name\nFROM city c\nJOIN farm_competition fc ON c.City_ID = fc.Host_city_ID\nWHERE fc.Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Agriculture Innovation\") AND fc.k = 3;",
    "complexity": "Moderate",
    "column_count": 1,
    "rows": 3,
    "style": "Vague",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Vague Style**\n   - Includes ambiguous vocabulary requiring inference.\n   - Example: What are the names and addresses of those older students? (External Knowledge: 'older students' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with Stable Diffusion. (External Knowledge: 'a few' refers to vector similarity search with k=3 limit)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT c.Official_Name\nFROM city c\nJOIN farm_competition fc ON c.City_ID = fc.Host_city_ID\nWHERE fc.Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Agriculture Innovation\") AND fc.k = 3;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "browser_web",
    "sql": "SELECT id, name\nFROM Web_client_accelerator\nWHERE Operating_system_embedding MATCH lembed('all-MiniLM-L6-v2', \"Linux operating system environment\")\nLIMIT 5;",
    "complexity": "Simple",
    "column_count": 2,
    "rows": 5,
    "style": "Formal",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Formal Style**\n   - Uses standard grammar and vocabulary.\n   - Example: Find all students older than 18 years and return their home addresses.\n   - Vector Example: Find the three articles most closely related to Stable Diffusion and return them.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT id, name\nFROM Web_client_accelerator\nWHERE Operating_system_embedding MATCH lembed('all-MiniLM-L6-v2', \"Linux operating system environment\")\nLIMIT 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "farm",
    "sql": "WITH ThemeBasedCompetitions AS (\n  SELECT Competition_ID, Host_city_ID\n  FROM farm_competition\n  WHERE Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Celebration of Harvest Festival\")\n  AND k = 5\n)\n\nSELECT c.Official_Name, fc.Competition_ID\nFROM ThemeBasedCompetitions fc\nJOIN city c ON fc.Host_city_ID = c.City_ID;",
    "complexity": "Complex",
    "column_count": 2,
    "rows": 5,
    "style": "Formal",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Formal Style**\n   - Uses standard grammar and vocabulary.\n   - Example: Find all students older than 18 years and return their home addresses.\n   - Vector Example: Find the three articles most closely related to Stable Diffusion and return them.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH ThemeBasedCompetitions AS (\n  SELECT Competition_ID, Host_city_ID\n  FROM farm_competition\n  WHERE Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Celebration of Harvest Festival\")\n  AND k = 5\n)\n\nSELECT c.Official_Name, fc.Competition_ID\nFROM ThemeBasedCompetitions fc\nJOIN city c ON fc.Host_city_ID = c.City_ID;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "farm",
    "sql": "WITH Similar_Competitions AS (\n    SELECT \n        fc.Competition_ID, \n        fc.Host_city_ID,\n        fc.Theme,\n        fc.distance\n    FROM \n        farm_competition fc\n    WHERE \n        fc.Year = 2022\n        AND fc.Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Harvest Festival\") AND k = 5\n    ORDER BY \n        fc.distance\n),\nRanked_Farms AS (\n    SELECT \n        cr.Competition_ID,\n        cr.Farm_ID,\n        f.Total_Cattle,\n        f.Total_Horses,\n        RANK() OVER (PARTITION BY cr.Competition_ID ORDER BY f.Total_Cattle + f.Total_Horses DESC) AS Farm_Rank\n    FROM \n        competition_record cr\n    JOIN \n        farm f ON cr.Farm_ID = f.Farm_ID\n    WHERE \n        cr.Competition_ID IN (SELECT Competition_ID FROM Similar_Competitions)\n)\nSELECT \n    c.Official_Name\nFROM \n    Similar_Competitions sc\nJOIN \n    city c ON sc.Host_city_ID = c.City_ID\nGROUP BY \n    c.Official_Name\nORDER BY \n    COUNT(sc.Competition_ID) DESC\nLIMIT 1;",
    "complexity": "Highly Complex",
    "column_count": 1,
    "rows": 0,
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH Similar_Competitions AS (\n    SELECT \n        fc.Competition_ID, \n        fc.Host_city_ID,\n        fc.Theme,\n        fc.distance\n    FROM \n        farm_competition fc\n    WHERE \n        fc.Year = 2022\n        AND fc.Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Harvest Festival\") AND k = 5\n    ORDER BY \n        fc.distance\n),\nRanked_Farms AS (\n    SELECT \n        cr.Competition_ID,\n        cr.Farm_ID,\n        f.Total_Cattle,\n        f.Total_Horses,\n        RANK() OVER (PARTITION BY cr.Competition_ID ORDER BY f.Total_Cattle + f.Total_Horses DESC) AS Farm_Rank\n    FROM \n        competition_record cr\n    JOIN \n        farm f ON cr.Farm_ID = f.Farm_ID\n    WHERE \n        cr.Competition_ID IN (SELECT Competition_ID FROM Similar_Competitions)\n)\nSELECT \n    c.Official_Name\nFROM \n    Similar_Competitions sc\nJOIN \n    city c ON sc.Host_city_ID = c.City_ID\nGROUP BY \n    c.Official_Name\nORDER BY \n    COUNT(sc.Competition_ID) DESC\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "farm",
    "sql": "WITH RankedCompetitions AS (\n  SELECT \n    cr.Competition_ID,\n    cr.Rank,\n    fc.Theme,\n    fc.distance\n  FROM \n    competition_record cr\n  JOIN \n    farm_competition fc ON cr.Competition_ID = fc.Competition_ID\n  WHERE \n    fc.Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Agricultural advancements\") \n    AND k = 5  \n)\n\nSELECT \n  Rank, \n  Theme\nFROM \n  RankedCompetitions\nORDER BY \n  distance\nLIMIT 10;",
    "complexity": "Complex",
    "column_count": 2,
    "rows": 10,
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH RankedCompetitions AS (\n  SELECT \n    cr.Competition_ID,\n    cr.Rank,\n    fc.Theme,\n    fc.distance\n  FROM \n    competition_record cr\n  JOIN \n    farm_competition fc ON cr.Competition_ID = fc.Competition_ID\n  WHERE \n    fc.Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Agricultural advancements\") \n    AND k = 5  \n)\n\nSELECT \n  Rank, \n  Theme\nFROM \n  RankedCompetitions\nORDER BY \n  distance\nLIMIT 10;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "browser_web",
    "sql": "WITH AcceleratorMatch AS (\n  SELECT id, distance\n  FROM Web_client_accelerator\n  WHERE Client_embedding MATCH lembed('all-MiniLM-L6-v2', \"End user and ISP type clients\")\n  AND k = 5\n)\nSELECT b.name\nFROM browser b\nJOIN accelerator_compatible_browser acb ON b.id = acb.browser_id\nJOIN AcceleratorMatch am ON acb.accelerator_id = am.id\nORDER BY am.distance\nLIMIT 1;",
    "complexity": "Complex",
    "column_count": 1,
    "rows": 1,
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH AcceleratorMatch AS (\n  SELECT id, distance\n  FROM Web_client_accelerator\n  WHERE Client_embedding MATCH lembed('all-MiniLM-L6-v2', \"End user and ISP type clients\")\n  AND k = 5\n)\nSELECT b.name\nFROM browser b\nJOIN accelerator_compatible_browser acb ON b.id = acb.browser_id\nJOIN AcceleratorMatch am ON acb.accelerator_id = am.id\nORDER BY am.distance\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "farm",
    "sql": "SELECT Competition_ID\nFROM farm_competition\nWHERE Theme_embedding MATCH lembed('all-MiniLM-L6-v2', 'Agriculture and Innovation') \nLIMIT 1;",
    "complexity": "Simple",
    "column_count": 1,
    "rows": 1,
    "style": "Multi-turn Dialogue",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Multi-turn Dialogue Style**\n    - This involves a dialogue to clarify the user's query needs.\n    - Example: [{\"User\": \"I want to query some student information.\"}, {\"Assistant\": \"Which students' information would you like to query?\"}, {\"User\": \"Students older than 18.\"}, {\"Assistant\": \"What other information would you like to know about them?\"}, {\"User\": \"Names and addresses.\"}, {\"Assistant\": \"Is there anything else you need?\"}, {\"User\": \"No.\"}, {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}]\n    - Vector Example: \n      User: \"I'm looking for some articles.\"\n      Assistant: \"How many articles would you like to find and What field of paper are you looking for?\"\n      User: \"About 3, and they are related to Stable Diffusion.\"\n      Assistant: \"I'll search for 3 articles that most closely related to Stable Diffusion.\"\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT Competition_ID\nFROM farm_competition\nWHERE Theme_embedding MATCH lembed('all-MiniLM-L6-v2', 'Agriculture and Innovation') \nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Dialogue:** Create a conversation between the User and the Assistant based on the SQL query and its explanation, ensuring vector operations are properly discussed.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the dialogue naturally covers:\n   - The purpose of the vector search;\n   - How many similar items are needed (LIMIT);\n   - What the target vector represents;\n   - Any additional filtering or sorting requirements.\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Multi-turn dialogue covering vector search details)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Create natural dialogue that explores vector search parameters\n4. Ensure LIMIT, target vector and distance sorting are discussed\n",
    "contains_vector": true
  },
  {
    "db_id": "game_injury",
    "sql": "SELECT Player \nFROM injury_accident \nWHERE Injury_embedding MATCH lembed('all-MiniLM-L6-v2', \"Knee injury\") \nLIMIT 1;",
    "complexity": "Simple",
    "column_count": 1,
    "rows": 1,
    "style": "Formal",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Formal Style**\n   - Uses standard grammar and vocabulary.\n   - Example: Find all students older than 18 years and return their home addresses.\n   - Vector Example: Find the three articles most closely related to Stable Diffusion and return them.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT Player \nFROM injury_accident \nWHERE Injury_embedding MATCH lembed('all-MiniLM-L6-v2', \"Knee injury\") \nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "farm",
    "sql": "SELECT fc.Competition_ID\nFROM farm_competition fc\nJOIN city c ON fc.Host_city_ID = c.City_ID\nWHERE fc.Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Annual farming contest with livestock\") AND fc.k = 3;",
    "complexity": "Moderate",
    "column_count": 1,
    "rows": 3,
    "style": "Multi-turn Dialogue",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Multi-turn Dialogue Style**\n    - This involves a dialogue to clarify the user's query needs.\n    - Example: [{\"User\": \"I want to query some student information.\"}, {\"Assistant\": \"Which students' information would you like to query?\"}, {\"User\": \"Students older than 18.\"}, {\"Assistant\": \"What other information would you like to know about them?\"}, {\"User\": \"Names and addresses.\"}, {\"Assistant\": \"Is there anything else you need?\"}, {\"User\": \"No.\"}, {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}]\n    - Vector Example: \n      User: \"I'm looking for some articles.\"\n      Assistant: \"How many articles would you like to find and What field of paper are you looking for?\"\n      User: \"About 3, and they are related to Stable Diffusion.\"\n      Assistant: \"I'll search for 3 articles that most closely related to Stable Diffusion.\"\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT fc.Competition_ID\nFROM farm_competition fc\nJOIN city c ON fc.Host_city_ID = c.City_ID\nWHERE fc.Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Annual farming contest with livestock\") AND fc.k = 3;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Dialogue:** Create a conversation between the User and the Assistant based on the SQL query and its explanation, ensuring vector operations are properly discussed.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the dialogue naturally covers:\n   - The purpose of the vector search;\n   - How many similar items are needed (LIMIT);\n   - What the target vector represents;\n   - Any additional filtering or sorting requirements.\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Multi-turn dialogue covering vector search details)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Create natural dialogue that explores vector search parameters\n4. Ensure LIMIT, target vector and distance sorting are discussed\n",
    "contains_vector": true
  },
  {
    "db_id": "station_weather",
    "sql": "SELECT s.network_name\nFROM station s\nJOIN route r ON s.id = r.station_id\nJOIN train t ON r.train_id = t.id\nWHERE s.services_embedding MATCH lembed('all-MiniLM-L6-v2', \"suburban and intercity trains\") AND s.k = 5;",
    "complexity": "Moderate",
    "column_count": 1,
    "rows": 7,
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT s.network_name\nFROM station s\nJOIN route r ON s.id = r.station_id\nJOIN train t ON r.train_id = t.id\nWHERE s.services_embedding MATCH lembed('all-MiniLM-L6-v2', \"suburban and intercity trains\") AND s.k = 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "game_injury",
    "sql": "SELECT\n  game_id,\n  id,\n  Player,\n  Injury,\n  distance\nFROM\n  injury_accident\nWHERE\n  Injury_embedding MATCH lembed('all-MiniLM-L6-v2', 'Meniscus tear')\nLIMIT 1;",
    "complexity": "Simple",
    "column_count": 5,
    "rows": 1,
    "style": "Multi-turn Dialogue",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Multi-turn Dialogue Style**\n    - This involves a dialogue to clarify the user's query needs.\n    - Example: [{\"User\": \"I want to query some student information.\"}, {\"Assistant\": \"Which students' information would you like to query?\"}, {\"User\": \"Students older than 18.\"}, {\"Assistant\": \"What other information would you like to know about them?\"}, {\"User\": \"Names and addresses.\"}, {\"Assistant\": \"Is there anything else you need?\"}, {\"User\": \"No.\"}, {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}]\n    - Vector Example: \n      User: \"I'm looking for some articles.\"\n      Assistant: \"How many articles would you like to find and What field of paper are you looking for?\"\n      User: \"About 3, and they are related to Stable Diffusion.\"\n      Assistant: \"I'll search for 3 articles that most closely related to Stable Diffusion.\"\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT\n  game_id,\n  id,\n  Player,\n  Injury,\n  distance\nFROM\n  injury_accident\nWHERE\n  Injury_embedding MATCH lembed('all-MiniLM-L6-v2', 'Meniscus tear')\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Dialogue:** Create a conversation between the User and the Assistant based on the SQL query and its explanation, ensuring vector operations are properly discussed.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the dialogue naturally covers:\n   - The purpose of the vector search;\n   - How many similar items are needed (LIMIT);\n   - What the target vector represents;\n   - Any additional filtering or sorting requirements.\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Multi-turn dialogue covering vector search details)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Create natural dialogue that explores vector search parameters\n4. Ensure LIMIT, target vector and distance sorting are discussed\n",
    "contains_vector": true
  },
  {
    "db_id": "station_weather",
    "sql": "WITH VectorSearch AS (\n  SELECT s.id AS station_id, s.network_name, distance\n  FROM station s\n  WHERE s.services_embedding MATCH lembed('all-MiniLM-L6-v2', \"London Overground and London Midland\") AND s.k = 5\n  ORDER BY distance\n),\nWeatherAnalysis AS (\n  SELECT ws.station_id, AVG(ws.high_temperature) AS avg_temp\n  FROM weekly_weather ws\n  WHERE ws.precipitation < 0.1 AND ws.wind_speed_mph < 15\n  GROUP BY ws.station_id\n)\nSELECT t.train_number, vs.network_name, wa.avg_temp\nFROM train t\nJOIN route r ON t.id = r.train_id\nJOIN VectorSearch vs ON r.station_id = vs.station_id\nJOIN WeatherAnalysis wa ON vs.station_id = wa.station_id;",
    "complexity": "Highly Complex",
    "column_count": 3,
    "rows": 0,
    "style": "Vague",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Vague Style**\n   - Includes ambiguous vocabulary requiring inference.\n   - Example: What are the names and addresses of those older students? (External Knowledge: 'older students' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with Stable Diffusion. (External Knowledge: 'a few' refers to vector similarity search with k=3 limit)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH VectorSearch AS (\n  SELECT s.id AS station_id, s.network_name, distance\n  FROM station s\n  WHERE s.services_embedding MATCH lembed('all-MiniLM-L6-v2', \"London Overground and London Midland\") AND s.k = 5\n  ORDER BY distance\n),\nWeatherAnalysis AS (\n  SELECT ws.station_id, AVG(ws.high_temperature) AS avg_temp\n  FROM weekly_weather ws\n  WHERE ws.precipitation < 0.1 AND ws.wind_speed_mph < 15\n  GROUP BY ws.station_id\n)\nSELECT t.train_number, vs.network_name, wa.avg_temp\nFROM train t\nJOIN route r ON t.id = r.train_id\nJOIN VectorSearch vs ON r.station_id = vs.station_id\nJOIN WeatherAnalysis wa ON vs.station_id = wa.station_id;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "farm",
    "sql": "SELECT Competition_ID, Theme \nFROM farm_competition \nWHERE Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Country fair with traditional events and activities\") \nLIMIT 1;",
    "complexity": "Simple",
    "column_count": 2,
    "rows": 1,
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT Competition_ID, Theme \nFROM farm_competition \nWHERE Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Country fair with traditional events and activities\") \nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "game_injury",
    "sql": "SELECT id, Player, Injury, Number_of_matches\nFROM injury_accident\nWHERE Injury_embedding MATCH lembed('all-MiniLM-L6-v2', \"Knee surgery recovery\") \nLIMIT 1;",
    "complexity": "Simple",
    "column_count": 4,
    "rows": 1,
    "style": "Metaphorical",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Metaphorical Style**\n   - Uses metaphors or metaphorical expressions.\n   - Example: Find the names and addresses of those who have reached adulthood. (External Knowledge: 'reached adulthood' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with SD in ai. (External Knowledge: 'SD in ai' refers to Stable Diffusion)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT id, Player, Injury, Number_of_matches\nFROM injury_accident\nWHERE Injury_embedding MATCH lembed('all-MiniLM-L6-v2', \"Knee surgery recovery\") \nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "farm",
    "sql": "WITH RankedCompetitions AS (\n    SELECT \n        cr.Competition_ID, \n        cr.Farm_ID\n    FROM \n        competition_record cr\n    JOIN \n        farm f ON cr.Farm_ID = f.Farm_ID\n    WHERE \n        f.Total_Cattle > 100  \n),\nVectorSearch AS (\n    SELECT \n        Competition_ID, \n        Theme,\n        distance\n    FROM \n        farm_competition\n    WHERE \n        Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Agricultural festival\") LIMIT 5  \n)\nSELECT \n    vc.Competition_ID, \n    rc.Farm_ID\nFROM \n    VectorSearch vc\nJOIN \n    RankedCompetitions rc ON vc.Competition_ID = rc.Competition_ID\nORDER BY \n    vc.distance;",
    "complexity": "Complex",
    "column_count": 2,
    "rows": 9,
    "style": "Descriptive",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Descriptive Style**\n   - Uses detailed descriptions with contextual information.\n   - Example: I want to know the names and home addresses of all students older than 18.\n   - Vector Example: I need to find articles that most closely related to Stable Diffusion, returning the top 3 matches sorted by cosine similarity.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH RankedCompetitions AS (\n    SELECT \n        cr.Competition_ID, \n        cr.Farm_ID\n    FROM \n        competition_record cr\n    JOIN \n        farm f ON cr.Farm_ID = f.Farm_ID\n    WHERE \n        f.Total_Cattle > 100  \n),\nVectorSearch AS (\n    SELECT \n        Competition_ID, \n        Theme,\n        distance\n    FROM \n        farm_competition\n    WHERE \n        Theme_embedding MATCH lembed('all-MiniLM-L6-v2', \"Agricultural festival\") LIMIT 5  \n)\nSELECT \n    vc.Competition_ID, \n    rc.Farm_ID\nFROM \n    VectorSearch vc\nJOIN \n    RankedCompetitions rc ON vc.Competition_ID = rc.Competition_ID\nORDER BY \n    vc.distance;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "station_weather",
    "sql": "SELECT t.train_number\nFROM station s\nJOIN route r ON s.id = r.station_id\nJOIN train t ON r.train_id = t.id\nWHERE s.services_embedding MATCH lembed('all-MiniLM-L6-v2', \"London Overground and London Trains\") AND s.k = 5\nAND t.origin = 'London'\nAND (\n    SELECT AVG(w.high_temperature)\n    FROM weekly_weather w\n    WHERE w.station_id = s.id AND w.day_of_week = 'Monday'\n) > 15\nORDER BY t.train_number\nLIMIT 10;",
    "complexity": "Highly Complex",
    "column_count": 1,
    "rows": 0,
    "style": "Formal",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Formal Style**\n   - Uses standard grammar and vocabulary.\n   - Example: Find all students older than 18 years and return their home addresses.\n   - Vector Example: Find the three articles most closely related to Stable Diffusion and return them.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT t.train_number\nFROM station s\nJOIN route r ON s.id = r.station_id\nJOIN train t ON r.train_id = t.id\nWHERE s.services_embedding MATCH lembed('all-MiniLM-L6-v2', \"London Overground and London Trains\") AND s.k = 5\nAND t.origin = 'London'\nAND (\n    SELECT AVG(w.high_temperature)\n    FROM weekly_weather w\n    WHERE w.station_id = s.id AND w.day_of_week = 'Monday'\n) > 15\nORDER BY t.train_number\nLIMIT 10;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "station_weather",
    "sql": "SELECT s.network_name\nFROM station s\nJOIN weekly_weather w ON s.id = w.station_id\nWHERE s.services_embedding MATCH lembed('all-MiniLM-L6-v2', \"London Underground and National Rail\") AND s.k = 5\nAND w.high_temperature > 75\nORDER BY distance;",
    "complexity": "Moderate",
    "column_count": 1,
    "rows": 0,
    "style": "Imperative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Imperative Style**\n   - Uses command or directive sentences.\n   - Example: Could you please gather all the students who are older than 18? I really need to know their names and where they live!\n   - Vector Example: Please find the three articles most closely related to Stable Diffusion and return their name.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT s.network_name\nFROM station s\nJOIN weekly_weather w ON s.id = w.station_id\nWHERE s.services_embedding MATCH lembed('all-MiniLM-L6-v2', \"London Underground and National Rail\") AND s.k = 5\nAND w.high_temperature > 75\nORDER BY distance;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Guiding Principles for High-Quality Vector Questions:**\n\nYour ultimate goal is to create a question that a real human would ask. To do this, you must internalize the following principles:\n\n1.  **Translate Mechanism into Intent (The Golden Rule!)**: A vector search (`MATCH ... LIMIT N`) is a technical mechanism to find the \"top N\" or \"best N\" examples of something. Your question **MUST** reflect the user's *intent*, not the mechanism.\n    * **Prohibited Phrases**: Avoid technical jargon that describes the search process. Do NOT use phrases like: \"most closely related to\", \"semantically similar to\", \"based on similarity\", \"concept of\", \"field of\".\n    * **Approved Phrasing**: Instead, use natural language that implies ranking or quality. Use words like: \"top 5\", \"best\", \"most representative\", \"leading\", or simply state the entity directly. For example, a search for the top 5 professors should be phrased as \"Who are the top 5 professors?\", not \"Who are the 5 professors most similar to the concept of a professor?\".\n\n2.  **Identify and Preserve Key Entities**: Within the `lembed()` text, identify the core keywords (e.g., \"Professor\", \"Computer Science\", \"leadership skills\"). These **MUST** be present in the final question to ensure it is specific and meaningful.\n\n3.  **Rephrase Naturally, Do Not Copy Verbatim**: While preserving key entities, change the overall sentence structure to fit the requested style (Formal, Colloquial, etc.). Do not copy the entire `lembed()` string word-for-word.\n\n---\n**Examples of Correct vs. Incorrect Behavior:**\n\n**Example 1: Being Natural--like a real human would ask**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") AND k = 5 ...`\n* **BAD Question**: `\"Identify five professors whose roles most closely match the concept of teaching computer science at a professorial level...\"` or `\"Please provide the IDs, names, and course levels for the five professors who have positions most closely related to the field of computer science, ordered by similarity.\"`\n    * **Reasoning**: This is the classic mistake. It describes the vector search mechanism (\"most closely related to\") instead of asking a direct, human-like question. Too verbose and abstract. \"concept of teaching computer science at a professorial level\" or \"who have positions most closely related to\" is an unnatural way to say \"Computer Science Professor\".\n* **GOOD Question**: `\"Please provide the IDs and course levels for the 5 professors who specialize in computer science.\"` or `\"Identify five computer science professors and list the levels of the courses they teach.\"`\n    * **Reasoning**: Correctly uses the key entities \"Professor\" and \"Computer Science\" in a formal and direct manner.\n\n**Example 2: Preserving Entities**\n* **Input VecSQL**: `... WHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5 ...`\n* **BAD Question**: `\"Could you please find the top 5 individuals most semantically related to a specialized academic teaching role...\"`\n    * **Reasoning**: Completely fails by losing the essential key entities **\"Professor\"** and **\"Mathematics\"**. The question is now uselessly vague.\n* **GOOD Question**: `\"Get me the top 5 people who are very professional in mathematics, and show me their course levels.\"`\n    * **Reasoning**: Preserves the critical entities in a natural, imperative sentence.\n\n**Example 3: Being Natural**\n* **Input VecSQL**: `... WHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\") LIMIT 1;`\n* **BAD Question**: `\"Hey, could you help me find the employee whose performance is most closely related to being a standout leader?\"`\n    * **Reasoning**: \"most closely related to being...\" is clunky and not like a real human would ask. It also loses the \"exceptional performance\" aspect.\n* **GOOD Question**: `\"Hey, can you find the employee who performance very well and with great leadership ability'? I need their SSN.\"` or `\"Who's our top employee showing both great performance and leadership? Grab their SSN for me.\"`\n    * **Reasoning**: Sounds like a real person talking and naturally incorporates the key concepts.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  }
]