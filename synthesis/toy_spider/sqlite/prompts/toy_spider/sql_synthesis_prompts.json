[{"prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE VIRTUAL TABLE \"Web_client_accelerator\" USING vec0(\n  id INTEGER,\n  name TEXT,\n  Operating_system TEXT,\n  Client TEXT,\n  Connection TEXT,\n  Operating_system_embedding float[384],\n  Client_embedding float[384],\n  Connection_embedding float[384]\n)\n\nCREATE TABLE \"Web_client_accelerator_info\" (key text primary key, value any)\n\nCREATE TABLE \"Web_client_accelerator_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"Web_client_accelerator_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks01\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks02\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext01\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext03\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"browser\" (\n\"id\" int,\n\"name\" text,\n\"market_share\" real,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"accelerator_compatible_browser\" (\n\"accelerator_id\" int,\n\"browser_id\" int,\n\"compatible_since_year\" int,\nprimary key(\"accelerator_id\", \"browser_id\"),\nforeign key (\"accelerator_id\") references `Web_client_accelerator`(\"id\"),\nforeign key (\"browser_id\") references `browser`(\"id\")\n)\n\n### SQL Functions\nYou can use any function supported by the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO Web_client_accelerator(Operating_system) VALUES (\"Appliance (Linux)\");\n\nINSERT INTO Web_client_accelerator(Client) VALUES (\"End user, ISP\");\n\nINSERT INTO Web_client_accelerator(Operating_system) VALUES (\"Windows\");\n\nINSERT INTO Web_client_accelerator(Connection) VALUES (\"up to 756kbit/s\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Simple level, defined as follows:\n**Criteria:** Basic vector similarity search on a single table.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 2 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n", "db_id": "browser_web"},
{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE VIRTUAL TABLE \"Web_client_accelerator\" USING vec0(\n  id INTEGER,\n  name TEXT,\n  Operating_system TEXT,\n  Client TEXT,\n  Connection TEXT,\n  Operating_system_embedding float[384],\n  Client_embedding float[384],\n  Connection_embedding float[384]\n)\n\nCREATE TABLE \"Web_client_accelerator_info\" (key text primary key, value any)\n\nCREATE TABLE \"Web_client_accelerator_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"Web_client_accelerator_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks01\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks02\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext01\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext03\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"browser\" (\n\"id\" int,\n\"name\" text,\n\"market_share\" real,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"accelerator_compatible_browser\" (\n\"accelerator_id\" int,\n\"browser_id\" int,\n\"compatible_since_year\" int,\nprimary key(\"accelerator_id\", \"browser_id\"),\nforeign key (\"accelerator_id\") references `Web_client_accelerator`(\"id\"),\nforeign key (\"browser_id\") references `browser`(\"id\")\n)\n\n### SQL Functions\nYou may consider one or more of the following SQL functions while generating the query:\nFunction 1:\nCONCAT(X,...) \nDescription: The CONCAT(...) function returns a string which is the concatenation of the string representation of all of its non-NULL arguments. If all arguments are NULL, then CONCAT() returns an empty string.\n\nImportant tips:\nExcept for the functions listed above, you may use any other functions as long as they conform to the syntax of the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO Web_client_accelerator(Connection) VALUES (\"up to 756kbit/s\");\n\nINSERT INTO Web_client_accelerator(Connection) VALUES (\"Broadband, Satellite, Wireless, Fiber, DSL\");\n\nINSERT INTO Web_client_accelerator(Operating_system) VALUES (\"Appliance (Linux)\");\n\nINSERT INTO Web_client_accelerator(Client) VALUES (\"End user, ISP\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Simple level, defined as follows:\n**Criteria:** Basic vector similarity search on a single table.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 3 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "browser_web"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE VIRTUAL TABLE \"Web_client_accelerator\" USING vec0(\n  id INTEGER,\n  name TEXT,\n  Operating_system TEXT,\n  Client TEXT,\n  Connection TEXT,\n  Operating_system_embedding float[384],\n  Client_embedding float[384],\n  Connection_embedding float[384]\n)\n\nCREATE TABLE \"Web_client_accelerator_info\" (key text primary key, value any)\n\nCREATE TABLE \"Web_client_accelerator_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"Web_client_accelerator_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks01\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks02\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext01\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext03\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"browser\" (\n\"id\" int,\n\"name\" text,\n\"market_share\" real,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"accelerator_compatible_browser\" (\n\"accelerator_id\" int,\n\"browser_id\" int,\n\"compatible_since_year\" int,\nprimary key(\"accelerator_id\", \"browser_id\"),\nforeign key (\"accelerator_id\") references `Web_client_accelerator`(\"id\"),\nforeign key (\"browser_id\") references `browser`(\"id\")\n)\n\n### SQL Functions\nYou may consider one or more of the following SQL functions while generating the query:\nFunction 1:\nCOALESCE(X,Y,...) \nDescription: The COALESCE() function returns a copy of its first non-NULL argument, or NULL if all arguments are NULL. Coalesce() must have at least 2 arguments.\nFunction 2:\nCEIL(X) or CEILING(X) \nDescription: Return the first representable integer value greater than or equal to X. For positive values of X, this routine rounds away from zero. For negative values of X, this routine rounds toward zero.\n\nImportant tips:\nExcept for the functions listed above, you may use any other functions as long as they conform to the syntax of the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO Web_client_accelerator(Operating_system) VALUES (\"Appliance (Linux)\");\n\nINSERT INTO Web_client_accelerator(Operating_system) VALUES (\"Windows\");\n\nINSERT INTO Web_client_accelerator(Connection) VALUES (\"Broadband, Satellite, Wireless, Fiber, DSL\");\n\nINSERT INTO Web_client_accelerator(Client) VALUES (\"End user, ISP\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Simple level, defined as follows:\n**Criteria:** Basic vector similarity search on a single table.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 2 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "browser_web"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE VIRTUAL TABLE \"Web_client_accelerator\" USING vec0(\n  id INTEGER,\n  name TEXT,\n  Operating_system TEXT,\n  Client TEXT,\n  Connection TEXT,\n  Operating_system_embedding float[384],\n  Client_embedding float[384],\n  Connection_embedding float[384]\n)\n\nCREATE TABLE \"Web_client_accelerator_info\" (key text primary key, value any)\n\nCREATE TABLE \"Web_client_accelerator_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"Web_client_accelerator_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks01\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks02\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext01\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext03\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"browser\" (\n\"id\" int,\n\"name\" text,\n\"market_share\" real,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"accelerator_compatible_browser\" (\n\"accelerator_id\" int,\n\"browser_id\" int,\n\"compatible_since_year\" int,\nprimary key(\"accelerator_id\", \"browser_id\"),\nforeign key (\"accelerator_id\") references `Web_client_accelerator`(\"id\"),\nforeign key (\"browser_id\") references `browser`(\"id\")\n)\n\n### SQL Functions\nYou may consider one or more of the following SQL functions while generating the query:\nFunction 1:\nEXP(X) \nDescription: Computee(Euler's number, approximately 2.71828182845905) raised to the power X.\n\nImportant tips:\nExcept for the functions listed above, you may use any other functions as long as they conform to the syntax of the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO Web_client_accelerator(Connection) VALUES (\"up to 756kbit/s\");\n\nINSERT INTO Web_client_accelerator(Connection) VALUES (\"Broadband, Satellite, Wireless, Fiber, DSL\");\n\nINSERT INTO Web_client_accelerator(Client) VALUES (\"user\");\n\nINSERT INTO Web_client_accelerator(Operating_system) VALUES (\"Appliance (Linux)\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Moderate level, defined as follows:\n**Criteria:** Vector search + simple joins / filters.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 1 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "browser_web"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE VIRTUAL TABLE \"Web_client_accelerator\" USING vec0(\n  id INTEGER,\n  name TEXT,\n  Operating_system TEXT,\n  Client TEXT,\n  Connection TEXT,\n  Operating_system_embedding float[384],\n  Client_embedding float[384],\n  Connection_embedding float[384]\n)\n\nCREATE TABLE \"Web_client_accelerator_info\" (key text primary key, value any)\n\nCREATE TABLE \"Web_client_accelerator_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"Web_client_accelerator_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks01\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks02\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext01\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext03\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"browser\" (\n\"id\" int,\n\"name\" text,\n\"market_share\" real,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"accelerator_compatible_browser\" (\n\"accelerator_id\" int,\n\"browser_id\" int,\n\"compatible_since_year\" int,\nprimary key(\"accelerator_id\", \"browser_id\"),\nforeign key (\"accelerator_id\") references `Web_client_accelerator`(\"id\"),\nforeign key (\"browser_id\") references `browser`(\"id\")\n)\n\n### SQL Functions\nYou may consider one or more of the following SQL functions while generating the query:\nFunction 1:\nLTRIM(X) or LTRIM(X,Y) \nDescription: The LTRIM(X,Y) function returns a string formed by removing any and all characters that appear in Y from the left side of X. If the Y argument is omitted, LTRIM(X) removes spaces from the left side of X.\n\nImportant tips:\nExcept for the functions listed above, you may use any other functions as long as they conform to the syntax of the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO Web_client_accelerator(Operating_system) VALUES (\"Appliance (Linux)\");\n\nINSERT INTO Web_client_accelerator(Operating_system) VALUES (\"Windows\");\n\nINSERT INTO Web_client_accelerator(Client) VALUES (\"user\");\n\nINSERT INTO Web_client_accelerator(Connection) VALUES (\"Broadband, Satellite, Wireless, Fiber, DSL\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Complex level, defined as follows:\n**Criteria:** Vector search combined with CTEs / hybird search.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 1 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "browser_web"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE VIRTUAL TABLE \"Web_client_accelerator\" USING vec0(\n  id INTEGER,\n  name TEXT,\n  Operating_system TEXT,\n  Client TEXT,\n  Connection TEXT,\n  Operating_system_embedding float[384],\n  Client_embedding float[384],\n  Connection_embedding float[384]\n)\n\nCREATE TABLE \"Web_client_accelerator_info\" (key text primary key, value any)\n\nCREATE TABLE \"Web_client_accelerator_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"Web_client_accelerator_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks01\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks02\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext01\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext03\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"browser\" (\n\"id\" int,\n\"name\" text,\n\"market_share\" real,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"accelerator_compatible_browser\" (\n\"accelerator_id\" int,\n\"browser_id\" int,\n\"compatible_since_year\" int,\nprimary key(\"accelerator_id\", \"browser_id\"),\nforeign key (\"accelerator_id\") references `Web_client_accelerator`(\"id\"),\nforeign key (\"browser_id\") references `browser`(\"id\")\n)\n\n### SQL Functions\nYou can use any function supported by the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO Web_client_accelerator(Client) VALUES (\"End user, ISP\");\n\nINSERT INTO Web_client_accelerator(Operating_system) VALUES (\"Appliance (Linux)\");\n\nINSERT INTO Web_client_accelerator(Connection) VALUES (\"Broadband, Satellite, Wireless, Fiber, DSL\");\n\nINSERT INTO Web_client_accelerator(Operating_system) VALUES (\"Windows\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Moderate level, defined as follows:\n**Criteria:** Vector search + simple joins / filters.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 1 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "browser_web"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE VIRTUAL TABLE \"Web_client_accelerator\" USING vec0(\n  id INTEGER,\n  name TEXT,\n  Operating_system TEXT,\n  Client TEXT,\n  Connection TEXT,\n  Operating_system_embedding float[384],\n  Client_embedding float[384],\n  Connection_embedding float[384]\n)\n\nCREATE TABLE \"Web_client_accelerator_info\" (key text primary key, value any)\n\nCREATE TABLE \"Web_client_accelerator_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"Web_client_accelerator_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks01\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks02\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext01\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext03\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"browser\" (\n\"id\" int,\n\"name\" text,\n\"market_share\" real,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"accelerator_compatible_browser\" (\n\"accelerator_id\" int,\n\"browser_id\" int,\n\"compatible_since_year\" int,\nprimary key(\"accelerator_id\", \"browser_id\"),\nforeign key (\"accelerator_id\") references `Web_client_accelerator`(\"id\"),\nforeign key (\"browser_id\") references `browser`(\"id\")\n)\n\n### SQL Functions\nYou may consider one or more of the following SQL functions while generating the query:\nFunction 1:\nNTILE(N) \nDescription: ArgumentNis handled as an integer. This function divides the partition into N groups as evenly as possible and assigns an integer between 1 andNto each group, in the order defined by the ORDER BY clause, or in arbitrary order otherwise. If necessary, larger groups occur first. This function returns the integer value assigned to the group that the current row is a part of.\nFunction 2:\nATAN(X) \nDescription: Return the arctangent of X. The result is in radians.\n\nImportant tips:\nExcept for the functions listed above, you may use any other functions as long as they conform to the syntax of the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO Web_client_accelerator(Client) VALUES (\"End user, ISP\");\n\nINSERT INTO Web_client_accelerator(Connection) VALUES (\"Broadband, Satellite, Wireless, Fiber, DSL\");\n\nINSERT INTO Web_client_accelerator(Connection) VALUES (\"up to 756kbit/s\");\n\nINSERT INTO Web_client_accelerator(Operating_system) VALUES (\"Appliance (Linux)\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Complex level, defined as follows:\n**Criteria:** Vector search combined with CTEs / hybird search.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 1 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "browser_web"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE VIRTUAL TABLE \"Web_client_accelerator\" USING vec0(\n  id INTEGER,\n  name TEXT,\n  Operating_system TEXT,\n  Client TEXT,\n  Connection TEXT,\n  Operating_system_embedding float[384],\n  Client_embedding float[384],\n  Connection_embedding float[384]\n)\n\nCREATE TABLE \"Web_client_accelerator_info\" (key text primary key, value any)\n\nCREATE TABLE \"Web_client_accelerator_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"Web_client_accelerator_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks01\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks02\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext01\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext03\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"browser\" (\n\"id\" int,\n\"name\" text,\n\"market_share\" real,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"accelerator_compatible_browser\" (\n\"accelerator_id\" int,\n\"browser_id\" int,\n\"compatible_since_year\" int,\nprimary key(\"accelerator_id\", \"browser_id\"),\nforeign key (\"accelerator_id\") references `Web_client_accelerator`(\"id\"),\nforeign key (\"browser_id\") references `browser`(\"id\")\n)\n\n### SQL Functions\nYou may consider one or more of the following SQL functions while generating the query:\nFunction 1:\nZEROBLOB(N) \nDescription: The ZEROBLOB(N) function returns a BLOB consisting of N bytes of 0x00. SQLite manages these zeroblobs very efficiently. Zeroblobs can be used to reserve space for a BLOB that is later written usingincremental BLOB I/O. This SQL function is implemented using thesqlite3_result_zeroblob()routine from the C/C++ interface.\nFunction 2:\nCOSH(X) \nDescription: Return the hyperbolic cosine of X.\n\nImportant tips:\nExcept for the functions listed above, you may use any other functions as long as they conform to the syntax of the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO Web_client_accelerator(Client) VALUES (\"user\");\n\nINSERT INTO Web_client_accelerator(Operating_system) VALUES (\"Appliance (Linux)\");\n\nINSERT INTO Web_client_accelerator(Client) VALUES (\"End user, ISP\");\n\nINSERT INTO Web_client_accelerator(Connection) VALUES (\"up to 756kbit/s\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Simple level, defined as follows:\n**Criteria:** Basic vector similarity search on a single table.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 1 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "browser_web"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE VIRTUAL TABLE \"Web_client_accelerator\" USING vec0(\n  id INTEGER,\n  name TEXT,\n  Operating_system TEXT,\n  Client TEXT,\n  Connection TEXT,\n  Operating_system_embedding float[384],\n  Client_embedding float[384],\n  Connection_embedding float[384]\n)\n\nCREATE TABLE \"Web_client_accelerator_info\" (key text primary key, value any)\n\nCREATE TABLE \"Web_client_accelerator_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"Web_client_accelerator_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks01\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks02\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext01\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext03\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"browser\" (\n\"id\" int,\n\"name\" text,\n\"market_share\" real,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"accelerator_compatible_browser\" (\n\"accelerator_id\" int,\n\"browser_id\" int,\n\"compatible_since_year\" int,\nprimary key(\"accelerator_id\", \"browser_id\"),\nforeign key (\"accelerator_id\") references `Web_client_accelerator`(\"id\"),\nforeign key (\"browser_id\") references `browser`(\"id\")\n)\n\n### SQL Functions\nYou can use any function supported by the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO Web_client_accelerator(Connection) VALUES (\"up to 756kbit/s\");\n\nINSERT INTO Web_client_accelerator(Operating_system) VALUES (\"Appliance (Linux)\");\n\nINSERT INTO Web_client_accelerator(Connection) VALUES (\"Broadband, Satellite, Wireless, Fiber, DSL\");\n\nINSERT INTO Web_client_accelerator(Client) VALUES (\"End user, ISP\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Moderate level, defined as follows:\n**Criteria:** Vector search + simple joins / filters.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 1 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "browser_web"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE VIRTUAL TABLE \"Web_client_accelerator\" USING vec0(\n  id INTEGER,\n  name TEXT,\n  Operating_system TEXT,\n  Client TEXT,\n  Connection TEXT,\n  Operating_system_embedding float[384],\n  Client_embedding float[384],\n  Connection_embedding float[384]\n)\n\nCREATE TABLE \"Web_client_accelerator_info\" (key text primary key, value any)\n\nCREATE TABLE \"Web_client_accelerator_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"Web_client_accelerator_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks01\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks02\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext01\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext03\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"browser\" (\n\"id\" int,\n\"name\" text,\n\"market_share\" real,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"accelerator_compatible_browser\" (\n\"accelerator_id\" int,\n\"browser_id\" int,\n\"compatible_since_year\" int,\nprimary key(\"accelerator_id\", \"browser_id\"),\nforeign key (\"accelerator_id\") references `Web_client_accelerator`(\"id\"),\nforeign key (\"browser_id\") references `browser`(\"id\")\n)\n\n### SQL Functions\nYou may consider one or more of the following SQL functions while generating the query:\nFunction 1:\nNTILE(N) \nDescription: ArgumentNis handled as an integer. This function divides the partition into N groups as evenly as possible and assigns an integer between 1 andNto each group, in the order defined by the ORDER BY clause, or in arbitrary order otherwise. If necessary, larger groups occur first. This function returns the integer value assigned to the group that the current row is a part of.\n\nImportant tips:\nExcept for the functions listed above, you may use any other functions as long as they conform to the syntax of the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO Web_client_accelerator(Operating_system) VALUES (\"Appliance (Linux)\");\n\nINSERT INTO Web_client_accelerator(Operating_system) VALUES (\"Windows\");\n\nINSERT INTO Web_client_accelerator(Connection) VALUES (\"up to 756kbit/s\");\n\nINSERT INTO Web_client_accelerator(Connection) VALUES (\"Broadband, Satellite, Wireless, Fiber, DSL\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Complex level, defined as follows:\n**Criteria:** Vector search combined with CTEs / hybird search.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 2 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "browser_web"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE VIRTUAL TABLE \"Web_client_accelerator\" USING vec0(\n  id INTEGER,\n  name TEXT,\n  Operating_system TEXT,\n  Client TEXT,\n  Connection TEXT,\n  Operating_system_embedding float[384],\n  Client_embedding float[384],\n  Connection_embedding float[384]\n)\n\nCREATE TABLE \"Web_client_accelerator_info\" (key text primary key, value any)\n\nCREATE TABLE \"Web_client_accelerator_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"Web_client_accelerator_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks01\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks02\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext01\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext03\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"browser\" (\n\"id\" int,\n\"name\" text,\n\"market_share\" real,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"accelerator_compatible_browser\" (\n\"accelerator_id\" int,\n\"browser_id\" int,\n\"compatible_since_year\" int,\nprimary key(\"accelerator_id\", \"browser_id\"),\nforeign key (\"accelerator_id\") references `Web_client_accelerator`(\"id\"),\nforeign key (\"browser_id\") references `browser`(\"id\")\n)\n\n### SQL Functions\nYou may consider one or more of the following SQL functions while generating the query:\nFunction 1:\nSQLITE_COMPILEOPTION_USED(X) \nDescription: The SQLITE_COMPILEOPTION_USED() SQL function is a wrapper around thesqlite3_compileoption_used()C/C++ function. When the argument X to SQLITE_COMPILEOPTION_USED(X) is a string which is the name of a compile-time option, this routine returns true (1) or false (0) depending on whether or not that option was used during the build.\nFunction 2:\nTRUNC(X) \nDescription: Return the representable integer in between X and 0 (inclusive) that is furthest away from zero. Or, in other words, return the integer part of X, rounding toward zero. The TRUNC() function is similar toceiling(X)andfloor(X)except that it always rounds toward zero whereas ceiling(X) and floor(X) round up and down, respectively.\n\nImportant tips:\nExcept for the functions listed above, you may use any other functions as long as they conform to the syntax of the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO Web_client_accelerator(Operating_system) VALUES (\"Windows\");\n\nINSERT INTO Web_client_accelerator(Client) VALUES (\"End user, ISP\");\n\nINSERT INTO Web_client_accelerator(Connection) VALUES (\"Broadband, Satellite, Wireless, Fiber, DSL\");\n\nINSERT INTO Web_client_accelerator(Operating_system) VALUES (\"Appliance (Linux)\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Complex level, defined as follows:\n**Criteria:** Vector search combined with CTEs / hybird search.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 1 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "browser_web"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE VIRTUAL TABLE \"Web_client_accelerator\" USING vec0(\n  id INTEGER,\n  name TEXT,\n  Operating_system TEXT,\n  Client TEXT,\n  Connection TEXT,\n  Operating_system_embedding float[384],\n  Client_embedding float[384],\n  Connection_embedding float[384]\n)\n\nCREATE TABLE \"Web_client_accelerator_info\" (key text primary key, value any)\n\nCREATE TABLE \"Web_client_accelerator_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"Web_client_accelerator_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks01\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks02\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext01\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext03\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"browser\" (\n\"id\" int,\n\"name\" text,\n\"market_share\" real,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"accelerator_compatible_browser\" (\n\"accelerator_id\" int,\n\"browser_id\" int,\n\"compatible_since_year\" int,\nprimary key(\"accelerator_id\", \"browser_id\"),\nforeign key (\"accelerator_id\") references `Web_client_accelerator`(\"id\"),\nforeign key (\"browser_id\") references `browser`(\"id\")\n)\n\n### SQL Functions\nYou may consider one or more of the following SQL functions while generating the query:\nFunction 1:\nCOUNT(X) or COUNT(*) \nDescription: The COUNT(X) function returns a count of the number of times thatXis not NULL in a group. The COUNT(*) function (with no arguments) returns the total number of rows in the group.\n\nImportant tips:\nExcept for the functions listed above, you may use any other functions as long as they conform to the syntax of the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO Web_client_accelerator(Connection) VALUES (\"Broadband, Satellite, Wireless, Fiber, DSL\");\n\nINSERT INTO Web_client_accelerator(Operating_system) VALUES (\"Windows\");\n\nINSERT INTO Web_client_accelerator(Connection) VALUES (\"up to 756kbit/s\");\n\nINSERT INTO Web_client_accelerator(Operating_system) VALUES (\"Appliance (Linux)\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Simple level, defined as follows:\n**Criteria:** Basic vector similarity search on a single table.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 1 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "browser_web"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE VIRTUAL TABLE \"Web_client_accelerator\" USING vec0(\n  id INTEGER,\n  name TEXT,\n  Operating_system TEXT,\n  Client TEXT,\n  Connection TEXT,\n  Operating_system_embedding float[384],\n  Client_embedding float[384],\n  Connection_embedding float[384]\n)\n\nCREATE TABLE \"Web_client_accelerator_info\" (key text primary key, value any)\n\nCREATE TABLE \"Web_client_accelerator_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"Web_client_accelerator_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks01\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks02\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext01\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext03\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"browser\" (\n\"id\" int,\n\"name\" text,\n\"market_share\" real,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"accelerator_compatible_browser\" (\n\"accelerator_id\" int,\n\"browser_id\" int,\n\"compatible_since_year\" int,\nprimary key(\"accelerator_id\", \"browser_id\"),\nforeign key (\"accelerator_id\") references `Web_client_accelerator`(\"id\"),\nforeign key (\"browser_id\") references `browser`(\"id\")\n)\n\n### SQL Functions\nYou may consider one or more of the following SQL functions while generating the query:\nFunction 1:\nGLOB(X,Y) \nDescription: The GLOB(X,Y) function is equivalent to the expression \"Y GLOB X\". Note that the X and Y arguments are reversed in the GLOB() function relative to the infixGLOBoperator. Y is the string and X is the pattern. So, for example, the following expressions are equivalent:name GLOB '*helium*' GLOB('*helium*',name)If thesqlite3_create_function()interface is used to override the GLOB(X,Y) function with an alternative implementation then theGLOBoperator will invoke the alternative implementation.\n\nImportant tips:\nExcept for the functions listed above, you may use any other functions as long as they conform to the syntax of the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO Web_client_accelerator(Connection) VALUES (\"up to 756kbit/s\");\n\nINSERT INTO Web_client_accelerator(Connection) VALUES (\"Broadband, Satellite, Wireless, Fiber, DSL\");\n\nINSERT INTO Web_client_accelerator(Operating_system) VALUES (\"Windows\");\n\nINSERT INTO Web_client_accelerator(Client) VALUES (\"End user, ISP\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Complex level, defined as follows:\n**Criteria:** Vector search combined with CTEs / hybird search.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 2 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "browser_web"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE VIRTUAL TABLE \"Web_client_accelerator\" USING vec0(\n  id INTEGER,\n  name TEXT,\n  Operating_system TEXT,\n  Client TEXT,\n  Connection TEXT,\n  Operating_system_embedding float[384],\n  Client_embedding float[384],\n  Connection_embedding float[384]\n)\n\nCREATE TABLE \"Web_client_accelerator_info\" (key text primary key, value any)\n\nCREATE TABLE \"Web_client_accelerator_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"Web_client_accelerator_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks01\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks02\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext01\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext03\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"browser\" (\n\"id\" int,\n\"name\" text,\n\"market_share\" real,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"accelerator_compatible_browser\" (\n\"accelerator_id\" int,\n\"browser_id\" int,\n\"compatible_since_year\" int,\nprimary key(\"accelerator_id\", \"browser_id\"),\nforeign key (\"accelerator_id\") references `Web_client_accelerator`(\"id\"),\nforeign key (\"browser_id\") references `browser`(\"id\")\n)\n\n### SQL Functions\nYou can use any function supported by the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO Web_client_accelerator(Operating_system) VALUES (\"Appliance (Linux)\");\n\nINSERT INTO Web_client_accelerator(Client) VALUES (\"End user, ISP\");\n\nINSERT INTO Web_client_accelerator(Client) VALUES (\"user\");\n\nINSERT INTO Web_client_accelerator(Operating_system) VALUES (\"Windows\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Moderate level, defined as follows:\n**Criteria:** Vector search + simple joins / filters.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 2 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "browser_web"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE VIRTUAL TABLE \"Web_client_accelerator\" USING vec0(\n  id INTEGER,\n  name TEXT,\n  Operating_system TEXT,\n  Client TEXT,\n  Connection TEXT,\n  Operating_system_embedding float[384],\n  Client_embedding float[384],\n  Connection_embedding float[384]\n)\n\nCREATE TABLE \"Web_client_accelerator_info\" (key text primary key, value any)\n\nCREATE TABLE \"Web_client_accelerator_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"Web_client_accelerator_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks01\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks02\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext01\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext03\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"browser\" (\n\"id\" int,\n\"name\" text,\n\"market_share\" real,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"accelerator_compatible_browser\" (\n\"accelerator_id\" int,\n\"browser_id\" int,\n\"compatible_since_year\" int,\nprimary key(\"accelerator_id\", \"browser_id\"),\nforeign key (\"accelerator_id\") references `Web_client_accelerator`(\"id\"),\nforeign key (\"browser_id\") references `browser`(\"id\")\n)\n\n### SQL Functions\nYou may consider one or more of the following SQL functions while generating the query:\nFunction 1:\nMAX(X) \nDescription: The MAX() aggregate function returns the maximum value of all values in the group. The maximum value is the value that would be returned last in an ORDER BY on the same column. Aggregate MAX() returns NULL if and only if there are no non-NULL values in the group.\n\nImportant tips:\nExcept for the functions listed above, you may use any other functions as long as they conform to the syntax of the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO Web_client_accelerator(Connection) VALUES (\"Broadband, Satellite, Wireless, Fiber, DSL\");\n\nINSERT INTO Web_client_accelerator(Client) VALUES (\"End user, ISP\");\n\nINSERT INTO Web_client_accelerator(Operating_system) VALUES (\"Windows\");\n\nINSERT INTO Web_client_accelerator(Connection) VALUES (\"up to 756kbit/s\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Moderate level, defined as follows:\n**Criteria:** Vector search + simple joins / filters.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 1 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "browser_web"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE VIRTUAL TABLE \"Web_client_accelerator\" USING vec0(\n  id INTEGER,\n  name TEXT,\n  Operating_system TEXT,\n  Client TEXT,\n  Connection TEXT,\n  Operating_system_embedding float[384],\n  Client_embedding float[384],\n  Connection_embedding float[384]\n)\n\nCREATE TABLE \"Web_client_accelerator_info\" (key text primary key, value any)\n\nCREATE TABLE \"Web_client_accelerator_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"Web_client_accelerator_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks01\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks02\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext01\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext03\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"browser\" (\n\"id\" int,\n\"name\" text,\n\"market_share\" real,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"accelerator_compatible_browser\" (\n\"accelerator_id\" int,\n\"browser_id\" int,\n\"compatible_since_year\" int,\nprimary key(\"accelerator_id\", \"browser_id\"),\nforeign key (\"accelerator_id\") references `Web_client_accelerator`(\"id\"),\nforeign key (\"browser_id\") references `browser`(\"id\")\n)\n\n### SQL Functions\nYou may consider one or more of the following SQL functions while generating the query:\nFunction 1:\nCEIL(X) or CEILING(X) \nDescription: Return the first representable integer value greater than or equal to X. For positive values of X, this routine rounds away from zero. For negative values of X, this routine rounds toward zero.\nFunction 2:\nATAN(X) \nDescription: Return the arctangent of X. The result is in radians.\n\nImportant tips:\nExcept for the functions listed above, you may use any other functions as long as they conform to the syntax of the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO Web_client_accelerator(Operating_system) VALUES (\"Windows\");\n\nINSERT INTO Web_client_accelerator(Client) VALUES (\"End user, ISP\");\n\nINSERT INTO Web_client_accelerator(Connection) VALUES (\"up to 756kbit/s\");\n\nINSERT INTO Web_client_accelerator(Operating_system) VALUES (\"Appliance (Linux)\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Highly Complex level, defined as follows:\n**Criteria:** Multi-stage or recursive vector search with advanced analytics.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 2 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "browser_web"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE VIRTUAL TABLE \"Web_client_accelerator\" USING vec0(\n  id INTEGER,\n  name TEXT,\n  Operating_system TEXT,\n  Client TEXT,\n  Connection TEXT,\n  Operating_system_embedding float[384],\n  Client_embedding float[384],\n  Connection_embedding float[384]\n)\n\nCREATE TABLE \"Web_client_accelerator_info\" (key text primary key, value any)\n\nCREATE TABLE \"Web_client_accelerator_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"Web_client_accelerator_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks01\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks02\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext01\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext03\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"browser\" (\n\"id\" int,\n\"name\" text,\n\"market_share\" real,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"accelerator_compatible_browser\" (\n\"accelerator_id\" int,\n\"browser_id\" int,\n\"compatible_since_year\" int,\nprimary key(\"accelerator_id\", \"browser_id\"),\nforeign key (\"accelerator_id\") references `Web_client_accelerator`(\"id\"),\nforeign key (\"browser_id\") references `browser`(\"id\")\n)\n\n### SQL Functions\nYou may consider one or more of the following SQL functions while generating the query:\nFunction 1:\nZEROBLOB(N) \nDescription: The ZEROBLOB(N) function returns a BLOB consisting of N bytes of 0x00. SQLite manages these zeroblobs very efficiently. Zeroblobs can be used to reserve space for a BLOB that is later written usingincremental BLOB I/O. This SQL function is implemented using thesqlite3_result_zeroblob()routine from the C/C++ interface.\n\nImportant tips:\nExcept for the functions listed above, you may use any other functions as long as they conform to the syntax of the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO Web_client_accelerator(Connection) VALUES (\"up to 756kbit/s\");\n\nINSERT INTO Web_client_accelerator(Connection) VALUES (\"Broadband, Satellite, Wireless, Fiber, DSL\");\n\nINSERT INTO Web_client_accelerator(Client) VALUES (\"user\");\n\nINSERT INTO Web_client_accelerator(Client) VALUES (\"End user, ISP\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Complex level, defined as follows:\n**Criteria:** Vector search combined with CTEs / hybird search.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 2 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "browser_web"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE VIRTUAL TABLE \"Web_client_accelerator\" USING vec0(\n  id INTEGER,\n  name TEXT,\n  Operating_system TEXT,\n  Client TEXT,\n  Connection TEXT,\n  Operating_system_embedding float[384],\n  Client_embedding float[384],\n  Connection_embedding float[384]\n)\n\nCREATE TABLE \"Web_client_accelerator_info\" (key text primary key, value any)\n\nCREATE TABLE \"Web_client_accelerator_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"Web_client_accelerator_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks01\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_vector_chunks02\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext01\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext03\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"Web_client_accelerator_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"Web_client_accelerator_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"browser\" (\n\"id\" int,\n\"name\" text,\n\"market_share\" real,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"accelerator_compatible_browser\" (\n\"accelerator_id\" int,\n\"browser_id\" int,\n\"compatible_since_year\" int,\nprimary key(\"accelerator_id\", \"browser_id\"),\nforeign key (\"accelerator_id\") references `Web_client_accelerator`(\"id\"),\nforeign key (\"browser_id\") references `browser`(\"id\")\n)\n\n### SQL Functions\nYou can use any function supported by the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO Web_client_accelerator(Operating_system) VALUES (\"Windows\");\n\nINSERT INTO Web_client_accelerator(Connection) VALUES (\"Broadband, Satellite, Wireless, Fiber, DSL\");\n\nINSERT INTO Web_client_accelerator(Client) VALUES (\"user\");\n\nINSERT INTO Web_client_accelerator(Operating_system) VALUES (\"Appliance (Linux)\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Moderate level, defined as follows:\n**Criteria:** Vector search + simple joins / filters.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 1 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "browser_web"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n)\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n)\n\nCREATE VIRTUAL TABLE \"farm_competition\" USING vec0(\n  Competition_ID INTEGER,\n  Year INTEGER,\n  Theme TEXT,\n  Host_city_ID INTEGER,\n  Hosts TEXT,\n  Theme_embedding float[384],\n  Hosts_embedding float[384]\n)\n\nCREATE TABLE \"farm_competition_info\" (key text primary key, value any)\n\nCREATE TABLE \"farm_competition_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"farm_competition_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"farm_competition_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_vector_chunks01\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"farm_competition_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n)\n\n### SQL Functions\nYou can use any function supported by the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO farm_competition(Theme) VALUES (\"Carnival M is back!\");\n\nINSERT INTO farm_competition(Theme) VALUES (\"Codehunters\");\n\nINSERT INTO farm_competition(Hosts) VALUES (\"Miley Cyrus Jared Leto and Karen Mok\");\n\nINSERT INTO farm_competition(Hosts) VALUES (\"Leehom Wang and Kelly Rowland\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Simple level, defined as follows:\n**Criteria:** Basic vector similarity search on a single table.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 2 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "farm"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n)\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n)\n\nCREATE VIRTUAL TABLE \"farm_competition\" USING vec0(\n  Competition_ID INTEGER,\n  Year INTEGER,\n  Theme TEXT,\n  Host_city_ID INTEGER,\n  Hosts TEXT,\n  Theme_embedding float[384],\n  Hosts_embedding float[384]\n)\n\nCREATE TABLE \"farm_competition_info\" (key text primary key, value any)\n\nCREATE TABLE \"farm_competition_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"farm_competition_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"farm_competition_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_vector_chunks01\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"farm_competition_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n)\n\n### SQL Functions\nYou may consider one or more of the following SQL functions while generating the query:\nFunction 1:\nRANK() \nDescription: The row_number() of the first peer in each group - the rank of the current row with gaps. If there is no ORDER BY clause, then all rows are considered peers and this function always returns 1.\nFunction 2:\nFLOOR(X) \nDescription: Return the first representable integer value less than or equal to X. For positive numbers, this function rounds toward zero. For negative numbers, this function rounds away from zero.\n\nImportant tips:\nExcept for the functions listed above, you may use any other functions as long as they conform to the syntax of the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO farm_competition(Theme) VALUES (\"Carnival M is back!\");\n\nINSERT INTO farm_competition(Theme) VALUES (\"Codehunters\");\n\nINSERT INTO farm_competition(Hosts) VALUES (\"Miley Cyrus Jared Leto and Karen Mok\");\n\nINSERT INTO farm_competition(Hosts) VALUES (\"Leehom Wang and Kelly Rowland\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Moderate level, defined as follows:\n**Criteria:** Vector search + simple joins / filters.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 1 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "farm"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n)\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n)\n\nCREATE VIRTUAL TABLE \"farm_competition\" USING vec0(\n  Competition_ID INTEGER,\n  Year INTEGER,\n  Theme TEXT,\n  Host_city_ID INTEGER,\n  Hosts TEXT,\n  Theme_embedding float[384],\n  Hosts_embedding float[384]\n)\n\nCREATE TABLE \"farm_competition_info\" (key text primary key, value any)\n\nCREATE TABLE \"farm_competition_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"farm_competition_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"farm_competition_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_vector_chunks01\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"farm_competition_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n)\n\n### SQL Functions\nYou may consider one or more of the following SQL functions while generating the query:\nFunction 1:\nCOUNT(X) or COUNT(*) \nDescription: The COUNT(X) function returns a count of the number of times thatXis not NULL in a group. The COUNT(*) function (with no arguments) returns the total number of rows in the group.\n\nImportant tips:\nExcept for the functions listed above, you may use any other functions as long as they conform to the syntax of the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO farm_competition(Theme) VALUES (\"Carnival M is back!\");\n\nINSERT INTO farm_competition(Theme) VALUES (\"Codehunters\");\n\nINSERT INTO farm_competition(Hosts) VALUES (\"Miley Cyrus Jared Leto and Karen Mok\");\n\nINSERT INTO farm_competition(Hosts) VALUES (\"Leehom Wang and Kelly Rowland\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Simple level, defined as follows:\n**Criteria:** Basic vector similarity search on a single table.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 2 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "farm"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n)\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n)\n\nCREATE VIRTUAL TABLE \"farm_competition\" USING vec0(\n  Competition_ID INTEGER,\n  Year INTEGER,\n  Theme TEXT,\n  Host_city_ID INTEGER,\n  Hosts TEXT,\n  Theme_embedding float[384],\n  Hosts_embedding float[384]\n)\n\nCREATE TABLE \"farm_competition_info\" (key text primary key, value any)\n\nCREATE TABLE \"farm_competition_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"farm_competition_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"farm_competition_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_vector_chunks01\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"farm_competition_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n)\n\n### SQL Functions\nYou may consider one or more of the following SQL functions while generating the query:\nFunction 1:\nSOUNDEX(X) \nDescription: The SOUNDEX(X) function returns a string that is the soundex encoding of the string X. The string \"?000\" is returned if the argument is NULL or contains no ASCII alphabetic characters. This function is omitted from SQLite by default. It is only available if theSQLITE_SOUNDEXcompile-time option is used when SQLite is built.\nFunction 2:\nATANH(X) \nDescription: Return the hyperbolic arctangent of X.\n\nImportant tips:\nExcept for the functions listed above, you may use any other functions as long as they conform to the syntax of the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO farm_competition(Theme) VALUES (\"Carnival M is back!\");\n\nINSERT INTO farm_competition(Theme) VALUES (\"Codehunters\");\n\nINSERT INTO farm_competition(Hosts) VALUES (\"Miley Cyrus Jared Leto and Karen Mok\");\n\nINSERT INTO farm_competition(Hosts) VALUES (\"Leehom Wang and Kelly Rowland\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Highly Complex level, defined as follows:\n**Criteria:** Multi-stage or recursive vector search with advanced analytics.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 3 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "farm"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n)\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n)\n\nCREATE VIRTUAL TABLE \"farm_competition\" USING vec0(\n  Competition_ID INTEGER,\n  Year INTEGER,\n  Theme TEXT,\n  Host_city_ID INTEGER,\n  Hosts TEXT,\n  Theme_embedding float[384],\n  Hosts_embedding float[384]\n)\n\nCREATE TABLE \"farm_competition_info\" (key text primary key, value any)\n\nCREATE TABLE \"farm_competition_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"farm_competition_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"farm_competition_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_vector_chunks01\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"farm_competition_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n)\n\n### SQL Functions\nYou may consider one or more of the following SQL functions while generating the query:\nFunction 1:\nDATETIME(time-value, modifier, modifier, ...) \nDescription: Returns the date and time formatted as YYYY-MM-DD HH:MM:SS or as YYYY-MM-DD HH:MM:SS.SSS if the subsec modifier is used.\nFunction 2:\nLIKE(X,Y) or LIKE(X,Y,Z) \nDescription: The LIKE() function is used to implement the \"Y LIKE X [ESCAPE Z]\" expression. If the optional ESCAPE clause is present, then the LIKE() function is invoked with three arguments. Otherwise, it is invoked with two arguments only. Note that the X and Y parameters are reversed in the LIKE() function relative to the infixLIKEoperator. X is the pattern and Y is the string to match against that pattern. Hence, the following expressions are equivalent:name LIKE '%neon%' LIKE('%neon%',name)Thesqlite3_create_function()interface can be used to override the LIKE() function and thereby change the operation of theLIKEoperator. When overriding the LIKE() function, it may be important to override both the two and three argument versions of the LIKE() function. Otherwise, different code may be called to implement theLIKEoperator depending on whether or not an ESCAPE clause was specified.\n\nImportant tips:\nExcept for the functions listed above, you may use any other functions as long as they conform to the syntax of the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO farm_competition(Theme) VALUES (\"Carnival M is back!\");\n\nINSERT INTO farm_competition(Theme) VALUES (\"Codehunters\");\n\nINSERT INTO farm_competition(Hosts) VALUES (\"Miley Cyrus Jared Leto and Karen Mok\");\n\nINSERT INTO farm_competition(Hosts) VALUES (\"Leehom Wang and Kelly Rowland\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Simple level, defined as follows:\n**Criteria:** Basic vector similarity search on a single table.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 2 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "farm"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n)\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n)\n\nCREATE VIRTUAL TABLE \"farm_competition\" USING vec0(\n  Competition_ID INTEGER,\n  Year INTEGER,\n  Theme TEXT,\n  Host_city_ID INTEGER,\n  Hosts TEXT,\n  Theme_embedding float[384],\n  Hosts_embedding float[384]\n)\n\nCREATE TABLE \"farm_competition_info\" (key text primary key, value any)\n\nCREATE TABLE \"farm_competition_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"farm_competition_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"farm_competition_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_vector_chunks01\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"farm_competition_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n)\n\n### SQL Functions\nYou may consider one or more of the following SQL functions while generating the query:\nFunction 1:\nUNICODE(X) \nDescription: The UNICODE(X) function returns the numeric unicode code point corresponding to the first character of the string X. If the argument to UNICODE(X) is not a string then the result is undefined.\nFunction 2:\nLIKE(X,Y) or LIKE(X,Y,Z) \nDescription: The LIKE() function is used to implement the \"Y LIKE X [ESCAPE Z]\" expression. If the optional ESCAPE clause is present, then the LIKE() function is invoked with three arguments. Otherwise, it is invoked with two arguments only. Note that the X and Y parameters are reversed in the LIKE() function relative to the infixLIKEoperator. X is the pattern and Y is the string to match against that pattern. Hence, the following expressions are equivalent:name LIKE '%neon%' LIKE('%neon%',name)Thesqlite3_create_function()interface can be used to override the LIKE() function and thereby change the operation of theLIKEoperator. When overriding the LIKE() function, it may be important to override both the two and three argument versions of the LIKE() function. Otherwise, different code may be called to implement theLIKEoperator depending on whether or not an ESCAPE clause was specified.\n\nImportant tips:\nExcept for the functions listed above, you may use any other functions as long as they conform to the syntax of the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO farm_competition(Theme) VALUES (\"Carnival M is back!\");\n\nINSERT INTO farm_competition(Theme) VALUES (\"Codehunters\");\n\nINSERT INTO farm_competition(Hosts) VALUES (\"Miley Cyrus Jared Leto and Karen Mok\");\n\nINSERT INTO farm_competition(Hosts) VALUES (\"Leehom Wang and Kelly Rowland\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Complex level, defined as follows:\n**Criteria:** Vector search combined with CTEs / hybird search.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 2 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "farm"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n)\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n)\n\nCREATE VIRTUAL TABLE \"farm_competition\" USING vec0(\n  Competition_ID INTEGER,\n  Year INTEGER,\n  Theme TEXT,\n  Host_city_ID INTEGER,\n  Hosts TEXT,\n  Theme_embedding float[384],\n  Hosts_embedding float[384]\n)\n\nCREATE TABLE \"farm_competition_info\" (key text primary key, value any)\n\nCREATE TABLE \"farm_competition_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"farm_competition_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"farm_competition_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_vector_chunks01\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"farm_competition_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n)\n\n### SQL Functions\nYou may consider one or more of the following SQL functions while generating the query:\nFunction 1:\nMAX(X,Y,...) \nDescription: The multi-argument MAX() function returns the argument with the maximum value, or return NULL if any argument is NULL. The multi-argument MAX() function searches its arguments from left to right for an argument that defines a collating function and uses that collating function for all string comparisons. If none of the arguments to MAX() define a collating function, then the BINARY collating function is used. Note thatmax()is a simple function when it has 2 or more arguments but operates as anaggregate functionif given only a single argument.\n\nImportant tips:\nExcept for the functions listed above, you may use any other functions as long as they conform to the syntax of the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO farm_competition(Theme) VALUES (\"Carnival M is back!\");\n\nINSERT INTO farm_competition(Theme) VALUES (\"Codehunters\");\n\nINSERT INTO farm_competition(Hosts) VALUES (\"Miley Cyrus Jared Leto and Karen Mok\");\n\nINSERT INTO farm_competition(Hosts) VALUES (\"Leehom Wang and Kelly Rowland\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Complex level, defined as follows:\n**Criteria:** Vector search combined with CTEs / hybird search.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 2 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "farm"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n)\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n)\n\nCREATE VIRTUAL TABLE \"farm_competition\" USING vec0(\n  Competition_ID INTEGER,\n  Year INTEGER,\n  Theme TEXT,\n  Host_city_ID INTEGER,\n  Hosts TEXT,\n  Theme_embedding float[384],\n  Hosts_embedding float[384]\n)\n\nCREATE TABLE \"farm_competition_info\" (key text primary key, value any)\n\nCREATE TABLE \"farm_competition_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"farm_competition_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"farm_competition_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_vector_chunks01\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"farm_competition_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n)\n\n### SQL Functions\nYou can use any function supported by the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO farm_competition(Theme) VALUES (\"Carnival M is back!\");\n\nINSERT INTO farm_competition(Theme) VALUES (\"Codehunters\");\n\nINSERT INTO farm_competition(Hosts) VALUES (\"Miley Cyrus Jared Leto and Karen Mok\");\n\nINSERT INTO farm_competition(Hosts) VALUES (\"Leehom Wang and Kelly Rowland\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Highly Complex level, defined as follows:\n**Criteria:** Multi-stage or recursive vector search with advanced analytics.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 1 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "farm"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n)\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n)\n\nCREATE VIRTUAL TABLE \"farm_competition\" USING vec0(\n  Competition_ID INTEGER,\n  Year INTEGER,\n  Theme TEXT,\n  Host_city_ID INTEGER,\n  Hosts TEXT,\n  Theme_embedding float[384],\n  Hosts_embedding float[384]\n)\n\nCREATE TABLE \"farm_competition_info\" (key text primary key, value any)\n\nCREATE TABLE \"farm_competition_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"farm_competition_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"farm_competition_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_vector_chunks01\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"farm_competition_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n)\n\n### SQL Functions\nYou may consider one or more of the following SQL functions while generating the query:\nFunction 1:\nNULLIF(X,Y) \nDescription: The NULLIF(X,Y) function returns its first argument if the arguments are different and NULL if the arguments are the same. The NULLIF(X,Y) function searches its arguments from left to right for an argument that defines a collating function and uses that collating function for all string comparisons. If neither argument to NULLIF() defines a collating function then the BINARY collating function is used.\nFunction 2:\nACOS(X) \nDescription: Return the arccosine of X. The result is in radians.\n\nImportant tips:\nExcept for the functions listed above, you may use any other functions as long as they conform to the syntax of the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO farm_competition(Theme) VALUES (\"Carnival M is back!\");\n\nINSERT INTO farm_competition(Theme) VALUES (\"Codehunters\");\n\nINSERT INTO farm_competition(Hosts) VALUES (\"Miley Cyrus Jared Leto and Karen Mok\");\n\nINSERT INTO farm_competition(Hosts) VALUES (\"Leehom Wang and Kelly Rowland\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Complex level, defined as follows:\n**Criteria:** Vector search combined with CTEs / hybird search.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 4 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "farm"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n)\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n)\n\nCREATE VIRTUAL TABLE \"farm_competition\" USING vec0(\n  Competition_ID INTEGER,\n  Year INTEGER,\n  Theme TEXT,\n  Host_city_ID INTEGER,\n  Hosts TEXT,\n  Theme_embedding float[384],\n  Hosts_embedding float[384]\n)\n\nCREATE TABLE \"farm_competition_info\" (key text primary key, value any)\n\nCREATE TABLE \"farm_competition_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"farm_competition_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"farm_competition_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_vector_chunks01\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"farm_competition_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n)\n\n### SQL Functions\nYou may consider one or more of the following SQL functions while generating the query:\nFunction 1:\nSUBSTR(X,Y,Z) or SUBSTR(X,Y) or SUBSTRING(X,Y,Z) or SUBSTRING(X,Y) \nDescription: The SUBSTR(X,Y,Z) function returns a substring of input string X that begins with the Y-th character and which is Z characters long. If Z is omitted then SUBSTR(X,Y) returns all characters through the end of the string X beginning with the Y-th. The left-most character of X is number 1. If Y is negative then the first character of the substring is found by counting from the right rather than the left. If Z is negative then the abs(Z) characters preceding the Y-th character are returned. If X is a string then characters indices refer to actual UTF-8 characters. If X is a BLOB then the indices refer to bytes.\"substring()\" is an alias for \"substr()\" beginning with SQLite version 3.34.\nFunction 2:\nPI() \nDescription: Return an approximation for π.\n\nImportant tips:\nExcept for the functions listed above, you may use any other functions as long as they conform to the syntax of the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO farm_competition(Theme) VALUES (\"Carnival M is back!\");\n\nINSERT INTO farm_competition(Theme) VALUES (\"Codehunters\");\n\nINSERT INTO farm_competition(Hosts) VALUES (\"Miley Cyrus Jared Leto and Karen Mok\");\n\nINSERT INTO farm_competition(Hosts) VALUES (\"Leehom Wang and Kelly Rowland\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Simple level, defined as follows:\n**Criteria:** Basic vector similarity search on a single table.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 1 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "farm"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n)\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n)\n\nCREATE VIRTUAL TABLE \"farm_competition\" USING vec0(\n  Competition_ID INTEGER,\n  Year INTEGER,\n  Theme TEXT,\n  Host_city_ID INTEGER,\n  Hosts TEXT,\n  Theme_embedding float[384],\n  Hosts_embedding float[384]\n)\n\nCREATE TABLE \"farm_competition_info\" (key text primary key, value any)\n\nCREATE TABLE \"farm_competition_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"farm_competition_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"farm_competition_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_vector_chunks01\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"farm_competition_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n)\n\n### SQL Functions\nYou can use any function supported by the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO farm_competition(Theme) VALUES (\"Carnival M is back!\");\n\nINSERT INTO farm_competition(Theme) VALUES (\"Codehunters\");\n\nINSERT INTO farm_competition(Hosts) VALUES (\"Miley Cyrus Jared Leto and Karen Mok\");\n\nINSERT INTO farm_competition(Hosts) VALUES (\"Leehom Wang and Kelly Rowland\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Moderate level, defined as follows:\n**Criteria:** Vector search + simple joins / filters.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 1 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "farm"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE TABLE \"city\" (\n\"City_ID\" int,\n\"Official_Name\" text,\n\"Status\" text,\n\"Area_km_2\" real,\n\"Population\" real,\n\"Census_Ranking\" text,\nPRIMARY KEY (\"City_ID\")\n)\n\nCREATE TABLE \"farm\" (\n\"Farm_ID\" int,\n\"Year\" int,\n\"Total_Horses\" real,\n\"Working_Horses\" real,\n\"Total_Cattle\" real,\n\"Oxen\" real,\n\"Bulls\" real,\n\"Cows\" real,\n\"Pigs\" real,\n\"Sheep_and_Goats\" real,\nPRIMARY KEY (\"Farm_ID\")\n)\n\nCREATE VIRTUAL TABLE \"farm_competition\" USING vec0(\n  Competition_ID INTEGER,\n  Year INTEGER,\n  Theme TEXT,\n  Host_city_ID INTEGER,\n  Hosts TEXT,\n  Theme_embedding float[384],\n  Hosts_embedding float[384]\n)\n\nCREATE TABLE \"farm_competition_info\" (key text primary key, value any)\n\nCREATE TABLE \"farm_competition_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"farm_competition_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"farm_competition_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_vector_chunks01\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"farm_competition_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"farm_competition_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"competition_record\" (\n\"Competition_ID\" int,\n\"Farm_ID\" int,\n\"Rank\" int,\nPRIMARY KEY (\"Competition_ID\",\"Farm_ID\"),\nFOREIGN KEY (`Competition_ID`) REFERENCES `farm_competition`(`Competition_ID`),\nFOREIGN KEY (`Farm_ID`) REFERENCES `farm`(`Farm_ID`)\n)\n\n### SQL Functions\nYou can use any function supported by the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO farm_competition(Theme) VALUES (\"Carnival M is back!\");\n\nINSERT INTO farm_competition(Theme) VALUES (\"Codehunters\");\n\nINSERT INTO farm_competition(Hosts) VALUES (\"Miley Cyrus Jared Leto and Karen Mok\");\n\nINSERT INTO farm_competition(Hosts) VALUES (\"Leehom Wang and Kelly Rowland\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Complex level, defined as follows:\n**Criteria:** Vector search combined with CTEs / hybird search.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 2 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "farm"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE TABLE \"stadium\" (\n\"id\" int,\n\"name\" text,\n\"Home_Games\" int,\n\"Average_Attendance\" real,\n\"Total_Attendance\" real,\n\"Capacity_Percentage\" real,\nprimary key (\"id\")\n)\n\nCREATE TABLE \"game\" (\n\"stadium_id\" int,\n\"id\" int,\n\"Season\" int,\n\"Date\" text,\n\"Home_team\" text,\n\"Away_team\" text,\n\"Score\" text,\n\"Competition\" text,\nprimary key (\"id\"),\nforeign key (\"stadium_id\") references `stadium`(\"id\")\n)\n\nCREATE VIRTUAL TABLE \"injury_accident\" USING vec0(\n  game_id INTEGER,\n  id INTEGER,\n  Player TEXT,\n  Injury TEXT,\n  Number_of_matches TEXT,\n  Source TEXT,\n  Injury_embedding float[384]\n)\n\nCREATE TABLE \"injury_accident_info\" (key text primary key, value any)\n\nCREATE TABLE \"injury_accident_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"injury_accident_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"injury_accident_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"injury_accident_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatatext03\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"injury_accident_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"injury_accident_metadatachunks05\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatatext05\"(rowid PRIMARY KEY, data TEXT)\n\n### SQL Functions\nYou may consider one or more of the following SQL functions while generating the query:\nFunction 1:\nTYPEOF(X) \nDescription: The TYPEOF(X) function returns a string that indicates thedatatypeof the expression X: \"null\", \"integer\", \"real\", \"text\", or \"blob\".\nFunction 2:\nLAST_VALUE(expr) \nDescription: This built-in window function calculates the window frame for each row in the same way as an aggregate window function. It returns the value ofexprevaluated against the last row in the window frame for each row.\n\nImportant tips:\nExcept for the functions listed above, you may use any other functions as long as they conform to the syntax of the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO injury_accident(Injury) VALUES (\"Clean-up surgery on his right knee\");\n\nINSERT INTO injury_accident(Injury) VALUES (\"Knee problem\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Simple level, defined as follows:\n**Criteria:** Basic vector similarity search on a single table.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 1 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "game_injury"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE TABLE \"stadium\" (\n\"id\" int,\n\"name\" text,\n\"Home_Games\" int,\n\"Average_Attendance\" real,\n\"Total_Attendance\" real,\n\"Capacity_Percentage\" real,\nprimary key (\"id\")\n)\n\nCREATE TABLE \"game\" (\n\"stadium_id\" int,\n\"id\" int,\n\"Season\" int,\n\"Date\" text,\n\"Home_team\" text,\n\"Away_team\" text,\n\"Score\" text,\n\"Competition\" text,\nprimary key (\"id\"),\nforeign key (\"stadium_id\") references `stadium`(\"id\")\n)\n\nCREATE VIRTUAL TABLE \"injury_accident\" USING vec0(\n  game_id INTEGER,\n  id INTEGER,\n  Player TEXT,\n  Injury TEXT,\n  Number_of_matches TEXT,\n  Source TEXT,\n  Injury_embedding float[384]\n)\n\nCREATE TABLE \"injury_accident_info\" (key text primary key, value any)\n\nCREATE TABLE \"injury_accident_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"injury_accident_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"injury_accident_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"injury_accident_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatatext03\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"injury_accident_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"injury_accident_metadatachunks05\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatatext05\"(rowid PRIMARY KEY, data TEXT)\n\n### SQL Functions\nYou can use any function supported by the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO injury_accident(Injury) VALUES (\"Clean-up surgery on his right knee\");\n\nINSERT INTO injury_accident(Injury) VALUES (\"Knee problem\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Simple level, defined as follows:\n**Criteria:** Basic vector similarity search on a single table.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 1 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "game_injury"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE TABLE \"stadium\" (\n\"id\" int,\n\"name\" text,\n\"Home_Games\" int,\n\"Average_Attendance\" real,\n\"Total_Attendance\" real,\n\"Capacity_Percentage\" real,\nprimary key (\"id\")\n)\n\nCREATE TABLE \"game\" (\n\"stadium_id\" int,\n\"id\" int,\n\"Season\" int,\n\"Date\" text,\n\"Home_team\" text,\n\"Away_team\" text,\n\"Score\" text,\n\"Competition\" text,\nprimary key (\"id\"),\nforeign key (\"stadium_id\") references `stadium`(\"id\")\n)\n\nCREATE VIRTUAL TABLE \"injury_accident\" USING vec0(\n  game_id INTEGER,\n  id INTEGER,\n  Player TEXT,\n  Injury TEXT,\n  Number_of_matches TEXT,\n  Source TEXT,\n  Injury_embedding float[384]\n)\n\nCREATE TABLE \"injury_accident_info\" (key text primary key, value any)\n\nCREATE TABLE \"injury_accident_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"injury_accident_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"injury_accident_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"injury_accident_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatatext03\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"injury_accident_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"injury_accident_metadatachunks05\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatatext05\"(rowid PRIMARY KEY, data TEXT)\n\n### SQL Functions\nYou may consider one or more of the following SQL functions while generating the query:\nFunction 1:\nRTRIM(X) or RTRIM(X,Y) \nDescription: The RTRIM(X,Y) function returns a string formed by removing any and all characters that appear in Y from the right side of X. If the Y argument is omitted, RTRIM(X) removes spaces from the right side of X.\n\nImportant tips:\nExcept for the functions listed above, you may use any other functions as long as they conform to the syntax of the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO injury_accident(Injury) VALUES (\"Clean-up surgery on his right knee\");\n\nINSERT INTO injury_accident(Injury) VALUES (\"Knee problem\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Complex level, defined as follows:\n**Criteria:** Vector search combined with CTEs / hybird search.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 1 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "game_injury"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE TABLE \"stadium\" (\n\"id\" int,\n\"name\" text,\n\"Home_Games\" int,\n\"Average_Attendance\" real,\n\"Total_Attendance\" real,\n\"Capacity_Percentage\" real,\nprimary key (\"id\")\n)\n\nCREATE TABLE \"game\" (\n\"stadium_id\" int,\n\"id\" int,\n\"Season\" int,\n\"Date\" text,\n\"Home_team\" text,\n\"Away_team\" text,\n\"Score\" text,\n\"Competition\" text,\nprimary key (\"id\"),\nforeign key (\"stadium_id\") references `stadium`(\"id\")\n)\n\nCREATE VIRTUAL TABLE \"injury_accident\" USING vec0(\n  game_id INTEGER,\n  id INTEGER,\n  Player TEXT,\n  Injury TEXT,\n  Number_of_matches TEXT,\n  Source TEXT,\n  Injury_embedding float[384]\n)\n\nCREATE TABLE \"injury_accident_info\" (key text primary key, value any)\n\nCREATE TABLE \"injury_accident_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"injury_accident_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"injury_accident_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"injury_accident_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatatext03\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"injury_accident_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"injury_accident_metadatachunks05\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatatext05\"(rowid PRIMARY KEY, data TEXT)\n\n### SQL Functions\nYou can use any function supported by the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO injury_accident(Injury) VALUES (\"Clean-up surgery on his right knee\");\n\nINSERT INTO injury_accident(Injury) VALUES (\"Knee problem\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Simple level, defined as follows:\n**Criteria:** Basic vector similarity search on a single table.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 5 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "game_injury"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE TABLE \"stadium\" (\n\"id\" int,\n\"name\" text,\n\"Home_Games\" int,\n\"Average_Attendance\" real,\n\"Total_Attendance\" real,\n\"Capacity_Percentage\" real,\nprimary key (\"id\")\n)\n\nCREATE TABLE \"game\" (\n\"stadium_id\" int,\n\"id\" int,\n\"Season\" int,\n\"Date\" text,\n\"Home_team\" text,\n\"Away_team\" text,\n\"Score\" text,\n\"Competition\" text,\nprimary key (\"id\"),\nforeign key (\"stadium_id\") references `stadium`(\"id\")\n)\n\nCREATE VIRTUAL TABLE \"injury_accident\" USING vec0(\n  game_id INTEGER,\n  id INTEGER,\n  Player TEXT,\n  Injury TEXT,\n  Number_of_matches TEXT,\n  Source TEXT,\n  Injury_embedding float[384]\n)\n\nCREATE TABLE \"injury_accident_info\" (key text primary key, value any)\n\nCREATE TABLE \"injury_accident_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"injury_accident_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"injury_accident_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"injury_accident_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatatext03\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"injury_accident_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"injury_accident_metadatachunks05\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatatext05\"(rowid PRIMARY KEY, data TEXT)\n\n### SQL Functions\nYou can use any function supported by the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO injury_accident(Injury) VALUES (\"Clean-up surgery on his right knee\");\n\nINSERT INTO injury_accident(Injury) VALUES (\"Knee problem\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Simple level, defined as follows:\n**Criteria:** Basic vector similarity search on a single table.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 1 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "game_injury"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE TABLE \"stadium\" (\n\"id\" int,\n\"name\" text,\n\"Home_Games\" int,\n\"Average_Attendance\" real,\n\"Total_Attendance\" real,\n\"Capacity_Percentage\" real,\nprimary key (\"id\")\n)\n\nCREATE TABLE \"game\" (\n\"stadium_id\" int,\n\"id\" int,\n\"Season\" int,\n\"Date\" text,\n\"Home_team\" text,\n\"Away_team\" text,\n\"Score\" text,\n\"Competition\" text,\nprimary key (\"id\"),\nforeign key (\"stadium_id\") references `stadium`(\"id\")\n)\n\nCREATE VIRTUAL TABLE \"injury_accident\" USING vec0(\n  game_id INTEGER,\n  id INTEGER,\n  Player TEXT,\n  Injury TEXT,\n  Number_of_matches TEXT,\n  Source TEXT,\n  Injury_embedding float[384]\n)\n\nCREATE TABLE \"injury_accident_info\" (key text primary key, value any)\n\nCREATE TABLE \"injury_accident_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"injury_accident_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"injury_accident_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"injury_accident_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatatext03\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"injury_accident_metadatachunks04\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatatext04\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"injury_accident_metadatachunks05\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"injury_accident_metadatatext05\"(rowid PRIMARY KEY, data TEXT)\n\n### SQL Functions\nYou can use any function supported by the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO injury_accident(Injury) VALUES (\"Clean-up surgery on his right knee\");\n\nINSERT INTO injury_accident(Injury) VALUES (\"Knee problem\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Highly Complex level, defined as follows:\n**Criteria:** Multi-stage or recursive vector search with advanced analytics.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 1 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "game_injury"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE TABLE \"train\" (\n    \"id\" int,\n    \"train_number\" int,\n    \"name\" text,\n    \"origin\" text,\n    \"destination\" text,\n    \"time\" text,\n    \"interval\" text,\n    primary key (\"id\")\n)\n\nCREATE VIRTUAL TABLE \"station\" USING vec0(\n  id INTEGER,\n  network_name TEXT,\n  services TEXT,\n  local_authority TEXT,\n  services_embedding float[384]\n)\n\nCREATE TABLE \"station_info\" (key text primary key, value any)\n\nCREATE TABLE \"station_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"station_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"station_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"station_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"station_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"station_metadatatext01\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"station_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"station_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"station_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"station_metadatatext03\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"route\" (\n    \"train_id\" int,\n    \"station_id\" int,\n    primary key (\"train_id\", \"station_id\"),\n    foreign key (\"train_id\") references `train`(\"id\"),\n    foreign key (\"station_id\") references `station`(\"id\")\n)\n\nCREATE TABLE \"weekly_weather\" (\n    \"station_id\" int,\n    \"day_of_week\" text,\n    \"high_temperature\" int,\n    \"low_temperature\" int,\n    \"precipitation\" real,\n    \"wind_speed_mph\" int,\n    primary key (\"station_id\", \"day_of_week\"),\n    foreign key (\"station_id\") references \"station\"(\"id\")\n)\n\n### SQL Functions\nYou can use any function supported by the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO station(services) VALUES (\"Metropolitan line and Chiltern Railways\");\n\nINSERT INTO station(services) VALUES (\"London Overground and London Midland\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Moderate level, defined as follows:\n**Criteria:** Vector search + simple joins / filters.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 1 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "station_weather"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE TABLE \"train\" (\n    \"id\" int,\n    \"train_number\" int,\n    \"name\" text,\n    \"origin\" text,\n    \"destination\" text,\n    \"time\" text,\n    \"interval\" text,\n    primary key (\"id\")\n)\n\nCREATE VIRTUAL TABLE \"station\" USING vec0(\n  id INTEGER,\n  network_name TEXT,\n  services TEXT,\n  local_authority TEXT,\n  services_embedding float[384]\n)\n\nCREATE TABLE \"station_info\" (key text primary key, value any)\n\nCREATE TABLE \"station_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"station_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"station_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"station_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"station_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"station_metadatatext01\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"station_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"station_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"station_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"station_metadatatext03\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"route\" (\n    \"train_id\" int,\n    \"station_id\" int,\n    primary key (\"train_id\", \"station_id\"),\n    foreign key (\"train_id\") references `train`(\"id\"),\n    foreign key (\"station_id\") references `station`(\"id\")\n)\n\nCREATE TABLE \"weekly_weather\" (\n    \"station_id\" int,\n    \"day_of_week\" text,\n    \"high_temperature\" int,\n    \"low_temperature\" int,\n    \"precipitation\" real,\n    \"wind_speed_mph\" int,\n    primary key (\"station_id\", \"day_of_week\"),\n    foreign key (\"station_id\") references \"station\"(\"id\")\n)\n\n### SQL Functions\nYou may consider one or more of the following SQL functions while generating the query:\nFunction 1:\nMIN(X,Y,...) \nDescription: The multi-argument MIN() function returns the argument with the minimum value. The multi-argument MIN() function searches its arguments from left to right for an argument that defines a collating function and uses that collating function for all string comparisons. If none of the arguments to MIN() define a collating function, then the BINARY collating function is used. Note thatmin()is a simple function when it has 2 or more arguments but operates as anaggregate functionif given only a single argument.\nFunction 2:\nSQLITE_COMPILEOPTION_GET(N) \nDescription: The SQLITE_COMPILEOPTION_GET() SQL function is a wrapper around thesqlite3_compileoption_get()C/C++ function. This routine returns the N-th compile-time option used to build SQLite or NULL if N is out of range. See also thecompile_options pragma.\n\nImportant tips:\nExcept for the functions listed above, you may use any other functions as long as they conform to the syntax of the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO station(services) VALUES (\"Metropolitan line and Chiltern Railways\");\n\nINSERT INTO station(services) VALUES (\"London Overground and London Midland\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Highly Complex level, defined as follows:\n**Criteria:** Multi-stage or recursive vector search with advanced analytics.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 3 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "station_weather"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE TABLE \"train\" (\n    \"id\" int,\n    \"train_number\" int,\n    \"name\" text,\n    \"origin\" text,\n    \"destination\" text,\n    \"time\" text,\n    \"interval\" text,\n    primary key (\"id\")\n)\n\nCREATE VIRTUAL TABLE \"station\" USING vec0(\n  id INTEGER,\n  network_name TEXT,\n  services TEXT,\n  local_authority TEXT,\n  services_embedding float[384]\n)\n\nCREATE TABLE \"station_info\" (key text primary key, value any)\n\nCREATE TABLE \"station_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"station_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"station_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"station_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"station_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"station_metadatatext01\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"station_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"station_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"station_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"station_metadatatext03\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"route\" (\n    \"train_id\" int,\n    \"station_id\" int,\n    primary key (\"train_id\", \"station_id\"),\n    foreign key (\"train_id\") references `train`(\"id\"),\n    foreign key (\"station_id\") references `station`(\"id\")\n)\n\nCREATE TABLE \"weekly_weather\" (\n    \"station_id\" int,\n    \"day_of_week\" text,\n    \"high_temperature\" int,\n    \"low_temperature\" int,\n    \"precipitation\" real,\n    \"wind_speed_mph\" int,\n    primary key (\"station_id\", \"day_of_week\"),\n    foreign key (\"station_id\") references \"station\"(\"id\")\n)\n\n### SQL Functions\nYou can use any function supported by the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO station(services) VALUES (\"Metropolitan line and Chiltern Railways\");\n\nINSERT INTO station(services) VALUES (\"London Overground and London Midland\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Highly Complex level, defined as follows:\n**Criteria:** Multi-stage or recursive vector search with advanced analytics.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 3 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "station_weather"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE TABLE \"train\" (\n    \"id\" int,\n    \"train_number\" int,\n    \"name\" text,\n    \"origin\" text,\n    \"destination\" text,\n    \"time\" text,\n    \"interval\" text,\n    primary key (\"id\")\n)\n\nCREATE VIRTUAL TABLE \"station\" USING vec0(\n  id INTEGER,\n  network_name TEXT,\n  services TEXT,\n  local_authority TEXT,\n  services_embedding float[384]\n)\n\nCREATE TABLE \"station_info\" (key text primary key, value any)\n\nCREATE TABLE \"station_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"station_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"station_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"station_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"station_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"station_metadatatext01\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"station_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"station_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"station_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"station_metadatatext03\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"route\" (\n    \"train_id\" int,\n    \"station_id\" int,\n    primary key (\"train_id\", \"station_id\"),\n    foreign key (\"train_id\") references `train`(\"id\"),\n    foreign key (\"station_id\") references `station`(\"id\")\n)\n\nCREATE TABLE \"weekly_weather\" (\n    \"station_id\" int,\n    \"day_of_week\" text,\n    \"high_temperature\" int,\n    \"low_temperature\" int,\n    \"precipitation\" real,\n    \"wind_speed_mph\" int,\n    primary key (\"station_id\", \"day_of_week\"),\n    foreign key (\"station_id\") references \"station\"(\"id\")\n)\n\n### SQL Functions\nYou may consider one or more of the following SQL functions while generating the query:\nFunction 1:\nTOTAL_CHANGES() \nDescription: The TOTAL_CHANGES() function returns the number of row changes caused by INSERT, UPDATE or DELETE statements since the current database connection was opened. This function is a wrapper around thesqlite3_total_changes64()C/C++ interface.\nFunction 2:\nMIN(X) \nDescription: The MIN() aggregate function returns the minimum non-NULL value of all values in the group. The minimum value is the first non-NULL value that would appear in an ORDER BY of the column. Aggregate MIN() returns NULL if and only if there are no non-NULL values in the group.\n\nImportant tips:\nExcept for the functions listed above, you may use any other functions as long as they conform to the syntax of the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO station(services) VALUES (\"Metropolitan line and Chiltern Railways\");\n\nINSERT INTO station(services) VALUES (\"London Overground and London Midland\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Moderate level, defined as follows:\n**Criteria:** Vector search + simple joins / filters.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 1 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "station_weather"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE TABLE \"train\" (\n    \"id\" int,\n    \"train_number\" int,\n    \"name\" text,\n    \"origin\" text,\n    \"destination\" text,\n    \"time\" text,\n    \"interval\" text,\n    primary key (\"id\")\n)\n\nCREATE VIRTUAL TABLE \"station\" USING vec0(\n  id INTEGER,\n  network_name TEXT,\n  services TEXT,\n  local_authority TEXT,\n  services_embedding float[384]\n)\n\nCREATE TABLE \"station_info\" (key text primary key, value any)\n\nCREATE TABLE \"station_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"station_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"station_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"station_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"station_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"station_metadatatext01\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"station_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"station_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"station_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"station_metadatatext03\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"route\" (\n    \"train_id\" int,\n    \"station_id\" int,\n    primary key (\"train_id\", \"station_id\"),\n    foreign key (\"train_id\") references `train`(\"id\"),\n    foreign key (\"station_id\") references `station`(\"id\")\n)\n\nCREATE TABLE \"weekly_weather\" (\n    \"station_id\" int,\n    \"day_of_week\" text,\n    \"high_temperature\" int,\n    \"low_temperature\" int,\n    \"precipitation\" real,\n    \"wind_speed_mph\" int,\n    primary key (\"station_id\", \"day_of_week\"),\n    foreign key (\"station_id\") references \"station\"(\"id\")\n)\n\n### SQL Functions\nYou may consider one or more of the following SQL functions while generating the query:\nFunction 1:\nASIN(X) \nDescription: Return the arcsine of X. The result is in radians.\n\nImportant tips:\nExcept for the functions listed above, you may use any other functions as long as they conform to the syntax of the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO station(services) VALUES (\"Metropolitan line and Chiltern Railways\");\n\nINSERT INTO station(services) VALUES (\"London Overground and London Midland\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Complex level, defined as follows:\n**Criteria:** Vector search combined with CTEs / hybird search.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 1 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "station_weather"
},{
  "prompt": "**Task Overview**\nCreate an executable SQL query based on the provided information.\n\n**Database Schema**\nCREATE TABLE \"train\" (\n    \"id\" int,\n    \"train_number\" int,\n    \"name\" text,\n    \"origin\" text,\n    \"destination\" text,\n    \"time\" text,\n    \"interval\" text,\n    primary key (\"id\")\n)\n\nCREATE VIRTUAL TABLE \"station\" USING vec0(\n  id INTEGER,\n  network_name TEXT,\n  services TEXT,\n  local_authority TEXT,\n  services_embedding float[384]\n)\n\nCREATE TABLE \"station_info\" (key text primary key, value any)\n\nCREATE TABLE \"station_chunks\"(chunk_id INTEGER PRIMARY KEY AUTOINCREMENT,size INTEGER NOT NULL,validity BLOB NOT NULL,rowids BLOB NOT NULL)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE \"station_rowids\"(rowid INTEGER PRIMARY KEY AUTOINCREMENT,id,chunk_id INTEGER,chunk_offset INTEGER)\n\nCREATE TABLE \"station_vector_chunks00\"(rowid PRIMARY KEY,vectors BLOB NOT NULL)\n\nCREATE TABLE \"station_metadatachunks00\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"station_metadatachunks01\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"station_metadatatext01\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"station_metadatachunks02\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"station_metadatatext02\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"station_metadatachunks03\"(rowid PRIMARY KEY, data BLOB NOT NULL)\n\nCREATE TABLE \"station_metadatatext03\"(rowid PRIMARY KEY, data TEXT)\n\nCREATE TABLE \"route\" (\n    \"train_id\" int,\n    \"station_id\" int,\n    primary key (\"train_id\", \"station_id\"),\n    foreign key (\"train_id\") references `train`(\"id\"),\n    foreign key (\"station_id\") references `station`(\"id\")\n)\n\nCREATE TABLE \"weekly_weather\" (\n    \"station_id\" int,\n    \"day_of_week\" text,\n    \"high_temperature\" int,\n    \"low_temperature\" int,\n    \"precipitation\" real,\n    \"wind_speed_mph\" int,\n    primary key (\"station_id\", \"day_of_week\"),\n    foreign key (\"station_id\") references \"station\"(\"id\")\n)\n\n### SQL Functions\nYou can use any function supported by the database engine.\n\n### rich semantic column sample\nYou are provided with sample data for all semantically rich columns across all tables in the database. When generating a predicate (i.e., a WHERE clause) for a vector matching query on a specific column, you must refer to the corresponding examples for that particular column. Do not directly copy this reference data into your answer. Your task is to generate a new predicate that is similar in format and meaning to the provided samples for that column.\n\nsample:\nINSERT INTO station(services) VALUES (\"Metropolitan line and Chiltern Railways\");\n\nINSERT INTO station(services) VALUES (\"London Overground and London Midland\");\n\n**SQL Query Complexity**\nEnsure the SQL query matches the Highly Complex level, defined as follows:\n**Criteria:** Multi-stage or recursive vector search with advanced analytics.\n\n**Output Format Requirements**\nEnclose the SQL query in a code block:\n```sql\n  -- Your SQL query here\n```\n\n**SQL Query Requirements**\n1. Use the syntax specific to the SQLite database engine.\n2. Incorporate advanced functions if appropriate, but they are not mandatory.\n3. Address real-world data analysis needs. Avoid trivial or nonsensical queries.\n4. (Very important) Ensure the final SQL query selects 1 columns.\n5. (Very important) Always verify that every column name you reference in a query exists in the tables you're querying. Before executing a query, ensure all referenced columns (e.g., column1, table1.id) are valid and spelled correctly.\n\n\n**SQL extension**\nExtension: SQLite-vec and sqlite-lembed. \nIf you use \"SQLite-vec\", there are a few Requirements you should Comply with in addition, else you can ignore these requirements below.\n1. When generating SQL queries， you should prioritize utilizing KNN searches whenever contextually appropriate. However, you have to avoid unnecessary/forced KNN implementations for:\n--Traditional relational data queries (especially for columns like: id, age, price)\n--Cases where standard SQL operators (equality, range, or aggregation functions) are more efficient and semantically appropriate\n2. Only vector type(like: float[?]) support KNN queries and the name of vector column often end with \"_embedding\". So, you can use knn queries to search when the column name you need to search for ends with \"_embedding\" or when the column name with \"_embedding\" is also in the list.\n3. In any complexity level, you can choose to use KNN queries if need.\n4. When using KNN queries, you have to add LIMIT or 'And k = ?' constraint but do not use them all in the same statement. This rule is very important, do not forget to add LIMIT or 'And k = ?' constraint after MATCH operator.\n5. The lembed function is used to transform a string into a vector, whose type and size match the corresponding column type in the data table. The function has two parameters, the first parameter is the name of the embedding model used (default value: all-MILM-L6-v2), and the second parameter is the content of the string type you want to convert. So, you should generate some words or sentences with specific semantic information based on name, type and comment of this column. For example, you can generate \"The Daily Grind Coffee Shop\\n 456 Oak Avenue\\n Springfield, IL 62704\\n USA\" when this column name is Location_embedding, column type is float[384] and comment of column is \"the embedding of location\".\n6. The lembed function's second parameter MUST be a SPECIFIC semantic description. \n   - For location_embedding: Generate REAL addresses (e.g. \"Stadium: 123 Main St, Boston, MA. Capacity: 50,000. Home team: Patriots\")\n   - For columns containing semantically meaningful data (e.g., descriptions), generate rich, contextually appropriate information. For columns without meaningful content (e.g., placeholder names), avoid creating semantically dense output to facilitate fuzzy matching operations.\n   - For name_embedding: You should generate variationsof the original names (e.g., altered spellings, phonetic approximations, or intentionally obfuscated words/characters) to enable Subsequent fuzzy matching to identify semantically similar names. Importantly, never generate redundant information. For example, you can generate \"Lige\", but do not generate \"Ligand Lige\", \"Ligand example name\", \"Ligand similar to Aspirin\" and \"Ligand name variation\".\n   Examples:\n   ✅ Correct: \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Kri\")\n   ❌ Wrong:  \n     name_embedding MATCH lembed('all-MiniLM-L6-v2', \"A leading publisher based in Germany specializing in \nscientific journals and books.\")\n   - For text_embedding: Use ACTUAL and meaningful sentences (e.g. \"Harper Lee’s To Kill a Mockingbirdis a timeless exploration of racial injustice and moral growth, seen through the innocent yet perceptive eyes of Scout Finch. With its powerful themes, unforgettable characters like Atticus Finch, and Lee’s poignant prose, the novel remains a searing critique of society’s failures and a testament to the courage of standing for what’s right.\")\n   - NEVER use vague words and generic phrases like \"a book review\"   \n   Examples:\n   ✅ Correct: \n     lembed('all-MiniLM-L6-v2', \"To Kill a Mockingbird\")\n   ❌ Wrong:  \n     lembed('all-MiniLM-L6-v2', \"name of a famous book\")\n7. When using MATCH, please fill in a vector using function lembed after MATCH that matches the column type (with the same dimension and type). Using details are in examples.\n8. The distance column is an ​​implicitly generated metric​​ that appears when performing vector similarity searches (using the MATCH operator) in SQLite vector extensions like sqlite-vec. If using JOIN operator, you have to clarify which table that distance belongs to.\n9. A SELECT statement should have no more than one MATCH operation. However, each subquery within a SELECT statement could also have no more than one MATCH operation, independent of the parent query.\"\n10. When performing a KNN/vector similarity search (e.g., using MATCH or lembed), always specify a LIMIT or k=N constraint directly on the vector search operation, even if the outer query already has a LIMIT. The vector search requires its own result cap to avoid ambiguity in ranking and performance issues. \n11. When both LIMIT and k operations are available for vector search queries, prioritize using k operation for ​​Broader Compatibility.\nKey Points:\n​--​Vector search needs its own LIMIT/k​​ – The outer LIMIT applies to the final filtered results, not the initial similarity search.\n--LIMIT operator should follow closely after \"ORDER BY distance\". \n❌ Wrong Example: \n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\")\nAND q.quality_name = 'HighQuality'\nLIMIT 1;\n```\n✅ Correct Example:\n```sql\nSELECT a.codec_name\nFROM audio_codecs a\nJOIN quality_levels q ON a.codec_id = q.quality_id\nWHERE a.description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High efficiency audio codec with low latency and optimal bandwidth\") LIMIT 1\nAND q.quality_name = 'HighQuality';\n```\n--When using JOIN operations, you need to ensure that k does not cause ambiguity in the query. In most cases, the k parameter logically belongs to the same table as the column used in the MATCH clause. So, when the column referenced in the MATCH clause includes a table qualifier (e.g., table1.embedding), the k parameter must be explicitly bound to the same table.\n❌ Wrong Example: \n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND k = 5\nORDER BY s.stock_id;\n```\n✅ Correct Example:\n```sql\nSELECT s.stock_id, s.symbol\nFROM stocks s\nJOIN exchanges e ON s.exchange_id = e.exchange_id\nWHERE s.sector_embedding MATCH lembed('all-MiniLM-L6-v2', \"Tech industry sector in the USA\")\nAND e.country = 'USA'\nAND s.k = 5\nORDER BY s.stock_id;\n```\n12. ​Avoids runtime errors​​ – Many vector databases (e.g., SQLite with sqlite-vss, pgvector) enforce this requirement strictly.\n13. Only a single 'ORDER BY distance' clause is allowed on vec0 KNN queries, not on other columns.\n***Example of KNN queries of sqlite-vec***\nfirst example(type of vector_embedding is float[384]):\n```sql\nSELECT rowid, distance \nFROM vec_table \nWHERE vector_embedding MATCH lembed(all-MILM-L6-v2,\"vector of sun\")\nORDER BY distance \nLIMIT 1;\n```\n\nsecond example(type of sentence_embedding is float[384]):\n```sql\nselect\n  movie_id,\n  title,\n  genre,\n  num_reviews,\n  mean_rating,\n  distance\nfrom vec_movies\nwhere sentence_embedding match lembed(all-MILM-L6-v2,\"This is a great movie!\")\n  and genre = 'scifi'\n  and num_reviews between 100 and 500\n  and mean_rating > 3.5\n  and k = 5;\n```\n\nthird example(type of vector_embedding is float[384]):\n```sql\nselect rowid, name1, name2, age, vec_to_json\nfrom v\nwhere vector_embedding match lembed(all-MILM-L6-v2,\"aaa and xxx are good friends, whose age is 18.\")\n  and k = 1\n  and name1 in ('alex', 'brian', 'craig')\n  and name2 in ('Rick', 'Morty')\n  and age in (21, 18);\n```\n\n**Answer**\nLet's proceed step by step.\n",
  "db_id": "station_weather"
}]