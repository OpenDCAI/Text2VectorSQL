[
  {
    "db_id": "computer_student",
    "sql": "SELECT p_id \nFROM person \nWHERE inPhase_embedding MATCH lembed('all-MiniLM-L6-v2', 'graduate phase') LIMIT 1;",
    "complexity": "Simple",
    "column_count": 1,
    "rows": 1,
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT p_id \nFROM person \nWHERE inPhase_embedding MATCH lembed('all-MiniLM-L6-v2', 'graduate phase') LIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "computer_student",
    "sql": "SELECT p.p_id, p.professor, c.courseLevel\nFROM person p\nJOIN advisedBy a ON p.p_id = a.p_id\nJOIN taughtBy t ON a.p_id_dummy = t.p_id\nJOIN course c ON t.course_id = c.course_id\nWHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") \nAND k = 5\nORDER BY distance;",
    "complexity": "Moderate",
    "column_count": 3,
    "rows": 0,
    "style": "Formal",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Formal Style**\n   - Uses standard grammar and vocabulary.\n   - Example: Find all students older than 18 years and return their home addresses.\n   - Vector Example: Find the three articles most closely related to Stable Diffusion and return them.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT p.p_id, p.professor, c.courseLevel\nFROM person p\nJOIN advisedBy a ON p.p_id = a.p_id\nJOIN taughtBy t ON a.p_id_dummy = t.p_id\nJOIN course c ON t.course_id = c.course_id\nWHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Computer Science\") \nAND k = 5\nORDER BY distance;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "computer_student",
    "sql": "SELECT p_id\nFROM person\nWHERE hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"a leading research position\")\nLIMIT 1;",
    "complexity": "Simple",
    "column_count": 1,
    "rows": 1,
    "style": "Descriptive",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Descriptive Style**\n   - Uses detailed descriptions with contextual information.\n   - Example: I want to know the names and home addresses of all students older than 18.\n   - Vector Example: I need to find articles that most closely related to Stable Diffusion, returning the top 3 matches sorted by cosine similarity.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT p_id\nFROM person\nWHERE hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"a leading research position\")\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "computer_student",
    "sql": "SELECT p_id, professor, distance\nFROM person\nWHERE hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', 'professor position')\nLIMIT 3;",
    "complexity": "Simple",
    "column_count": 3,
    "rows": 3,
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT p_id, professor, distance\nFROM person\nWHERE hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', 'professor position')\nLIMIT 3;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "computer_student",
    "sql": "SELECT p.p_id, t.course_id\nFROM person p\nJOIN taughtBy t ON p.p_id = t.p_id\nWHERE p.professor = 1\n  AND p.inPhase_embedding MATCH lembed('all-MiniLM-L6-v2', \"advanced research phase\")\n  AND p.k = 5;",
    "complexity": "Moderate",
    "column_count": 2,
    "rows": 18,
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT p.p_id, t.course_id\nFROM person p\nJOIN taughtBy t ON p.p_id = t.p_id\nWHERE p.professor = 1\n  AND p.inPhase_embedding MATCH lembed('all-MiniLM-L6-v2', \"advanced research phase\")\n  AND p.k = 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "computer_student",
    "sql": "WITH CourseData AS (\n    SELECT \n        c.course_id, \n        c.courseLevel, \n        t.p_id\n    FROM \n        course c\n    JOIN \n        taughtBy t ON c.course_id = t.course_id\n),\nPersonData AS (\n    SELECT \n        p.p_id,\n        p.professor,\n        p.student,\n        p.hasPosition\n    FROM \n        person p\n    WHERE \n        p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5\n)\nSELECT \n    pd.p_id, \n    pd.professor, \n    pd.student, \n    pd.hasPosition, \n    cd.courseLevel\nFROM \n    PersonData pd\nJOIN \n    CourseData cd ON pd.p_id = cd.p_id\nORDER BY \n    pd.p_id;",
    "complexity": "Complex",
    "column_count": 5,
    "rows": 16,
    "style": "Imperative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Imperative Style**\n   - Uses command or directive sentences.\n   - Example: Could you please gather all the students who are older than 18? I really need to know their names and where they live!\n   - Vector Example: Please find the three articles most closely related to Stable Diffusion and return their name.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH CourseData AS (\n    SELECT \n        c.course_id, \n        c.courseLevel, \n        t.p_id\n    FROM \n        course c\n    JOIN \n        taughtBy t ON c.course_id = t.course_id\n),\nPersonData AS (\n    SELECT \n        p.p_id,\n        p.professor,\n        p.student,\n        p.hasPosition\n    FROM \n        person p\n    WHERE \n        p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor of Mathematics\") LIMIT 5\n)\nSELECT \n    pd.p_id, \n    pd.professor, \n    pd.student, \n    pd.hasPosition, \n    cd.courseLevel\nFROM \n    PersonData pd\nJOIN \n    CourseData cd ON pd.p_id = cd.p_id\nORDER BY \n    pd.p_id;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "computer_student",
    "sql": "SELECT p.professor\nFROM person p\nJOIN taughtBy t ON p.p_id = t.p_id\nJOIN course c ON t.course_id = c.course_id\nWHERE p.yearsInProgram_embedding MATCH lembed('all-MiniLM-L6-v2', \"0 to 1 years in program\") AND k = 5\nAND c.courseLevel = 'Undergraduate';",
    "complexity": "Moderate",
    "column_count": 1,
    "rows": 0,
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT p.professor\nFROM person p\nJOIN taughtBy t ON p.p_id = t.p_id\nJOIN course c ON t.course_id = c.course_id\nWHERE p.yearsInProgram_embedding MATCH lembed('all-MiniLM-L6-v2', \"0 to 1 years in program\") AND k = 5\nAND c.courseLevel = 'Undergraduate';\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "law_episode",
    "sql": "SELECT episode_id\nFROM Episode\nWHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"A gripping legal drama unfolds as a new assistant DA tackles complex cases involving ethics and justice.\")\nLIMIT 1;",
    "complexity": "Simple",
    "column_count": 1,
    "rows": 1,
    "style": "Multi-turn Dialogue",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Multi-turn Dialogue Style**\n    - This involves a dialogue to clarify the user's query needs.\n    - Example: [{\"User\": \"I want to query some student information.\"}, {\"Assistant\": \"Which students' information would you like to query?\"}, {\"User\": \"Students older than 18.\"}, {\"Assistant\": \"What other information would you like to know about them?\"}, {\"User\": \"Names and addresses.\"}, {\"Assistant\": \"Is there anything else you need?\"}, {\"User\": \"No.\"}, {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}]\n    - Vector Example: \n      User: \"I'm looking for some articles.\"\n      Assistant: \"How many articles would you like to find and What field of paper are you looking for?\"\n      User: \"About 3, and they are related to Stable Diffusion.\"\n      Assistant: \"I'll search for 3 articles that most closely related to Stable Diffusion.\"\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT episode_id\nFROM Episode\nWHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"A gripping legal drama unfolds as a new assistant DA tackles complex cases involving ethics and justice.\")\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Dialogue:** Create a conversation between the User and the Assistant based on the SQL query and its explanation, ensuring vector operations are properly discussed.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the dialogue naturally covers:\n   - The purpose of the vector search;\n   - How many similar items are needed (LIMIT);\n   - What the target vector represents;\n   - Any additional filtering or sorting requirements.\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Multi-turn dialogue covering vector search details)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Create natural dialogue that explores vector search parameters\n4. Ensure LIMIT, target vector and distance sorting are discussed\n",
    "contains_vector": true
  },
  {
    "db_id": "computer_student",
    "sql": "WITH FilteredProfessors AS (\n    SELECT p_id, yearsInProgram_embedding, distance\n    FROM person \n    WHERE professor = 1\n      AND yearsInProgram_embedding MATCH lembed('all-MiniLM-L6-v2', \"3 years in the program\")\n      AND k = 5\n    ORDER BY distance\n)\nSELECT fp.p_id, c.courseLevel\nFROM FilteredProfessors fp\nJOIN taughtBy tb ON fp.p_id = tb.p_id\nJOIN course c ON tb.course_id = c.course_id\nORDER BY fp.distance\nLIMIT 10;",
    "complexity": "Complex",
    "column_count": 2,
    "rows": 10,
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH FilteredProfessors AS (\n    SELECT p_id, yearsInProgram_embedding, distance\n    FROM person \n    WHERE professor = 1\n      AND yearsInProgram_embedding MATCH lembed('all-MiniLM-L6-v2', \"3 years in the program\")\n      AND k = 5\n    ORDER BY distance\n)\nSELECT fp.p_id, c.courseLevel\nFROM FilteredProfessors fp\nJOIN taughtBy tb ON fp.p_id = tb.p_id\nJOIN course c ON tb.course_id = c.course_id\nORDER BY fp.distance\nLIMIT 10;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "law_episode",
    "sql": "SELECT e.title\nFROM Episode e\nJOIN Episode_info ei ON e.episode_id = ei.key\nWHERE e.summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"A gripping tale of crime investigation and justice\")\n  AND e.series = 'Example Series'\n  AND e.k = 5;",
    "complexity": "Moderate",
    "column_count": 1,
    "rows": 0,
    "style": "Vague",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Vague Style**\n   - Includes ambiguous vocabulary requiring inference.\n   - Example: What are the names and addresses of those older students? (External Knowledge: 'older students' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with Stable Diffusion. (External Knowledge: 'a few' refers to vector similarity search with k=3 limit)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT e.title\nFROM Episode e\nJOIN Episode_info ei ON e.episode_id = ei.key\nWHERE e.summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"A gripping tale of crime investigation and justice\")\n  AND e.series = 'Example Series'\n  AND e.k = 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "computer_student",
    "sql": "SELECT p_id, hasPosition\nFROM person\nWHERE hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"0\")\nLIMIT 5;",
    "complexity": "Simple",
    "column_count": 2,
    "rows": 5,
    "style": "Formal",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Formal Style**\n   - Uses standard grammar and vocabulary.\n   - Example: Find all students older than 18 years and return their home addresses.\n   - Vector Example: Find the three articles most closely related to Stable Diffusion and return them.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT p_id, hasPosition\nFROM person\nWHERE hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"0\")\nLIMIT 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "computer_student",
    "sql": "WITH FilteredPersons AS (\n  SELECT p_id, professor, student, hasPosition, inPhase, yearsInProgram, distance\n  FROM person\n  WHERE hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"professor teaching advanced courses\") AND k = 5\n)\n\n\nSELECT c.courseLevel\nFROM course c\nJOIN taughtBy tb ON c.course_id = tb.course_id\nJOIN FilteredPersons fp ON tb.p_id = fp.p_id\nORDER BY fp.distance;",
    "complexity": "Complex",
    "column_count": 1,
    "rows": 18,
    "style": "Formal",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Formal Style**\n   - Uses standard grammar and vocabulary.\n   - Example: Find all students older than 18 years and return their home addresses.\n   - Vector Example: Find the three articles most closely related to Stable Diffusion and return them.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH FilteredPersons AS (\n  SELECT p_id, professor, student, hasPosition, inPhase, yearsInProgram, distance\n  FROM person\n  WHERE hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"professor teaching advanced courses\") AND k = 5\n)\n\n\nSELECT c.courseLevel\nFROM course c\nJOIN taughtBy tb ON c.course_id = tb.course_id\nJOIN FilteredPersons fp ON tb.p_id = fp.p_id\nORDER BY fp.distance;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "law_episode",
    "sql": "WITH SimilarEpisodes AS (\n  SELECT episode_id, title, air_date, distance\n  FROM Episode\n  WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"A narrative involving politics and corruption\") AND k = 5\n)\nSELECT se.title\nFROM SimilarEpisodes se\nJOIN Vote v ON se.episode_id = v.episode_id\nWHERE v.stars > 4\nORDER BY se.distance;",
    "complexity": "Complex",
    "column_count": 1,
    "rows": 30,
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH SimilarEpisodes AS (\n  SELECT episode_id, title, air_date, distance\n  FROM Episode\n  WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"A narrative involving politics and corruption\") AND k = 5\n)\nSELECT se.title\nFROM SimilarEpisodes se\nJOIN Vote v ON se.episode_id = v.episode_id\nWHERE v.stars > 4\nORDER BY se.distance;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "law_episode",
    "sql": "SELECT episode_id\nFROM Episode\nWHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"A gripping tale of mystery and suspense in a small town.\")\nAND k = 1;",
    "complexity": "Simple",
    "column_count": 1,
    "rows": 1,
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT episode_id\nFROM Episode\nWHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"A gripping tale of mystery and suspense in a small town.\")\nAND k = 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "law_episode",
    "sql": "SELECT episode_id, title\nFROM Episode\nWHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"A legal drama about an investigation into a conspiracy involving unethical medical practices\") \nLIMIT 1;",
    "complexity": "Simple",
    "column_count": 2,
    "rows": 1,
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT episode_id, title\nFROM Episode\nWHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"A legal drama about an investigation into a conspiracy involving unethical medical practices\") \nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "food_inspection_2",
    "sql": "SELECT point_id, Description, category, distance\nFROM inspection_point\nWHERE Description_embedding MATCH lembed('all-MiniLM-L6-v2', \"Properly labeled food with no spoilage\") \nAND k = 3;",
    "complexity": "Simple",
    "column_count": 4,
    "rows": 3,
    "style": "Multi-turn Dialogue",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Multi-turn Dialogue Style**\n    - This involves a dialogue to clarify the user's query needs.\n    - Example: [{\"User\": \"I want to query some student information.\"}, {\"Assistant\": \"Which students' information would you like to query?\"}, {\"User\": \"Students older than 18.\"}, {\"Assistant\": \"What other information would you like to know about them?\"}, {\"User\": \"Names and addresses.\"}, {\"Assistant\": \"Is there anything else you need?\"}, {\"User\": \"No.\"}, {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}]\n    - Vector Example: \n      User: \"I'm looking for some articles.\"\n      Assistant: \"How many articles would you like to find and What field of paper are you looking for?\"\n      User: \"About 3, and they are related to Stable Diffusion.\"\n      Assistant: \"I'll search for 3 articles that most closely related to Stable Diffusion.\"\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT point_id, Description, category, distance\nFROM inspection_point\nWHERE Description_embedding MATCH lembed('all-MiniLM-L6-v2', \"Properly labeled food with no spoilage\") \nAND k = 3;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Dialogue:** Create a conversation between the User and the Assistant based on the SQL query and its explanation, ensuring vector operations are properly discussed.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the dialogue naturally covers:\n   - The purpose of the vector search;\n   - How many similar items are needed (LIMIT);\n   - What the target vector represents;\n   - Any additional filtering or sorting requirements.\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Multi-turn dialogue covering vector search details)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Create natural dialogue that explores vector search parameters\n4. Ensure LIMIT, target vector and distance sorting are discussed\n",
    "contains_vector": true
  },
  {
    "db_id": "food_inspection_2",
    "sql": "SELECT point_id\nFROM inspection_point\nWHERE Description_embedding MATCH lembed('all-MiniLM-L6-v2', \"Safe food storage conditions and proper labeling\") \nLIMIT 1;",
    "complexity": "Simple",
    "column_count": 1,
    "rows": 1,
    "style": "Formal",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Formal Style**\n   - Uses standard grammar and vocabulary.\n   - Example: Find all students older than 18 years and return their home addresses.\n   - Vector Example: Find the three articles most closely related to Stable Diffusion and return them.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT point_id\nFROM inspection_point\nWHERE Description_embedding MATCH lembed('all-MiniLM-L6-v2', \"Safe food storage conditions and proper labeling\") \nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "computer_student",
    "sql": "SELECT p.p_id\nFROM person p\nJOIN taughtBy t ON p.p_id = t.p_id\nJOIN course c ON t.course_id = c.course_id\nWHERE p.inPhase_embedding MATCH lembed('all-MiniLM-L6-v2', \"midphase\")\nAND p.k = 5;",
    "complexity": "Moderate",
    "column_count": 1,
    "rows": 0,
    "style": "Multi-turn Dialogue",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Multi-turn Dialogue Style**\n    - This involves a dialogue to clarify the user's query needs.\n    - Example: [{\"User\": \"I want to query some student information.\"}, {\"Assistant\": \"Which students' information would you like to query?\"}, {\"User\": \"Students older than 18.\"}, {\"Assistant\": \"What other information would you like to know about them?\"}, {\"User\": \"Names and addresses.\"}, {\"Assistant\": \"Is there anything else you need?\"}, {\"User\": \"No.\"}, {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}]\n    - Vector Example: \n      User: \"I'm looking for some articles.\"\n      Assistant: \"How many articles would you like to find and What field of paper are you looking for?\"\n      User: \"About 3, and they are related to Stable Diffusion.\"\n      Assistant: \"I'll search for 3 articles that most closely related to Stable Diffusion.\"\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT p.p_id\nFROM person p\nJOIN taughtBy t ON p.p_id = t.p_id\nJOIN course c ON t.course_id = c.course_id\nWHERE p.inPhase_embedding MATCH lembed('all-MiniLM-L6-v2', \"midphase\")\nAND p.k = 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Dialogue:** Create a conversation between the User and the Assistant based on the SQL query and its explanation, ensuring vector operations are properly discussed.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the dialogue naturally covers:\n   - The purpose of the vector search;\n   - How many similar items are needed (LIMIT);\n   - What the target vector represents;\n   - Any additional filtering or sorting requirements.\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Multi-turn dialogue covering vector search details)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Create natural dialogue that explores vector search parameters\n4. Ensure LIMIT, target vector and distance sorting are discussed\n",
    "contains_vector": true
  },
  {
    "db_id": "computer_student",
    "sql": "SELECT p.p_id\nFROM person p\nJOIN taughtBy t ON p.p_id = t.p_id\nWHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"professor position\") AND p.k = 5;",
    "complexity": "Moderate",
    "column_count": 1,
    "rows": 18,
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT p.p_id\nFROM person p\nJOIN taughtBy t ON p.p_id = t.p_id\nWHERE p.hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"professor position\") AND p.k = 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "world",
    "sql": "SELECT\n  City.Name AS CityName,\n  Country.Name AS CountryName,\n  Country.Continent,\n  City.Population,\n  distance\nFROM\n  City\nJOIN\n  Country ON City.CountryCode = Country.Code\nWHERE\n  Country.GovernmentForm_embedding MATCH lembed('all-MiniLM-L6-v2', \"Islamic Republic\") AND k = 3\n  AND City.Population > 500000\nORDER BY\n  distance\nLIMIT 10;",
    "complexity": "Moderate",
    "column_count": 5,
    "rows": 10,
    "style": "Multi-turn Dialogue",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Multi-turn Dialogue Style**\n    - This involves a dialogue to clarify the user's query needs.\n    - Example: [{\"User\": \"I want to query some student information.\"}, {\"Assistant\": \"Which students' information would you like to query?\"}, {\"User\": \"Students older than 18.\"}, {\"Assistant\": \"What other information would you like to know about them?\"}, {\"User\": \"Names and addresses.\"}, {\"Assistant\": \"Is there anything else you need?\"}, {\"User\": \"No.\"}, {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}]\n    - Vector Example: \n      User: \"I'm looking for some articles.\"\n      Assistant: \"How many articles would you like to find and What field of paper are you looking for?\"\n      User: \"About 3, and they are related to Stable Diffusion.\"\n      Assistant: \"I'll search for 3 articles that most closely related to Stable Diffusion.\"\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT\n  City.Name AS CityName,\n  Country.Name AS CountryName,\n  Country.Continent,\n  City.Population,\n  distance\nFROM\n  City\nJOIN\n  Country ON City.CountryCode = Country.Code\nWHERE\n  Country.GovernmentForm_embedding MATCH lembed('all-MiniLM-L6-v2', \"Islamic Republic\") AND k = 3\n  AND City.Population > 500000\nORDER BY\n  distance\nLIMIT 10;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Dialogue:** Create a conversation between the User and the Assistant based on the SQL query and its explanation, ensuring vector operations are properly discussed.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the dialogue naturally covers:\n   - The purpose of the vector search;\n   - How many similar items are needed (LIMIT);\n   - What the target vector represents;\n   - Any additional filtering or sorting requirements.\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Multi-turn dialogue covering vector search details)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Create natural dialogue that explores vector search parameters\n4. Ensure LIMIT, target vector and distance sorting are discussed\n",
    "contains_vector": true
  },
  {
    "db_id": "world",
    "sql": "SELECT Name \nFROM Country \nWHERE GovernmentForm_embedding MATCH lembed('all-MiniLM-L6-v2', \"Republic\") AND k = 5;",
    "complexity": "Highly Complex",
    "column_count": 1,
    "rows": 5,
    "style": "Vague",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Vague Style**\n   - Includes ambiguous vocabulary requiring inference.\n   - Example: What are the names and addresses of those older students? (External Knowledge: 'older students' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with Stable Diffusion. (External Knowledge: 'a few' refers to vector similarity search with k=3 limit)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT Name \nFROM Country \nWHERE GovernmentForm_embedding MATCH lembed('all-MiniLM-L6-v2', \"Republic\") AND k = 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "world",
    "sql": "WITH GovernmentFormCountries AS (\n  SELECT Code, Name\n  FROM Country\n  WHERE GovernmentForm_embedding MATCH lembed('all-MiniLM-L6-v2', 'Republic')\n  AND k = 5\n)\n\n\nSELECT c.Name\nFROM City c\nJOIN GovernmentFormCountries gfc ON c.CountryCode = gfc.Code\nWHERE c.Population > 1000000\nORDER BY c.Population DESC\nLIMIT 1;",
    "complexity": "Complex",
    "column_count": 1,
    "rows": 1,
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH GovernmentFormCountries AS (\n  SELECT Code, Name\n  FROM Country\n  WHERE GovernmentForm_embedding MATCH lembed('all-MiniLM-L6-v2', 'Republic')\n  AND k = 5\n)\n\n\nSELECT c.Name\nFROM City c\nJOIN GovernmentFormCountries gfc ON c.CountryCode = gfc.Code\nWHERE c.Population > 1000000\nORDER BY c.Population DESC\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "human_resources",
    "sql": "SELECT e.ssn\nFROM employee e\nJOIN location l ON e.locationID = l.locationID\nWHERE e.performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"Exceeds expectations in project management and teamwork\") AND e.k = 1;",
    "complexity": "Moderate",
    "column_count": 1,
    "rows": 1,
    "style": "Metaphorical",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Metaphorical Style**\n   - Uses metaphors or metaphorical expressions.\n   - Example: Find the names and addresses of those who have reached adulthood. (External Knowledge: 'reached adulthood' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with SD in ai. (External Knowledge: 'SD in ai' refers to Stable Diffusion)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT e.ssn\nFROM employee e\nJOIN location l ON e.locationID = l.locationID\nWHERE e.performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"Exceeds expectations in project management and teamwork\") AND e.k = 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "human_resources",
    "sql": "SELECT e.firstname\nFROM employee e\nJOIN position p ON e.positionID = p.positionID\nWHERE e.performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"Highly effective performer with excellent leadership skills\") \nAND p.educationrequired = \"4 year degree\"\nAND e.k = 3;",
    "complexity": "Moderate",
    "column_count": 1,
    "rows": 3,
    "style": "Descriptive",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Descriptive Style**\n   - Uses detailed descriptions with contextual information.\n   - Example: I want to know the names and home addresses of all students older than 18.\n   - Vector Example: I need to find articles that most closely related to Stable Diffusion, returning the top 3 matches sorted by cosine similarity.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT e.firstname\nFROM employee e\nJOIN position p ON e.positionID = p.positionID\nWHERE e.performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"Highly effective performer with excellent leadership skills\") \nAND p.educationrequired = \"4 year degree\"\nAND e.k = 3;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "computer_student",
    "sql": "SELECT p_id, distance\nFROM person\nWHERE hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor in senior level\") \nLIMIT 5;",
    "complexity": "Simple",
    "column_count": 2,
    "rows": 5,
    "style": "Formal",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Formal Style**\n   - Uses standard grammar and vocabulary.\n   - Example: Find all students older than 18 years and return their home addresses.\n   - Vector Example: Find the three articles most closely related to Stable Diffusion and return them.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT p_id, distance\nFROM person\nWHERE hasPosition_embedding MATCH lembed('all-MiniLM-L6-v2', \"Professor in senior level\") \nLIMIT 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "human_resources",
    "sql": "SELECT ssn, performance\nFROM employee\nWHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"Excellent performance in software development\") \nAND k = 5;",
    "complexity": "Simple",
    "column_count": 2,
    "rows": 5,
    "style": "Imperative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Imperative Style**\n   - Uses command or directive sentences.\n   - Example: Could you please gather all the students who are older than 18? I really need to know their names and where they live!\n   - Vector Example: Please find the three articles most closely related to Stable Diffusion and return their name.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT ssn, performance\nFROM employee\nWHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"Excellent performance in software development\") \nAND k = 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "human_resources",
    "sql": "SELECT positiontitle \nFROM position \nWHERE educationrequired_embedding MATCH lembed('all-MiniLM-L6-v2', \"Bachelor's degree in computer science\") \nLIMIT 1;",
    "complexity": "Simple",
    "column_count": 1,
    "rows": 1,
    "style": "Vague",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Vague Style**\n   - Includes ambiguous vocabulary requiring inference.\n   - Example: What are the names and addresses of those older students? (External Knowledge: 'older students' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with Stable Diffusion. (External Knowledge: 'a few' refers to vector similarity search with k=3 limit)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT positiontitle \nFROM position \nWHERE educationrequired_embedding MATCH lembed('all-MiniLM-L6-v2', \"Bachelor's degree in computer science\") \nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "human_resources",
    "sql": "WITH EmployeePerformance AS (\n  SELECT \n    e.ssn,\n    e.firstname || ' ' || e.lastname AS employee_name,\n    e.performance_embedding,\n    e.locationID,\n    e.positionID,\n    distance AS employee_distance\n  FROM \n    employee e\n  WHERE \n    e.performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"Average performance\") AND e.k = 5\n)\n\nSELECT \n  ep.employee_name,\n  p.positiontitle\nFROM \n  EmployeePerformance ep\nJOIN \n  position p ON ep.positionID = p.positionID\nWHERE \n  p.educationrequired_embedding MATCH lembed('all-MiniLM-L6-v2', \"4 year degree\") AND p.k = 5\nORDER BY \n  ep.employee_distance LIMIT 10;",
    "complexity": "Highly Complex",
    "column_count": 2,
    "rows": 5,
    "style": "Concise",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Concise Style**\n   - Use short sentences.\n   - Example: Students older than 18, return their names and addresses.\n   - Vector Example: Top 3 related articles to Stable Diffusion.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH EmployeePerformance AS (\n  SELECT \n    e.ssn,\n    e.firstname || ' ' || e.lastname AS employee_name,\n    e.performance_embedding,\n    e.locationID,\n    e.positionID,\n    distance AS employee_distance\n  FROM \n    employee e\n  WHERE \n    e.performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"Average performance\") AND e.k = 5\n)\n\nSELECT \n  ep.employee_name,\n  p.positiontitle\nFROM \n  EmployeePerformance ep\nJOIN \n  position p ON ep.positionID = p.positionID\nWHERE \n  p.educationrequired_embedding MATCH lembed('all-MiniLM-L6-v2', \"4 year degree\") AND p.k = 5\nORDER BY \n  ep.employee_distance LIMIT 10;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "human_resources",
    "sql": "SELECT e.firstname, p.positiontitle, e.distance\nFROM employee e\nJOIN position p ON e.positionID = p.positionID\nWHERE e.performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"Outstanding performance in leadership\")\nAND e.k = 5\nORDER BY e.distance;",
    "complexity": "Moderate",
    "column_count": 3,
    "rows": 5,
    "style": "Descriptive",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Descriptive Style**\n   - Uses detailed descriptions with contextual information.\n   - Example: I want to know the names and home addresses of all students older than 18.\n   - Vector Example: I need to find articles that most closely related to Stable Diffusion, returning the top 3 matches sorted by cosine similarity.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT e.firstname, p.positiontitle, e.distance\nFROM employee e\nJOIN position p ON e.positionID = p.positionID\nWHERE e.performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"Outstanding performance in leadership\")\nAND e.k = 5\nORDER BY e.distance;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "professional_basketball",
    "sql": "SELECT playerID\nFROM awards_players\nWHERE note_embedding MATCH lembed('all-MiniLM-L6-v2', \"Outstanding Player of the Year\") AND k = 5;",
    "complexity": "Simple",
    "column_count": 1,
    "rows": 5,
    "style": "Imperative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Imperative Style**\n   - Uses command or directive sentences.\n   - Example: Could you please gather all the students who are older than 18? I really need to know their names and where they live!\n   - Vector Example: Please find the three articles most closely related to Stable Diffusion and return their name.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT playerID\nFROM awards_players\nWHERE note_embedding MATCH lembed('all-MiniLM-L6-v2', \"Outstanding Player of the Year\") AND k = 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "professional_basketball",
    "sql": "WITH PlayerAwards AS (\n  SELECT playerID, award, year, note_embedding, distance\n  FROM awards_players\n  WHERE note_embedding MATCH lembed('all-MiniLM-L6-v2', 'Excellence in sports') \n  AND k = 10\n),\nCoachAwards AS (\n  SELECT coachID, award, year, note_embedding, distance\n  FROM awards_coaches\n  WHERE note_embedding MATCH lembed('all-MiniLM-L6-v2', 'Outstanding coaching') \n  AND k = 10\n),\nCommonAwards AS (\n  SELECT pa.playerID, pa.award AS player_award, ca.award AS coach_award, pa.distance AS player_distance, ca.distance AS coach_distance\n  FROM PlayerAwards pa\n  JOIN CoachAwards ca ON pa.year = ca.year\n  WHERE pa.award = ca.award\n)\nSELECT COUNT(*) AS common_award_count\nFROM CommonAwards;",
    "complexity": "Highly Complex",
    "column_count": 1,
    "rows": 1,
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH PlayerAwards AS (\n  SELECT playerID, award, year, note_embedding, distance\n  FROM awards_players\n  WHERE note_embedding MATCH lembed('all-MiniLM-L6-v2', 'Excellence in sports') \n  AND k = 10\n),\nCoachAwards AS (\n  SELECT coachID, award, year, note_embedding, distance\n  FROM awards_coaches\n  WHERE note_embedding MATCH lembed('all-MiniLM-L6-v2', 'Outstanding coaching') \n  AND k = 10\n),\nCommonAwards AS (\n  SELECT pa.playerID, pa.award AS player_award, ca.award AS coach_award, pa.distance AS player_distance, ca.distance AS coach_distance\n  FROM PlayerAwards pa\n  JOIN CoachAwards ca ON pa.year = ca.year\n  WHERE pa.award = ca.award\n)\nSELECT COUNT(*) AS common_award_count\nFROM CommonAwards;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "human_resources",
    "sql": "SELECT positionID\nFROM position\nWHERE educationrequired_embedding MATCH lembed('all-MiniLM-L6-v2', \"Bachelor's degree\")\nLIMIT 1;",
    "complexity": "Simple",
    "column_count": 1,
    "rows": 1,
    "style": "Concise",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Concise Style**\n   - Use short sentences.\n   - Example: Students older than 18, return their names and addresses.\n   - Vector Example: Top 3 related articles to Stable Diffusion.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT positionID\nFROM position\nWHERE educationrequired_embedding MATCH lembed('all-MiniLM-L6-v2', \"Bachelor's degree\")\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "professional_basketball",
    "sql": "WITH RecentPlayers AS (\n  SELECT playerID, lastName, firstName\n  FROM players\n  WHERE lastseason >= 2020\n)\n\nSELECT ap.playerID, p.lastName, ap.distance\nFROM awards_players ap\nJOIN RecentPlayers p ON ap.playerID = p.playerID\nWHERE ap.note_embedding MATCH lembed('all-MiniLM-L6-v2', \"Outstanding performance in 2020 season\")\n  AND ap.k = 10\nORDER BY ap.distance;",
    "complexity": "Complex",
    "column_count": 3,
    "rows": 0,
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH RecentPlayers AS (\n  SELECT playerID, lastName, firstName\n  FROM players\n  WHERE lastseason >= 2020\n)\n\nSELECT ap.playerID, p.lastName, ap.distance\nFROM awards_players ap\nJOIN RecentPlayers p ON ap.playerID = p.playerID\nWHERE ap.note_embedding MATCH lembed('all-MiniLM-L6-v2', \"Outstanding performance in 2020 season\")\n  AND ap.k = 10\nORDER BY ap.distance;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "human_resources",
    "sql": "SELECT ssn, distance\nFROM employee\nWHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\")\nLIMIT 1;",
    "complexity": "Simple",
    "column_count": 2,
    "rows": 1,
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT ssn, distance\nFROM employee\nWHERE performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"exceptional performance with leadership skills\")\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "professional_basketball",
    "sql": "SELECT playerID, award \nFROM awards_players \nWHERE note_embedding MATCH lembed('all-MiniLM-L6-v2', \"notable achievement in basketball\") \nLIMIT 5;",
    "complexity": "Simple",
    "column_count": 2,
    "rows": 5,
    "style": "Vague",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Vague Style**\n   - Includes ambiguous vocabulary requiring inference.\n   - Example: What are the names and addresses of those older students? (External Knowledge: 'older students' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with Stable Diffusion. (External Knowledge: 'a few' refers to vector similarity search with k=3 limit)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT playerID, award \nFROM awards_players \nWHERE note_embedding MATCH lembed('all-MiniLM-L6-v2', \"notable achievement in basketball\") \nLIMIT 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "human_resources",
    "sql": "SELECT e.firstname\nFROM employee e\nJOIN position p ON e.positionID = p.positionID\nWHERE e.performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"Excellent\")\nAND p.positiontitle = 'Software Engineer'\nAND e.k = 5;",
    "complexity": "Moderate",
    "column_count": 1,
    "rows": 0,
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT e.firstname\nFROM employee e\nJOIN position p ON e.positionID = p.positionID\nWHERE e.performance_embedding MATCH lembed('all-MiniLM-L6-v2', \"Excellent\")\nAND p.positiontitle = 'Software Engineer'\nAND e.k = 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "professional_basketball",
    "sql": "SELECT ap.playerID, ap.award, distance\nFROM awards_players ap\nJOIN player_allstar pa ON ap.playerID = pa.playerID\nWHERE ap.note_embedding MATCH lembed('all-MiniLM-L6-v2', \"outstanding performance award\") AND ap.k=5;",
    "complexity": "Moderate",
    "column_count": 3,
    "rows": 27,
    "style": "Concise",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Concise Style**\n   - Use short sentences.\n   - Example: Students older than 18, return their names and addresses.\n   - Vector Example: Top 3 related articles to Stable Diffusion.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT ap.playerID, ap.award, distance\nFROM awards_players ap\nJOIN player_allstar pa ON ap.playerID = pa.playerID\nWHERE ap.note_embedding MATCH lembed('all-MiniLM-L6-v2', \"outstanding performance award\") AND ap.k=5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "professional_basketball",
    "sql": "SELECT playerID \nFROM awards_players \nWHERE note_embedding MATCH lembed('all-MiniLM-L6-v2', \"Outstanding performance in 2020 league\") LIMIT 1;",
    "complexity": "Simple",
    "column_count": 1,
    "rows": 1,
    "style": "Concise",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Concise Style**\n   - Use short sentences.\n   - Example: Students older than 18, return their names and addresses.\n   - Vector Example: Top 3 related articles to Stable Diffusion.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT playerID \nFROM awards_players \nWHERE note_embedding MATCH lembed('all-MiniLM-L6-v2', \"Outstanding performance in 2020 league\") LIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "food_inspection_2",
    "sql": "SELECT violation.inspection_id, violation.fine, distance\nFROM violation\nWHERE inspector_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"Label all containers\")\nAND k = 5;",
    "complexity": "Simple",
    "column_count": 3,
    "rows": 5,
    "style": "Descriptive",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Descriptive Style**\n   - Uses detailed descriptions with contextual information.\n   - Example: I want to know the names and home addresses of all students older than 18.\n   - Vector Example: I need to find articles that most closely related to Stable Diffusion, returning the top 3 matches sorted by cosine similarity.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT violation.inspection_id, violation.fine, distance\nFROM violation\nWHERE inspector_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"Label all containers\")\nAND k = 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "professional_basketball",
    "sql": "WITH PlayerAwards AS (\n    SELECT \n        ap.playerID, \n        ap.award, \n        ap.year, \n        p.firstName || ' ' || p.lastName AS fullName, \n        pt.tmID,\n        distance\n    FROM \n        awards_players ap\n    JOIN \n        players p ON ap.playerID = p.playerID\n    JOIN \n        players_teams pt ON ap.playerID = pt.playerID AND ap.year = pt.year\n    WHERE \n        ap.year = 2023\n        AND ap.note_embedding MATCH lembed('all-MiniLM-L6-v2', \"Excellence in performance\") \n        AND ap.k = 10\n),\nCoachAwards AS (\n    SELECT \n        ac.coachID, \n        ac.award, \n        ac.year, \n        c.tmID,\n        distance\n    FROM \n        awards_coaches ac\n    JOIN \n        coaches c ON ac.coachID = c.coachID AND ac.year = c.year\n    WHERE \n        ac.year = 2023\n        AND ac.note_embedding MATCH lembed('all-MiniLM-L6-v2', \"Outstanding leadership\") \n        AND ac.k = 5\n),\nTeamPerformance AS (\n    SELECT \n        ta.tmID,\n        ta.year,\n        SUM(ta.won) as total_wins,\n        SUM(ta.o_pts) as total_points\n    FROM \n        teams ta\n    WHERE \n        ta.year = 2023\n    GROUP BY \n        ta.tmID, ta.year\n)\nSELECT \n    pa.fullName AS AwardedIndividual, \n    pa.award AS PlayerAward, \n    ca.award AS CoachAward, \n    tp.total_wins, \n    tp.total_points\nFROM \n    PlayerAwards pa\nLEFT JOIN \n    CoachAwards ca ON pa.tmID = ca.tmID AND pa.year = ca.year\nJOIN \n    TeamPerformance tp ON pa.tmID = tp.tmID\nORDER BY \n    tp.total_wins DESC, tp.total_points DESC;",
    "complexity": "Highly Complex",
    "column_count": 5,
    "rows": 0,
    "style": "Formal",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Formal Style**\n   - Uses standard grammar and vocabulary.\n   - Example: Find all students older than 18 years and return their home addresses.\n   - Vector Example: Find the three articles most closely related to Stable Diffusion and return them.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH PlayerAwards AS (\n    SELECT \n        ap.playerID, \n        ap.award, \n        ap.year, \n        p.firstName || ' ' || p.lastName AS fullName, \n        pt.tmID,\n        distance\n    FROM \n        awards_players ap\n    JOIN \n        players p ON ap.playerID = p.playerID\n    JOIN \n        players_teams pt ON ap.playerID = pt.playerID AND ap.year = pt.year\n    WHERE \n        ap.year = 2023\n        AND ap.note_embedding MATCH lembed('all-MiniLM-L6-v2', \"Excellence in performance\") \n        AND ap.k = 10\n),\nCoachAwards AS (\n    SELECT \n        ac.coachID, \n        ac.award, \n        ac.year, \n        c.tmID,\n        distance\n    FROM \n        awards_coaches ac\n    JOIN \n        coaches c ON ac.coachID = c.coachID AND ac.year = c.year\n    WHERE \n        ac.year = 2023\n        AND ac.note_embedding MATCH lembed('all-MiniLM-L6-v2', \"Outstanding leadership\") \n        AND ac.k = 5\n),\nTeamPerformance AS (\n    SELECT \n        ta.tmID,\n        ta.year,\n        SUM(ta.won) as total_wins,\n        SUM(ta.o_pts) as total_points\n    FROM \n        teams ta\n    WHERE \n        ta.year = 2023\n    GROUP BY \n        ta.tmID, ta.year\n)\nSELECT \n    pa.fullName AS AwardedIndividual, \n    pa.award AS PlayerAward, \n    ca.award AS CoachAward, \n    tp.total_wins, \n    tp.total_points\nFROM \n    PlayerAwards pa\nLEFT JOIN \n    CoachAwards ca ON pa.tmID = ca.tmID AND pa.year = ca.year\nJOIN \n    TeamPerformance tp ON pa.tmID = tp.tmID\nORDER BY \n    tp.total_wins DESC, tp.total_points DESC;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "food_inspection_2",
    "sql": "WITH recent_inspections AS (\n    SELECT i.inspection_id, i.inspection_date, i.license_no\n    FROM inspection i\n    WHERE i.inspection_date > DATE('now', '-1 year')\n),\nmatched_violations AS (\n    SELECT v.inspection_id, v.distance\n    FROM violation v\n    JOIN recent_inspections ri ON v.inspection_id = ri.inspection_id\n    WHERE v.inspector_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"Improper storage and labeling of food items\") AND k = 5\n    ORDER BY distance\n),\nestablishment_details AS (\n    SELECT e.dba_name, e.address, e.city, e.state, e.zip\n    FROM establishment e\n    JOIN matched_violations mv ON e.license_no = mv.inspection_id\n)\nSELECT ed.dba_name\nFROM establishment_details ed;",
    "complexity": "Complex",
    "column_count": 1,
    "rows": 0,
    "style": "Metaphorical",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Metaphorical Style**\n   - Uses metaphors or metaphorical expressions.\n   - Example: Find the names and addresses of those who have reached adulthood. (External Knowledge: 'reached adulthood' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with SD in ai. (External Knowledge: 'SD in ai' refers to Stable Diffusion)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH recent_inspections AS (\n    SELECT i.inspection_id, i.inspection_date, i.license_no\n    FROM inspection i\n    WHERE i.inspection_date > DATE('now', '-1 year')\n),\nmatched_violations AS (\n    SELECT v.inspection_id, v.distance\n    FROM violation v\n    JOIN recent_inspections ri ON v.inspection_id = ri.inspection_id\n    WHERE v.inspector_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"Improper storage and labeling of food items\") AND k = 5\n    ORDER BY distance\n),\nestablishment_details AS (\n    SELECT e.dba_name, e.address, e.city, e.state, e.zip\n    FROM establishment e\n    JOIN matched_violations mv ON e.license_no = mv.inspection_id\n)\nSELECT ed.dba_name\nFROM establishment_details ed;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "food_inspection_2",
    "sql": "WITH SimilarInspectionPoints AS (\n  SELECT point_id, distance \n  FROM inspection_point \n  WHERE Description_embedding MATCH lembed('all-MiniLM-L6-v2', \"Proper food storage and labeling\") \n  LIMIT 5\n),\nRelatedViolations AS (\n  SELECT v.inspection_id, v.point_id, v.fine, v.inspector_comment, v.distance\n  FROM violation v\n  JOIN SimilarInspectionPoints sip ON v.point_id = sip.point_id\n  WHERE v.inspector_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"Improper labeling of food items\") \n  AND v.k = 5\n)\nSELECT DISTINCT e.first_name || ' ' || e.last_name AS inspector_name\nFROM RelatedViolations rv\nJOIN inspection i ON rv.inspection_id = i.inspection_id\nJOIN employee e ON i.employee_id = e.employee_id\nJOIN establishment est ON i.license_no = est.license_no\nWHERE est.city = 'Springfield'\nORDER BY rv.distance\nLIMIT 10;",
    "complexity": "Highly Complex",
    "column_count": 1,
    "rows": 0,
    "style": "Multi-turn Dialogue",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Multi-turn Dialogue Style**\n    - This involves a dialogue to clarify the user's query needs.\n    - Example: [{\"User\": \"I want to query some student information.\"}, {\"Assistant\": \"Which students' information would you like to query?\"}, {\"User\": \"Students older than 18.\"}, {\"Assistant\": \"What other information would you like to know about them?\"}, {\"User\": \"Names and addresses.\"}, {\"Assistant\": \"Is there anything else you need?\"}, {\"User\": \"No.\"}, {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}]\n    - Vector Example: \n      User: \"I'm looking for some articles.\"\n      Assistant: \"How many articles would you like to find and What field of paper are you looking for?\"\n      User: \"About 3, and they are related to Stable Diffusion.\"\n      Assistant: \"I'll search for 3 articles that most closely related to Stable Diffusion.\"\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH SimilarInspectionPoints AS (\n  SELECT point_id, distance \n  FROM inspection_point \n  WHERE Description_embedding MATCH lembed('all-MiniLM-L6-v2', \"Proper food storage and labeling\") \n  LIMIT 5\n),\nRelatedViolations AS (\n  SELECT v.inspection_id, v.point_id, v.fine, v.inspector_comment, v.distance\n  FROM violation v\n  JOIN SimilarInspectionPoints sip ON v.point_id = sip.point_id\n  WHERE v.inspector_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"Improper labeling of food items\") \n  AND v.k = 5\n)\nSELECT DISTINCT e.first_name || ' ' || e.last_name AS inspector_name\nFROM RelatedViolations rv\nJOIN inspection i ON rv.inspection_id = i.inspection_id\nJOIN employee e ON i.employee_id = e.employee_id\nJOIN establishment est ON i.license_no = est.license_no\nWHERE est.city = 'Springfield'\nORDER BY rv.distance\nLIMIT 10;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Dialogue:** Create a conversation between the User and the Assistant based on the SQL query and its explanation, ensuring vector operations are properly discussed.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the dialogue naturally covers:\n   - The purpose of the vector search;\n   - How many similar items are needed (LIMIT);\n   - What the target vector represents;\n   - Any additional filtering or sorting requirements.\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Multi-turn dialogue covering vector search details)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Create natural dialogue that explores vector search parameters\n4. Ensure LIMIT, target vector and distance sorting are discussed\n",
    "contains_vector": true
  },
  {
    "db_id": "retails",
    "sql": "SELECT\n  c_custkey,\n  c_name,\n  c_address,\n  c_phone,\n  c_acctbal,\n  c_mktsegment,\n  distance\nFROM customer\nWHERE c_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"slyly regular accounts serve carefully\")\nLIMIT 5;",
    "complexity": "Simple",
    "column_count": 7,
    "rows": 5,
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT\n  c_custkey,\n  c_name,\n  c_address,\n  c_phone,\n  c_acctbal,\n  c_mktsegment,\n  distance\nFROM customer\nWHERE c_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"slyly regular accounts serve carefully\")\nLIMIT 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "retails",
    "sql": "SELECT c_custkey\nFROM customer\nWHERE c_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"slyly regular accounts serve carefully\")\nLIMIT 5;",
    "complexity": "Simple",
    "column_count": 1,
    "rows": 5,
    "style": "Vague",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Vague Style**\n   - Includes ambiguous vocabulary requiring inference.\n   - Example: What are the names and addresses of those older students? (External Knowledge: 'older students' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with Stable Diffusion. (External Knowledge: 'a few' refers to vector similarity search with k=3 limit)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT c_custkey\nFROM customer\nWHERE c_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"slyly regular accounts serve carefully\")\nLIMIT 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "retails",
    "sql": "SELECT c_name \nFROM customer \nWHERE c_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"final express accounts mold slyly\") \nLIMIT 1;",
    "complexity": "Simple",
    "column_count": 1,
    "rows": 1,
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT c_name \nFROM customer \nWHERE c_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"final express accounts mold slyly\") \nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "retails",
    "sql": "SELECT \n  c_custkey, \n  c_name, \n  c_address, \n  c_phone, \n  c_acctbal, \n  distance\nFROM customer\nWHERE c_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"slyly silent platelets nag quickly even\")\nAND k = 5\nORDER BY distance;",
    "complexity": "Simple",
    "column_count": 6,
    "rows": 5,
    "style": "Multi-turn Dialogue",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Multi-turn Dialogue Style**\n    - This involves a dialogue to clarify the user's query needs.\n    - Example: [{\"User\": \"I want to query some student information.\"}, {\"Assistant\": \"Which students' information would you like to query?\"}, {\"User\": \"Students older than 18.\"}, {\"Assistant\": \"What other information would you like to know about them?\"}, {\"User\": \"Names and addresses.\"}, {\"Assistant\": \"Is there anything else you need?\"}, {\"User\": \"No.\"}, {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}]\n    - Vector Example: \n      User: \"I'm looking for some articles.\"\n      Assistant: \"How many articles would you like to find and What field of paper are you looking for?\"\n      User: \"About 3, and they are related to Stable Diffusion.\"\n      Assistant: \"I'll search for 3 articles that most closely related to Stable Diffusion.\"\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT \n  c_custkey, \n  c_name, \n  c_address, \n  c_phone, \n  c_acctbal, \n  distance\nFROM customer\nWHERE c_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"slyly silent platelets nag quickly even\")\nAND k = 5\nORDER BY distance;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Dialogue:** Create a conversation between the User and the Assistant based on the SQL query and its explanation, ensuring vector operations are properly discussed.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the dialogue naturally covers:\n   - The purpose of the vector search;\n   - How many similar items are needed (LIMIT);\n   - What the target vector represents;\n   - Any additional filtering or sorting requirements.\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Multi-turn dialogue covering vector search details)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Create natural dialogue that explores vector search parameters\n4. Ensure LIMIT, target vector and distance sorting are discussed\n",
    "contains_vector": true
  },
  {
    "db_id": "retails",
    "sql": "WITH RecentOrders AS (\n  SELECT o.o_orderkey, o.o_comment\n  FROM orders o\n  WHERE o.o_orderdate > '2023-01-01'\n)\n\nSELECT c.c_name\nFROM customer c\nJOIN RecentOrders ro ON c.c_custkey = ro.o_orderkey\nWHERE c.c_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"accounts mold quickly express\")\n  AND c.k = 5\nORDER BY distance\nLIMIT 1;",
    "complexity": "Complex",
    "column_count": 1,
    "rows": 0,
    "style": "Descriptive",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Descriptive Style**\n   - Uses detailed descriptions with contextual information.\n   - Example: I want to know the names and home addresses of all students older than 18.\n   - Vector Example: I need to find articles that most closely related to Stable Diffusion, returning the top 3 matches sorted by cosine similarity.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH RecentOrders AS (\n  SELECT o.o_orderkey, o.o_comment\n  FROM orders o\n  WHERE o.o_orderdate > '2023-01-01'\n)\n\nSELECT c.c_name\nFROM customer c\nJOIN RecentOrders ro ON c.c_custkey = ro.o_orderkey\nWHERE c.c_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"accounts mold quickly express\")\n  AND c.k = 5\nORDER BY distance\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "retails",
    "sql": "WITH AvgAcctBal AS (\n  SELECT c_mktsegment, AVG(c_acctbal) AS avg_acctbal\n  FROM customer\n  GROUP BY c_mktsegment\n)\nSELECT c.c_custkey, c.distance\nFROM customer c\nJOIN AvgAcctBal a ON c.c_mktsegment = a.c_mktsegment\nWHERE c.c_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"timely deliveries and excellent service\") AND c.k = 5\nORDER BY c.distance;",
    "complexity": "Complex",
    "column_count": 2,
    "rows": 5,
    "style": "Concise",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Concise Style**\n   - Use short sentences.\n   - Example: Students older than 18, return their names and addresses.\n   - Vector Example: Top 3 related articles to Stable Diffusion.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH AvgAcctBal AS (\n  SELECT c_mktsegment, AVG(c_acctbal) AS avg_acctbal\n  FROM customer\n  GROUP BY c_mktsegment\n)\nSELECT c.c_custkey, c.distance\nFROM customer c\nJOIN AvgAcctBal a ON c.c_mktsegment = a.c_mktsegment\nWHERE c.c_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"timely deliveries and excellent service\") AND c.k = 5\nORDER BY c.distance;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "retails",
    "sql": "SELECT o_orderkey\nFROM orders\nWHERE o_comment_embedding MATCH lembed('all-MiniLM-L6-v2', 'final packages blithely')\nLIMIT 1;",
    "complexity": "Simple",
    "column_count": 1,
    "rows": 1,
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT o_orderkey\nFROM orders\nWHERE o_comment_embedding MATCH lembed('all-MiniLM-L6-v2', 'final packages blithely')\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "retails",
    "sql": "WITH FilteredParts AS (\n  SELECT ps_partkey, ps_suppkey, ps_supplycost, ps_availqty\n  FROM partsupp\n  WHERE ps_supplycost > 1000\n)\n\nSELECT ps.ps_partkey, ps.distance \nFROM FilteredParts fp\nJOIN partsupp ps\nON fp.ps_partkey = ps.ps_partkey \nAND fp.ps_suppkey = ps.ps_suppkey\nWHERE ps.ps_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"slyly regular accounts serve carefully\") \nAND ps.k = 5;",
    "complexity": "Complex",
    "column_count": 2,
    "rows": 0,
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH FilteredParts AS (\n  SELECT ps_partkey, ps_suppkey, ps_supplycost, ps_availqty\n  FROM partsupp\n  WHERE ps_supplycost > 1000\n)\n\nSELECT ps.ps_partkey, ps.distance \nFROM FilteredParts fp\nJOIN partsupp ps\nON fp.ps_partkey = ps.ps_partkey \nAND fp.ps_suppkey = ps.ps_suppkey\nWHERE ps.ps_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"slyly regular accounts serve carefully\") \nAND ps.k = 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "retails",
    "sql": "WITH AvgOrderPrice AS (\n    SELECT o_custkey, AVG(o_totalprice) AS avg_totalprice\n    FROM orders\n    GROUP BY o_custkey\n)\nSELECT c.c_name\nFROM customer c\nJOIN AvgOrderPrice aop ON c.c_custkey = aop.o_custkey\nWHERE c.c_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"express requests like blithely deposits\") AND k = 5\nORDER BY aop.avg_totalprice DESC;",
    "complexity": "Complex",
    "column_count": 1,
    "rows": 2,
    "style": "Formal",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Formal Style**\n   - Uses standard grammar and vocabulary.\n   - Example: Find all students older than 18 years and return their home addresses.\n   - Vector Example: Find the three articles most closely related to Stable Diffusion and return them.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH AvgOrderPrice AS (\n    SELECT o_custkey, AVG(o_totalprice) AS avg_totalprice\n    FROM orders\n    GROUP BY o_custkey\n)\nSELECT c.c_name\nFROM customer c\nJOIN AvgOrderPrice aop ON c.c_custkey = aop.o_custkey\nWHERE c.c_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"express requests like blithely deposits\") AND k = 5\nORDER BY aop.avg_totalprice DESC;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "retails",
    "sql": "SELECT c.c_name\nFROM customer c\nJOIN nation n ON c.c_nationkey = n.n_nationkey\nJOIN orders o ON c.c_custkey = o.o_custkey\nWHERE c.c_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"final express accounts\") AND c.k = 3\n  AND n.n_name = 'Germany'\n  AND o.o_orderdate BETWEEN '2023-01-01' AND '2023-12-31';",
    "complexity": "Moderate",
    "column_count": 1,
    "rows": 0,
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT c.c_name\nFROM customer c\nJOIN nation n ON c.c_nationkey = n.n_nationkey\nJOIN orders o ON c.c_custkey = o.o_custkey\nWHERE c.c_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"final express accounts\") AND c.k = 3\n  AND n.n_name = 'Germany'\n  AND o.o_orderdate BETWEEN '2023-01-01' AND '2023-12-31';\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "retails",
    "sql": "SELECT c.c_name\nFROM customer c\nJOIN nation n ON c.c_nationkey = n.n_nationkey\nWHERE c.c_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"remarks of a customer about the service\") AND c.k = 5;",
    "complexity": "Moderate",
    "column_count": 1,
    "rows": 5,
    "style": "Descriptive",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Descriptive Style**\n   - Uses detailed descriptions with contextual information.\n   - Example: I want to know the names and home addresses of all students older than 18.\n   - Vector Example: I need to find articles that most closely related to Stable Diffusion, returning the top 3 matches sorted by cosine similarity.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT c.c_name\nFROM customer c\nJOIN nation n ON c.c_nationkey = n.n_nationkey\nWHERE c.c_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"remarks of a customer about the service\") AND c.k = 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "retails",
    "sql": "WITH CustomerMatches AS (\n  SELECT c.c_custkey, c.c_comment, c.c_comment_embedding, c.distance\n  FROM customer c\n  WHERE c.c_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"requests detect slyly silent excuses\") AND c.k = 5\n)\n\n\nSELECT cm.c_custkey, cm.c_comment, n.n_name\nFROM CustomerMatches cm\nJOIN nation n ON cm.c_custkey = n.n_nationkey\nORDER BY cm.distance\nLIMIT 5;",
    "complexity": "Complex",
    "column_count": 3,
    "rows": 1,
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH CustomerMatches AS (\n  SELECT c.c_custkey, c.c_comment, c.c_comment_embedding, c.distance\n  FROM customer c\n  WHERE c.c_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"requests detect slyly silent excuses\") AND c.k = 5\n)\n\n\nSELECT cm.c_custkey, cm.c_comment, n.n_name\nFROM CustomerMatches cm\nJOIN nation n ON cm.c_custkey = n.n_nationkey\nORDER BY cm.distance\nLIMIT 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "retails",
    "sql": "SELECT c_custkey, c_name, c_address\nFROM customer\nWHERE c_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"regular accounts serve carefully\")\nLIMIT 3;",
    "complexity": "Simple",
    "column_count": 3,
    "rows": 3,
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT c_custkey, c_name, c_address\nFROM customer\nWHERE c_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"regular accounts serve carefully\")\nLIMIT 3;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "retails",
    "sql": "SELECT c_custkey, distance\nFROM customer\nWHERE c_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"special offers to loyal customers\")\nLIMIT 5;",
    "complexity": "Simple",
    "column_count": 2,
    "rows": 5,
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT c_custkey, distance\nFROM customer\nWHERE c_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"special offers to loyal customers\")\nLIMIT 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "retails",
    "sql": "SELECT \n  c.c_name AS customer_name, \n  o.o_orderdate AS order_date, \n  n.n_name AS nation_name\nFROM \n  customer AS c\nJOIN \n  orders AS o ON c.c_custkey = o.o_custkey\nJOIN \n  nation AS n ON c.c_nationkey = n.n_nationkey\nWHERE \n  c.c_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"specific request details\")\n  AND n.n_name = 'Germany'\n  AND c.k = 5;",
    "complexity": "Moderate",
    "column_count": 3,
    "rows": 0,
    "style": "Vague",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Vague Style**\n   - Includes ambiguous vocabulary requiring inference.\n   - Example: What are the names and addresses of those older students? (External Knowledge: 'older students' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with Stable Diffusion. (External Knowledge: 'a few' refers to vector similarity search with k=3 limit)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT \n  c.c_name AS customer_name, \n  o.o_orderdate AS order_date, \n  n.n_name AS nation_name\nFROM \n  customer AS c\nJOIN \n  orders AS o ON c.c_custkey = o.o_custkey\nJOIN \n  nation AS n ON c.c_nationkey = n.n_nationkey\nWHERE \n  c.c_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"specific request details\")\n  AND n.n_name = 'Germany'\n  AND c.k = 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "codebase_comments",
    "sql": "SELECT m.Name\nFROM Method m\nJOIN Solution s ON m.SolutionId = s.Id\nWHERE m.FullComment_embedding MATCH lembed('all-MiniLM-L6-v2', \"Parsing HTML data efficiently\") AND m.k = 5\nAND s.WasCompiled = 1;",
    "complexity": "Moderate",
    "column_count": 1,
    "rows": 5,
    "style": "Descriptive",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Descriptive Style**\n   - Uses detailed descriptions with contextual information.\n   - Example: I want to know the names and home addresses of all students older than 18.\n   - Vector Example: I need to find articles that most closely related to Stable Diffusion, returning the top 3 matches sorted by cosine similarity.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT m.Name\nFROM Method m\nJOIN Solution s ON m.SolutionId = s.Id\nWHERE m.FullComment_embedding MATCH lembed('all-MiniLM-L6-v2', \"Parsing HTML data efficiently\") AND m.k = 5\nAND s.WasCompiled = 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "codebase_comments",
    "sql": "WITH TopMethods AS (\n  SELECT\n    m.Id,\n    m.Summary,\n    m.FullComment,\n    m.SolutionId,\n    s.RepoId,\n    r.Stars,\n    r.Forks,\n    r.Watchers,\n    r.Url,\n    m.distance\n  FROM\n    Method m\n  JOIN\n    Solution s ON m.SolutionId = s.Id\n  JOIN\n    Repo r ON s.RepoId = r.Id\n  WHERE\n    m.Summary_embedding MATCH lembed('all-MiniLM-L6-v2', 'Comprehensive method analysis and implementation details') AND m.k = 5\n)\nSELECT\n  r.Url\nFROM\n  TopMethods tm\nJOIN\n  Repo r ON tm.RepoId = r.Id\nWHERE\n  tm.Stars > 1000\nORDER BY\n  tm.distance\nLIMIT 1;",
    "complexity": "Highly Complex",
    "column_count": 1,
    "rows": 0,
    "style": "Metaphorical",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Metaphorical Style**\n   - Uses metaphors or metaphorical expressions.\n   - Example: Find the names and addresses of those who have reached adulthood. (External Knowledge: 'reached adulthood' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with SD in ai. (External Knowledge: 'SD in ai' refers to Stable Diffusion)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH TopMethods AS (\n  SELECT\n    m.Id,\n    m.Summary,\n    m.FullComment,\n    m.SolutionId,\n    s.RepoId,\n    r.Stars,\n    r.Forks,\n    r.Watchers,\n    r.Url,\n    m.distance\n  FROM\n    Method m\n  JOIN\n    Solution s ON m.SolutionId = s.Id\n  JOIN\n    Repo r ON s.RepoId = r.Id\n  WHERE\n    m.Summary_embedding MATCH lembed('all-MiniLM-L6-v2', 'Comprehensive method analysis and implementation details') AND m.k = 5\n)\nSELECT\n  r.Url\nFROM\n  TopMethods tm\nJOIN\n  Repo r ON tm.RepoId = r.Id\nWHERE\n  tm.Stars > 1000\nORDER BY\n  tm.distance\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "codebase_comments",
    "sql": "SELECT m.Name\nFROM Method m\nJOIN MethodParameter mp ON m.Id = mp.MethodId\nJOIN Solution s ON m.SolutionId = s.Id\nJOIN Repo r ON s.RepoId = r.Id\nWHERE m.FullComment_embedding MATCH lembed('all-MiniLM-L6-v2', \"Efficient parsing of XML elements and attributes\") AND m.k = 5\nAND mp.Type = 'String'\nAND s.WasCompiled = 1\nAND r.Stars > (SELECT AVG(Stars) FROM Repo)\nORDER BY r.Stars DESC;",
    "complexity": "Highly Complex",
    "column_count": 1,
    "rows": 0,
    "style": "Concise",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Concise Style**\n   - Use short sentences.\n   - Example: Students older than 18, return their names and addresses.\n   - Vector Example: Top 3 related articles to Stable Diffusion.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT m.Name\nFROM Method m\nJOIN MethodParameter mp ON m.Id = mp.MethodId\nJOIN Solution s ON m.SolutionId = s.Id\nJOIN Repo r ON s.RepoId = r.Id\nWHERE m.FullComment_embedding MATCH lembed('all-MiniLM-L6-v2', \"Efficient parsing of XML elements and attributes\") AND m.k = 5\nAND mp.Type = 'String'\nAND s.WasCompiled = 1\nAND r.Stars > (SELECT AVG(Stars) FROM Repo)\nORDER BY r.Stars DESC;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "codebase_comments",
    "sql": "WITH FilteredMethods AS (\n    SELECT m.Id, m.Name, m.Summary_embedding\n    FROM Method m\n    WHERE m.Summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"A comprehensive explanation of the algorithm\") LIMIT 5\n)\n\nSELECT fm.Id, fm.Name\nFROM FilteredMethods fm\nJOIN Solution s ON fm.Id = s.Id\nWHERE s.WasCompiled = 1;",
    "complexity": "Complex",
    "column_count": 2,
    "rows": 0,
    "style": "Imperative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Imperative Style**\n   - Uses command or directive sentences.\n   - Example: Could you please gather all the students who are older than 18? I really need to know their names and where they live!\n   - Vector Example: Please find the three articles most closely related to Stable Diffusion and return their name.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH FilteredMethods AS (\n    SELECT m.Id, m.Name, m.Summary_embedding\n    FROM Method m\n    WHERE m.Summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"A comprehensive explanation of the algorithm\") LIMIT 5\n)\n\nSELECT fm.Id, fm.Name\nFROM FilteredMethods fm\nJOIN Solution s ON fm.Id = s.Id\nWHERE s.WasCompiled = 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "works_cycles",
    "sql": "SELECT ProductReviewID\nFROM ProductReview\nWHERE Comments_embedding MATCH lembed('all-MiniLM-L6-v2', \"This pedal offers great grip and stability when cycling.\")\nLIMIT 1;",
    "complexity": "Simple",
    "column_count": 1,
    "rows": 1,
    "style": "Concise",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Concise Style**\n   - Use short sentences.\n   - Example: Students older than 18, return their names and addresses.\n   - Vector Example: Top 3 related articles to Stable Diffusion.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT ProductReviewID\nFROM ProductReview\nWHERE Comments_embedding MATCH lembed('all-MiniLM-L6-v2', \"This pedal offers great grip and stability when cycling.\")\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "works_cycles",
    "sql": "SELECT \n  pr.ProductReviewID, \n  pr.ProductID, \n  p.Name AS ProductName, \n  pr.distance\nFROM \n  ProductReview pr\nJOIN \n  Product p ON pr.ProductID = p.ProductID\nWHERE \n  pr.Comments_embedding MATCH lembed('all-MiniLM-L6-v2', \"excellent performance and durability\") AND pr.k = 5;",
    "complexity": "Moderate",
    "column_count": 4,
    "rows": 4,
    "style": "Concise",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Concise Style**\n   - Use short sentences.\n   - Example: Students older than 18, return their names and addresses.\n   - Vector Example: Top 3 related articles to Stable Diffusion.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT \n  pr.ProductReviewID, \n  pr.ProductID, \n  p.Name AS ProductName, \n  pr.distance\nFROM \n  ProductReview pr\nJOIN \n  Product p ON pr.ProductID = p.ProductID\nWHERE \n  pr.Comments_embedding MATCH lembed('all-MiniLM-L6-v2', \"excellent performance and durability\") AND pr.k = 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "works_cycles",
    "sql": "SELECT p.Name\nFROM ProductReview pr\nJOIN Product p ON pr.ProductID = p.ProductID\nWHERE pr.Comments_embedding MATCH lembed('all-MiniLM-L6-v2', \"An excellent and durable product\") AND pr.k = 3;",
    "complexity": "Moderate",
    "column_count": 1,
    "rows": 3,
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT p.Name\nFROM ProductReview pr\nJOIN Product p ON pr.ProductID = p.ProductID\nWHERE pr.Comments_embedding MATCH lembed('all-MiniLM-L6-v2', \"An excellent and durable product\") AND pr.k = 3;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "works_cycles",
    "sql": "WITH ReviewCTE AS (\n  SELECT \n    ProductReviewID, \n    ProductID, \n    ReviewerName, \n    distance \n  FROM \n    ProductReview \n  WHERE \n    Comments_embedding MATCH lembed('all-MiniLM-L6-v2', \"Exquisite craftsmanship in product design.\") \n  AND k = 3\n)\n\n\nSELECT \n  r.ProductReviewID, \n  r.ReviewerName, \n  r.distance,\n  p.Name AS ProductName, \n  c.EmailAddress, \n  s.Name AS StoreName\nFROM \n  ReviewCTE r\nJOIN \n  Product p ON r.ProductID = p.ProductID\nLEFT JOIN \n  EmailAddress c ON p.ProductID = c.BusinessEntityID\nLEFT JOIN \n  Store s ON p.ProductID = s.BusinessEntityID\nORDER BY \n  r.distance;",
    "complexity": "Complex",
    "column_count": 6,
    "rows": 3,
    "style": "Descriptive",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Descriptive Style**\n   - Uses detailed descriptions with contextual information.\n   - Example: I want to know the names and home addresses of all students older than 18.\n   - Vector Example: I need to find articles that most closely related to Stable Diffusion, returning the top 3 matches sorted by cosine similarity.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH ReviewCTE AS (\n  SELECT \n    ProductReviewID, \n    ProductID, \n    ReviewerName, \n    distance \n  FROM \n    ProductReview \n  WHERE \n    Comments_embedding MATCH lembed('all-MiniLM-L6-v2', \"Exquisite craftsmanship in product design.\") \n  AND k = 3\n)\n\n\nSELECT \n  r.ProductReviewID, \n  r.ReviewerName, \n  r.distance,\n  p.Name AS ProductName, \n  c.EmailAddress, \n  s.Name AS StoreName\nFROM \n  ReviewCTE r\nJOIN \n  Product p ON r.ProductID = p.ProductID\nLEFT JOIN \n  EmailAddress c ON p.ProductID = c.BusinessEntityID\nLEFT JOIN \n  Store s ON p.ProductID = s.BusinessEntityID\nORDER BY \n  r.distance;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "works_cycles",
    "sql": "SELECT ProductDescriptionID \nFROM ProductDescription \nWHERE Description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High quality steel frame and durable design\") \nAND k = 5;",
    "complexity": "Moderate",
    "column_count": 1,
    "rows": 5,
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT ProductDescriptionID \nFROM ProductDescription \nWHERE Description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High quality steel frame and durable design\") \nAND k = 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "works_cycles",
    "sql": "SELECT ProductReviewID, ProductID\nFROM ProductReview\nWHERE Comments_embedding MATCH lembed('all-MiniLM-L6-v2', \"An insightful book review\") \nAND k = 5;",
    "complexity": "Simple",
    "column_count": 2,
    "rows": 4,
    "style": "Imperative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Imperative Style**\n   - Uses command or directive sentences.\n   - Example: Could you please gather all the students who are older than 18? I really need to know their names and where they live!\n   - Vector Example: Please find the three articles most closely related to Stable Diffusion and return their name.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT ProductReviewID, ProductID\nFROM ProductReview\nWHERE Comments_embedding MATCH lembed('all-MiniLM-L6-v2', \"An insightful book review\") \nAND k = 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "retails",
    "sql": "SELECT c.c_custkey\nFROM customer c\nJOIN supplier s ON c.c_nationkey = s.s_nationkey\nWHERE c.c_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"customers regularly request agile services and consistent quality\") AND c.k = 5\nAND s.s_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"suppliers should provide reliable and swift assistance\") AND s.k = 5\nORDER BY c.c_acctbal DESC, s.s_acctbal DESC\nLIMIT 1;",
    "complexity": "Highly Complex",
    "column_count": 1,
    "rows": 1,
    "style": "Multi-turn Dialogue",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Multi-turn Dialogue Style**\n    - This involves a dialogue to clarify the user's query needs.\n    - Example: [{\"User\": \"I want to query some student information.\"}, {\"Assistant\": \"Which students' information would you like to query?\"}, {\"User\": \"Students older than 18.\"}, {\"Assistant\": \"What other information would you like to know about them?\"}, {\"User\": \"Names and addresses.\"}, {\"Assistant\": \"Is there anything else you need?\"}, {\"User\": \"No.\"}, {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}]\n    - Vector Example: \n      User: \"I'm looking for some articles.\"\n      Assistant: \"How many articles would you like to find and What field of paper are you looking for?\"\n      User: \"About 3, and they are related to Stable Diffusion.\"\n      Assistant: \"I'll search for 3 articles that most closely related to Stable Diffusion.\"\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT c.c_custkey\nFROM customer c\nJOIN supplier s ON c.c_nationkey = s.s_nationkey\nWHERE c.c_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"customers regularly request agile services and consistent quality\") AND c.k = 5\nAND s.s_comment_embedding MATCH lembed('all-MiniLM-L6-v2', \"suppliers should provide reliable and swift assistance\") AND s.k = 5\nORDER BY c.c_acctbal DESC, s.s_acctbal DESC\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Dialogue:** Create a conversation between the User and the Assistant based on the SQL query and its explanation, ensuring vector operations are properly discussed.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the dialogue naturally covers:\n   - The purpose of the vector search;\n   - How many similar items are needed (LIMIT);\n   - What the target vector represents;\n   - Any additional filtering or sorting requirements.\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Multi-turn dialogue covering vector search details)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Create natural dialogue that explores vector search parameters\n4. Ensure LIMIT, target vector and distance sorting are discussed\n",
    "contains_vector": true
  },
  {
    "db_id": "works_cycles",
    "sql": "WITH ProductModelCTE AS (\n    SELECT ProductModelID, Name\n    FROM ProductModel\n)\nSELECT pm.ProductModelID, pm.Name\nFROM ProductModelCTE pm\nJOIN ProductModelProductDescriptionCulture pmpdc ON pm.ProductModelID = pmpdc.ProductModelID\nJOIN ProductDescription pd ON pmpdc.ProductDescriptionID = pd.ProductDescriptionID\nWHERE pd.Description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High-quality steel frame ideal for mountain bikes\")\nAND pd.k = 3;",
    "complexity": "Complex",
    "column_count": 2,
    "rows": 3,
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH ProductModelCTE AS (\n    SELECT ProductModelID, Name\n    FROM ProductModel\n)\nSELECT pm.ProductModelID, pm.Name\nFROM ProductModelCTE pm\nJOIN ProductModelProductDescriptionCulture pmpdc ON pm.ProductModelID = pmpdc.ProductModelID\nJOIN ProductDescription pd ON pmpdc.ProductDescriptionID = pd.ProductDescriptionID\nWHERE pd.Description_embedding MATCH lembed('all-MiniLM-L6-v2', \"High-quality steel frame ideal for mountain bikes\")\nAND pd.k = 3;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "codebase_comments",
    "sql": "WITH VectorSearchResults AS (\n    SELECT \n        m.Id AS MethodId, \n        m.Name, \n        m.Summary, \n        s.Id AS SolutionId, \n        r.Id AS RepoId,\n        distance\n    FROM \n        Method m\n    JOIN \n        Solution s ON m.SolutionId = s.Id\n    JOIN \n        Repo r ON s.RepoId = r.Id\n    WHERE \n        m.FullComment_embedding MATCH lembed('all-MiniLM-L6-v2', \"Parser data feed comment\") AND m.k = 5\n    ORDER BY \n        distance\n),\nAggregatedResults AS (\n    SELECT \n        RepoId, \n        FIRST_VALUE(Name) OVER (PARTITION BY RepoId ORDER BY distance) AS FirstMethodName,\n        COUNT(DISTINCT MethodId) AS TotalMethods\n    FROM \n        VectorSearchResults\n    GROUP BY \n        RepoId\n)\nSELECT \n    ar.RepoId, \n    r.Url, \n    ar.FirstMethodName\nFROM \n    AggregatedResults ar\nJOIN \n    Repo r ON ar.RepoId = r.Id\nWHERE \n    ar.TotalMethods > 1;",
    "complexity": "Highly Complex",
    "column_count": 3,
    "rows": 2,
    "style": "Imperative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Imperative Style**\n   - Uses command or directive sentences.\n   - Example: Could you please gather all the students who are older than 18? I really need to know their names and where they live!\n   - Vector Example: Please find the three articles most closely related to Stable Diffusion and return their name.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH VectorSearchResults AS (\n    SELECT \n        m.Id AS MethodId, \n        m.Name, \n        m.Summary, \n        s.Id AS SolutionId, \n        r.Id AS RepoId,\n        distance\n    FROM \n        Method m\n    JOIN \n        Solution s ON m.SolutionId = s.Id\n    JOIN \n        Repo r ON s.RepoId = r.Id\n    WHERE \n        m.FullComment_embedding MATCH lembed('all-MiniLM-L6-v2', \"Parser data feed comment\") AND m.k = 5\n    ORDER BY \n        distance\n),\nAggregatedResults AS (\n    SELECT \n        RepoId, \n        FIRST_VALUE(Name) OVER (PARTITION BY RepoId ORDER BY distance) AS FirstMethodName,\n        COUNT(DISTINCT MethodId) AS TotalMethods\n    FROM \n        VectorSearchResults\n    GROUP BY \n        RepoId\n)\nSELECT \n    ar.RepoId, \n    r.Url, \n    ar.FirstMethodName\nFROM \n    AggregatedResults ar\nJOIN \n    Repo r ON ar.RepoId = r.Id\nWHERE \n    ar.TotalMethods > 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "codebase_comments",
    "sql": "SELECT Id\nFROM Method\nWHERE FullComment_embedding MATCH lembed('all-MiniLM-L6-v2', \"scan past <!ELEMENT declarations\")\nLIMIT 1;",
    "complexity": "Simple",
    "column_count": 1,
    "rows": 1,
    "style": "Metaphorical",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Metaphorical Style**\n   - Uses metaphors or metaphorical expressions.\n   - Example: Find the names and addresses of those who have reached adulthood. (External Knowledge: 'reached adulthood' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with SD in ai. (External Knowledge: 'SD in ai' refers to Stable Diffusion)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT Id\nFROM Method\nWHERE FullComment_embedding MATCH lembed('all-MiniLM-L6-v2', \"scan past <!ELEMENT declarations\")\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "codebase_comments",
    "sql": "WITH RepoCTE AS (\n  SELECT DISTINCT m.Id AS MethodId, r.Stars\n  FROM Method m\n  JOIN Solution s ON m.SolutionId = s.Id\n  JOIN Repo r ON s.RepoId = r.Id\n  WHERE r.Stars > 1000\n)\n\n\nSELECT m.Name\nFROM Method m\nJOIN RepoCTE rc ON m.Id = rc.MethodId\nWHERE m.FullComment_embedding MATCH lembed('all-MiniLM-L6-v2', \"Feeds parser with data optimally\") AND m.k = 5\nORDER BY distance\nLIMIT 1;",
    "complexity": "Complex",
    "column_count": 1,
    "rows": 0,
    "style": "Vague",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Vague Style**\n   - Includes ambiguous vocabulary requiring inference.\n   - Example: What are the names and addresses of those older students? (External Knowledge: 'older students' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with Stable Diffusion. (External Knowledge: 'a few' refers to vector similarity search with k=3 limit)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH RepoCTE AS (\n  SELECT DISTINCT m.Id AS MethodId, r.Stars\n  FROM Method m\n  JOIN Solution s ON m.SolutionId = s.Id\n  JOIN Repo r ON s.RepoId = r.Id\n  WHERE r.Stars > 1000\n)\n\n\nSELECT m.Name\nFROM Method m\nJOIN RepoCTE rc ON m.Id = rc.MethodId\nWHERE m.FullComment_embedding MATCH lembed('all-MiniLM-L6-v2', \"Feeds parser with data optimally\") AND m.k = 5\nORDER BY distance\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "codebase_comments",
    "sql": "SELECT m.Id\nFROM Method m\nJOIN Solution s ON m.SolutionId = s.Id\nWHERE m.Summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"scan past declarations\") AND m.k = 5\nAND s.WasCompiled = 1\nORDER BY m.distance;",
    "complexity": "Moderate",
    "column_count": 1,
    "rows": 5,
    "style": "Descriptive",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Descriptive Style**\n   - Uses detailed descriptions with contextual information.\n   - Example: I want to know the names and home addresses of all students older than 18.\n   - Vector Example: I need to find articles that most closely related to Stable Diffusion, returning the top 3 matches sorted by cosine similarity.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT m.Id\nFROM Method m\nJOIN Solution s ON m.SolutionId = s.Id\nWHERE m.Summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"scan past declarations\") AND m.k = 5\nAND s.WasCompiled = 1\nORDER BY m.distance;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "cs_semester",
    "sql": "SELECT student_id, capability\nFROM RA\nWHERE salary_embedding MATCH lembed('all-MiniLM-L6-v2', \"competitive salary package with benefits\")\nLIMIT 1;",
    "complexity": "Simple",
    "column_count": 2,
    "rows": 1,
    "style": "Multi-turn Dialogue",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Multi-turn Dialogue Style**\n    - This involves a dialogue to clarify the user's query needs.\n    - Example: [{\"User\": \"I want to query some student information.\"}, {\"Assistant\": \"Which students' information would you like to query?\"}, {\"User\": \"Students older than 18.\"}, {\"Assistant\": \"What other information would you like to know about them?\"}, {\"User\": \"Names and addresses.\"}, {\"Assistant\": \"Is there anything else you need?\"}, {\"User\": \"No.\"}, {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}]\n    - Vector Example: \n      User: \"I'm looking for some articles.\"\n      Assistant: \"How many articles would you like to find and What field of paper are you looking for?\"\n      User: \"About 3, and they are related to Stable Diffusion.\"\n      Assistant: \"I'll search for 3 articles that most closely related to Stable Diffusion.\"\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT student_id, capability\nFROM RA\nWHERE salary_embedding MATCH lembed('all-MiniLM-L6-v2', \"competitive salary package with benefits\")\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Dialogue:** Create a conversation between the User and the Assistant based on the SQL query and its explanation, ensuring vector operations are properly discussed.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the dialogue naturally covers:\n   - The purpose of the vector search;\n   - How many similar items are needed (LIMIT);\n   - What the target vector represents;\n   - Any additional filtering or sorting requirements.\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Multi-turn dialogue covering vector search details)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Create natural dialogue that explores vector search parameters\n4. Ensure LIMIT, target vector and distance sorting are discussed\n",
    "contains_vector": true
  },
  {
    "db_id": "cs_semester",
    "sql": "SELECT student_id, distance\nFROM student\nWHERE type_embedding MATCH lembed('all-MiniLM-L6-v2', \"RPG\") \nAND k = 3;",
    "complexity": "Simple",
    "column_count": 2,
    "rows": 3,
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT student_id, distance\nFROM student\nWHERE type_embedding MATCH lembed('all-MiniLM-L6-v2', \"RPG\") \nAND k = 3;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "cs_semester",
    "sql": "SELECT s.student_id\nFROM student s\nJOIN prof p ON p.prof_id = (\n    SELECT prof_id\n    FROM prof\n    WHERE gender = 'M'\n    ORDER BY popularity DESC\n    LIMIT 1\n)\nWHERE s.intelligence > 120\nAND s.student_id IN (\n    SELECT ra.student_id\n    FROM RA ra\n    WHERE ra.prof_id = p.prof_id\n)\nAND s.student_id IN (\n    SELECT r.student_id\n    FROM registration r\n    JOIN course c ON r.course_id = c.course_id\n    WHERE c.diff > 3\n)\nLIMIT 10;",
    "complexity": "Moderate",
    "column_count": 1,
    "rows": 0,
    "style": "Concise",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Concise Style**\n   - Use short sentences.\n   - Example: Students older than 18, return their names and addresses.\n   - Vector Example: Top 3 related articles to Stable Diffusion.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT s.student_id\nFROM student s\nJOIN prof p ON p.prof_id = (\n    SELECT prof_id\n    FROM prof\n    WHERE gender = 'M'\n    ORDER BY popularity DESC\n    LIMIT 1\n)\nWHERE s.intelligence > 120\nAND s.student_id IN (\n    SELECT ra.student_id\n    FROM RA ra\n    WHERE ra.prof_id = p.prof_id\n)\nAND s.student_id IN (\n    SELECT r.student_id\n    FROM registration r\n    JOIN course c ON r.course_id = c.course_id\n    WHERE c.diff > 3\n)\nLIMIT 10;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": false
  },
  {
    "db_id": "cs_semester",
    "sql": "WITH HighDiffCourses AS (\n    SELECT course_id\n    FROM course\n    WHERE diff > 7  \n),\nHighGPAStudents AS (\n    SELECT DISTINCT s.student_id, s.gpa\n    FROM student s\n    JOIN registration r ON s.student_id = r.student_id\n    WHERE r.course_id IN (SELECT course_id FROM HighDiffCourses)\n    AND s.gpa > 3.5  \n),\nPotentialRAs AS (\n    SELECT ra.student_id, ra.prof_id\n    FROM RA ra\n    JOIN HighGPAStudents hgs ON ra.student_id = hgs.student_id\n    WHERE ra.salary_embedding MATCH lembed('all-MiniLM-L6-v2', \"high salary for research assistants\")\n    AND ra.k = 5\n),\nPotentialProfs AS (\n    SELECT p.prof_id, p.email, distance\n    FROM prof p\n    JOIN PotentialRAs pra ON p.prof_id = pra.prof_id\n    WHERE p.graduate_from_embedding MATCH lembed('all-MiniLM-L6-v2', \"Top universities with strong research programs\")\n    AND p.k = 3\n    ORDER BY distance\n    LIMIT 5\n)\nSELECT p.email\nFROM PotentialProfs p;",
    "complexity": "Highly Complex",
    "column_count": 1,
    "rows": 0,
    "style": "Formal",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Formal Style**\n   - Uses standard grammar and vocabulary.\n   - Example: Find all students older than 18 years and return their home addresses.\n   - Vector Example: Find the three articles most closely related to Stable Diffusion and return them.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH HighDiffCourses AS (\n    SELECT course_id\n    FROM course\n    WHERE diff > 7  \n),\nHighGPAStudents AS (\n    SELECT DISTINCT s.student_id, s.gpa\n    FROM student s\n    JOIN registration r ON s.student_id = r.student_id\n    WHERE r.course_id IN (SELECT course_id FROM HighDiffCourses)\n    AND s.gpa > 3.5  \n),\nPotentialRAs AS (\n    SELECT ra.student_id, ra.prof_id\n    FROM RA ra\n    JOIN HighGPAStudents hgs ON ra.student_id = hgs.student_id\n    WHERE ra.salary_embedding MATCH lembed('all-MiniLM-L6-v2', \"high salary for research assistants\")\n    AND ra.k = 5\n),\nPotentialProfs AS (\n    SELECT p.prof_id, p.email, distance\n    FROM prof p\n    JOIN PotentialRAs pra ON p.prof_id = pra.prof_id\n    WHERE p.graduate_from_embedding MATCH lembed('all-MiniLM-L6-v2', \"Top universities with strong research programs\")\n    AND p.k = 3\n    ORDER BY distance\n    LIMIT 5\n)\nSELECT p.email\nFROM PotentialProfs p;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "cs_semester",
    "sql": "WITH HighIntelligenceStudents AS (\n    SELECT student_id, f_name, l_name\n    FROM student\n    WHERE intelligence > 120\n),\nTopProfessors AS (\n    SELECT prof_id, first_name, last_name, distance\n    FROM prof\n    WHERE graduate_from_embedding MATCH lembed('all-MiniLM-L6-v2', \"Oxford University\") AND k = 3\n)\nSELECT s.student_id, s.f_name || ' ' || s.l_name AS full_name, p.first_name || ' ' || p.last_name AS professor_name\nFROM HighIntelligenceStudents s\nJOIN RA r ON s.student_id = r.student_id\nJOIN TopProfessors p ON r.prof_id = p.prof_id\nORDER BY p.distance\nLIMIT 10;",
    "complexity": "Complex",
    "column_count": 3,
    "rows": 0,
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH HighIntelligenceStudents AS (\n    SELECT student_id, f_name, l_name\n    FROM student\n    WHERE intelligence > 120\n),\nTopProfessors AS (\n    SELECT prof_id, first_name, last_name, distance\n    FROM prof\n    WHERE graduate_from_embedding MATCH lembed('all-MiniLM-L6-v2', \"Oxford University\") AND k = 3\n)\nSELECT s.student_id, s.f_name || ' ' || s.l_name AS full_name, p.first_name || ' ' || p.last_name AS professor_name\nFROM HighIntelligenceStudents s\nJOIN RA r ON s.student_id = r.student_id\nJOIN TopProfessors p ON r.prof_id = p.prof_id\nORDER BY p.distance\nLIMIT 10;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "cs_semester",
    "sql": "SELECT s.student_id, s.intelligence, p.prof_id, p.teachingability, s.distance, p.distance\nFROM student s\nJOIN RA r ON s.student_id = r.student_id\nJOIN prof p ON r.prof_id = p.prof_id\nWHERE s.type_embedding MATCH lembed('all-MiniLM-L6-v2', \"ARPG\") AND s.k = 3\n  AND p.graduate_from_embedding MATCH lembed('all-MiniLM-L6-v2', \"Harvard University\") AND p.k = 3\n  AND s.intelligence > 120\n  AND p.teachingability > 80\nORDER BY s.distance, p.distance\nLIMIT 5;",
    "complexity": "Highly Complex",
    "column_count": 6,
    "rows": 0,
    "style": "Formal",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Formal Style**\n   - Uses standard grammar and vocabulary.\n   - Example: Find all students older than 18 years and return their home addresses.\n   - Vector Example: Find the three articles most closely related to Stable Diffusion and return them.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT s.student_id, s.intelligence, p.prof_id, p.teachingability, s.distance, p.distance\nFROM student s\nJOIN RA r ON s.student_id = r.student_id\nJOIN prof p ON r.prof_id = p.prof_id\nWHERE s.type_embedding MATCH lembed('all-MiniLM-L6-v2', \"ARPG\") AND s.k = 3\n  AND p.graduate_from_embedding MATCH lembed('all-MiniLM-L6-v2', \"Harvard University\") AND p.k = 3\n  AND s.intelligence > 120\n  AND p.teachingability > 80\nORDER BY s.distance, p.distance\nLIMIT 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "works_cycles",
    "sql": "SELECT \n  pr.ProductReviewID, \n  pr.Rating, \n  p.Name\nFROM \n  ProductReview pr\nJOIN \n  Product p ON pr.ProductID = p.ProductID\nWHERE \n  pr.Comments_embedding MATCH lembed('all-MiniLM-L6-v2', \"lightweight cushioning socks\") \n  AND pr.k = 5\nORDER BY \n  pr.distance\nLIMIT \n  10;",
    "complexity": "Moderate",
    "column_count": 3,
    "rows": 4,
    "style": "Concise",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Concise Style**\n   - Use short sentences.\n   - Example: Students older than 18, return their names and addresses.\n   - Vector Example: Top 3 related articles to Stable Diffusion.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT \n  pr.ProductReviewID, \n  pr.Rating, \n  p.Name\nFROM \n  ProductReview pr\nJOIN \n  Product p ON pr.ProductID = p.ProductID\nWHERE \n  pr.Comments_embedding MATCH lembed('all-MiniLM-L6-v2', \"lightweight cushioning socks\") \n  AND pr.k = 5\nORDER BY \n  pr.distance\nLIMIT \n  10;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "address",
    "sql": "SELECT CBSA_name\nFROM CBSA\nWHERE CBSA_name_embedding MATCH lembed('all-MiniLM-L6-v2', 'Agwadylla Islebrae')\nLIMIT 1;",
    "complexity": "Simple",
    "column_count": 1,
    "rows": 1,
    "style": "Vague",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Vague Style**\n   - Includes ambiguous vocabulary requiring inference.\n   - Example: What are the names and addresses of those older students? (External Knowledge: 'older students' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with Stable Diffusion. (External Knowledge: 'a few' refers to vector similarity search with k=3 limit)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT CBSA_name\nFROM CBSA\nWHERE CBSA_name_embedding MATCH lembed('all-MiniLM-L6-v2', 'Agwadylla Islebrae')\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "address",
    "sql": "SELECT z.zip_code, c.CBSA_name, distance\nFROM zip_data z\nJOIN CBSA c ON z.CBSA = c.CBSA\nWHERE c.CBSA_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Adrien\") AND c.k = 5\nORDER BY distance;",
    "complexity": "Moderate",
    "column_count": 3,
    "rows": 64,
    "style": "Descriptive",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Descriptive Style**\n   - Uses detailed descriptions with contextual information.\n   - Example: I want to know the names and home addresses of all students older than 18.\n   - Vector Example: I need to find articles that most closely related to Stable Diffusion, returning the top 3 matches sorted by cosine similarity.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT z.zip_code, c.CBSA_name, distance\nFROM zip_data z\nJOIN CBSA c ON z.CBSA = c.CBSA\nWHERE c.CBSA_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Adrien\") AND c.k = 5\nORDER BY distance;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "address",
    "sql": "WITH ClosestCBSAs AS (\n  SELECT CBSA, distance\n  FROM CBSA\n  WHERE CBSA_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Adrin, MI\") \n  AND k = 5\n),\nPopulationStats AS (\n  SELECT z.CBSA, AVG(z.population_2020) AS avg_population_2020\n  FROM zip_data z\n  JOIN ClosestCBSAs c ON z.CBSA = c.CBSA\n  GROUP BY z.CBSA\n),\nCongressionalRep AS (\n  SELECT DISTINCT c.first_name || ' ' || c.last_name AS rep_name, z.CBSA\n  FROM congress c\n  JOIN zip_congress z_c ON c.cognress_rep_id = z_c.district\n  JOIN zip_data z ON z.zip_code = z_c.zip_code\n  WHERE z.CBSA IN (SELECT CBSA FROM ClosestCBSAs)\n)\nSELECT p.avg_population_2020\nFROM PopulationStats p\nJOIN CongressionalRep r ON p.CBSA = r.CBSA\nORDER BY p.avg_population_2020 DESC\nLIMIT 1;",
    "complexity": "Highly Complex",
    "column_count": 1,
    "rows": 1,
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH ClosestCBSAs AS (\n  SELECT CBSA, distance\n  FROM CBSA\n  WHERE CBSA_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Adrin, MI\") \n  AND k = 5\n),\nPopulationStats AS (\n  SELECT z.CBSA, AVG(z.population_2020) AS avg_population_2020\n  FROM zip_data z\n  JOIN ClosestCBSAs c ON z.CBSA = c.CBSA\n  GROUP BY z.CBSA\n),\nCongressionalRep AS (\n  SELECT DISTINCT c.first_name || ' ' || c.last_name AS rep_name, z.CBSA\n  FROM congress c\n  JOIN zip_congress z_c ON c.cognress_rep_id = z_c.district\n  JOIN zip_data z ON z.zip_code = z_c.zip_code\n  WHERE z.CBSA IN (SELECT CBSA FROM ClosestCBSAs)\n)\nSELECT p.avg_population_2020\nFROM PopulationStats p\nJOIN CongressionalRep r ON p.CBSA = r.CBSA\nORDER BY p.avg_population_2020 DESC\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "cs_semester",
    "sql": "WITH ProfStudentsCTE AS (\n    SELECT \n        p.prof_id,\n        p.first_name || ' ' || p.last_name AS professor_name,\n        s.student_id,\n        s.f_name || ' ' || s.l_name AS student_name\n    FROM \n        prof p\n    JOIN \n        RA ra ON p.prof_id = ra.prof_id\n    JOIN \n        student s ON ra.student_id = s.student_id\n    WHERE \n        ra.salary = 'high'\n)\n\nSELECT \n    professor_name, student_name\nFROM \n    ProfStudentsCTE\nWHERE \n    (prof_id IN (\n        SELECT prof_id \n        FROM prof \n        WHERE graduate_from_embedding MATCH lembed('all-MiniLM-L6-v2', 'Stanford University') \n        AND k = 3\n    ))\n    AND (student_id IN (\n        SELECT student_id \n        FROM student \n        WHERE type_embedding MATCH lembed('all-MiniLM-L6-v2', 'TPG')\n        AND k = 3\n    ))\nORDER BY \n    prof_id;",
    "complexity": "Complex",
    "column_count": 2,
    "rows": 3,
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH ProfStudentsCTE AS (\n    SELECT \n        p.prof_id,\n        p.first_name || ' ' || p.last_name AS professor_name,\n        s.student_id,\n        s.f_name || ' ' || s.l_name AS student_name\n    FROM \n        prof p\n    JOIN \n        RA ra ON p.prof_id = ra.prof_id\n    JOIN \n        student s ON ra.student_id = s.student_id\n    WHERE \n        ra.salary = 'high'\n)\n\nSELECT \n    professor_name, student_name\nFROM \n    ProfStudentsCTE\nWHERE \n    (prof_id IN (\n        SELECT prof_id \n        FROM prof \n        WHERE graduate_from_embedding MATCH lembed('all-MiniLM-L6-v2', 'Stanford University') \n        AND k = 3\n    ))\n    AND (student_id IN (\n        SELECT student_id \n        FROM student \n        WHERE type_embedding MATCH lembed('all-MiniLM-L6-v2', 'TPG')\n        AND k = 3\n    ))\nORDER BY \n    prof_id;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "cs_semester",
    "sql": "SELECT student_id \nFROM student \nWHERE type_embedding MATCH lembed('all-MiniLM-L6-v2', \"RPG\") \nLIMIT 1;",
    "complexity": "Simple",
    "column_count": 1,
    "rows": 1,
    "style": "Concise",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Concise Style**\n   - Use short sentences.\n   - Example: Students older than 18, return their names and addresses.\n   - Vector Example: Top 3 related articles to Stable Diffusion.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT student_id \nFROM student \nWHERE type_embedding MATCH lembed('all-MiniLM-L6-v2', \"RPG\") \nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "address",
    "sql": "WITH CBSA_similar AS (\n  SELECT \n    CBSA,\n    CBSA_name,\n    CBSA_type,\n    distance\n  FROM \n    CBSA\n  WHERE \n    CBSA_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Adri\")\n  LIMIT 5\n)\n\nSELECT \n  cs.CBSA_name,\n  s.name AS state_name,\n  c.first_name || ' ' || c.last_name AS congress_rep_name\nFROM \n  CBSA_similar cs\nJOIN \n  zip_data zd ON cs.CBSA = zd.CBSA\nJOIN \n  state s ON zd.state = s.abbreviation\nJOIN \n  zip_congress zc ON zd.zip_code = zc.zip_code\nJOIN \n  congress c ON zc.district = c.cognress_rep_id\nWHERE \n  c.party = 'Democrat';",
    "complexity": "Complex",
    "column_count": 3,
    "rows": 0,
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH CBSA_similar AS (\n  SELECT \n    CBSA,\n    CBSA_name,\n    CBSA_type,\n    distance\n  FROM \n    CBSA\n  WHERE \n    CBSA_name_embedding MATCH lembed('all-MiniLM-L6-v2', \"Adri\")\n  LIMIT 5\n)\n\nSELECT \n  cs.CBSA_name,\n  s.name AS state_name,\n  c.first_name || ' ' || c.last_name AS congress_rep_name\nFROM \n  CBSA_similar cs\nJOIN \n  zip_data zd ON cs.CBSA = zd.CBSA\nJOIN \n  state s ON zd.state = s.abbreviation\nJOIN \n  zip_congress zc ON zd.zip_code = zc.zip_code\nJOIN \n  congress c ON zc.district = c.cognress_rep_id\nWHERE \n  c.party = 'Democrat';\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "retail_world",
    "sql": "SELECT CategoryID \nFROM Categories \nWHERE Description_embedding MATCH lembed('all-MiniLM-L6-v2', \"Variety of gourmet coffees and teas\") \nLIMIT 1;",
    "complexity": "Simple",
    "column_count": 1,
    "rows": 1,
    "style": "Metaphorical",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Metaphorical Style**\n   - Uses metaphors or metaphorical expressions.\n   - Example: Find the names and addresses of those who have reached adulthood. (External Knowledge: 'reached adulthood' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with SD in ai. (External Knowledge: 'SD in ai' refers to Stable Diffusion)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT CategoryID \nFROM Categories \nWHERE Description_embedding MATCH lembed('all-MiniLM-L6-v2', \"Variety of gourmet coffees and teas\") \nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "retail_world",
    "sql": "WITH RelevantCategories AS (\n  SELECT c.CategoryID, c.CategoryName, c.Description, distance\n  FROM Categories c\n  WHERE c.Description_embedding MATCH lembed('all-MiniLM-L6-v2', \"Beverages including coffees and teas, both hot and cold\") AND k = 3\n)\n\nSELECT s.SupplierID, s.SupplierName, s.ContactName, s.City, p.ProductName, p.Price, rc.CategoryName, rc.Description\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN RelevantCategories rc ON p.CategoryID = rc.CategoryID\nWHERE s.Country = 'USA'\nAND p.Price > 10\nORDER BY rc.distance\nLIMIT 5;",
    "complexity": "Highly Complex",
    "column_count": 8,
    "rows": 5,
    "style": "Vague",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Vague Style**\n   - Includes ambiguous vocabulary requiring inference.\n   - Example: What are the names and addresses of those older students? (External Knowledge: 'older students' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with Stable Diffusion. (External Knowledge: 'a few' refers to vector similarity search with k=3 limit)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH RelevantCategories AS (\n  SELECT c.CategoryID, c.CategoryName, c.Description, distance\n  FROM Categories c\n  WHERE c.Description_embedding MATCH lembed('all-MiniLM-L6-v2', \"Beverages including coffees and teas, both hot and cold\") AND k = 3\n)\n\nSELECT s.SupplierID, s.SupplierName, s.ContactName, s.City, p.ProductName, p.Price, rc.CategoryName, rc.Description\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN RelevantCategories rc ON p.CategoryID = rc.CategoryID\nWHERE s.Country = 'USA'\nAND p.Price > 10\nORDER BY rc.distance\nLIMIT 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "retail_world",
    "sql": "WITH CategorySearch AS (\n  SELECT \n    CategoryID,\n    CategoryName,\n    distance AS CategoryDistance\n  FROM \n    Categories\n  WHERE \n    Description_embedding MATCH lembed('all-MiniLM-L6-v2', \"Soft drinks, coffees, teas, beers, and ales\")\n  LIMIT 5\n),\nEmployeeSearch AS (\n  SELECT \n    EmployeeID,\n    LastName,\n    FirstName,\n    distance AS EmployeeDistance\n  FROM \n    Employees\n  WHERE \n    Notes_embedding MATCH lembed('all-MiniLM-L6-v2', \"Education includes a BA in psychology from Colorado State University.\")\n  LIMIT 5\n)\nSELECT \n  c.CategoryID,\n  c.CategoryName,\n  e.EmployeeID,\n  e.LastName,\n  e.FirstName,\n  c.CategoryDistance + e.EmployeeDistance AS TotalDistance\nFROM \n  CategorySearch c\nJOIN \n  EmployeeSearch e\nON \n  c.CategoryID % 5 = e.EmployeeID % 5\nORDER BY \n  TotalDistance\nLIMIT 1;",
    "complexity": "Highly Complex",
    "column_count": 6,
    "rows": 1,
    "style": "Metaphorical",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Metaphorical Style**\n   - Uses metaphors or metaphorical expressions.\n   - Example: Find the names and addresses of those who have reached adulthood. (External Knowledge: 'reached adulthood' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with SD in ai. (External Knowledge: 'SD in ai' refers to Stable Diffusion)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH CategorySearch AS (\n  SELECT \n    CategoryID,\n    CategoryName,\n    distance AS CategoryDistance\n  FROM \n    Categories\n  WHERE \n    Description_embedding MATCH lembed('all-MiniLM-L6-v2', \"Soft drinks, coffees, teas, beers, and ales\")\n  LIMIT 5\n),\nEmployeeSearch AS (\n  SELECT \n    EmployeeID,\n    LastName,\n    FirstName,\n    distance AS EmployeeDistance\n  FROM \n    Employees\n  WHERE \n    Notes_embedding MATCH lembed('all-MiniLM-L6-v2', \"Education includes a BA in psychology from Colorado State University.\")\n  LIMIT 5\n)\nSELECT \n  c.CategoryID,\n  c.CategoryName,\n  e.EmployeeID,\n  e.LastName,\n  e.FirstName,\n  c.CategoryDistance + e.EmployeeDistance AS TotalDistance\nFROM \n  CategorySearch c\nJOIN \n  EmployeeSearch e\nON \n  c.CategoryID % 5 = e.EmployeeID % 5\nORDER BY \n  TotalDistance\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "retail_world",
    "sql": "SELECT CategoryName \nFROM Categories \nWHERE Description_embedding MATCH lembed('all-MiniLM-L6-v2', \"Sweet and savory food items\") \nLIMIT 1;",
    "complexity": "Simple",
    "column_count": 1,
    "rows": 1,
    "style": "Imperative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Imperative Style**\n   - Uses command or directive sentences.\n   - Example: Could you please gather all the students who are older than 18? I really need to know their names and where they live!\n   - Vector Example: Please find the three articles most closely related to Stable Diffusion and return their name.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT CategoryName \nFROM Categories \nWHERE Description_embedding MATCH lembed('all-MiniLM-L6-v2', \"Sweet and savory food items\") \nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "retail_world",
    "sql": "SELECT p.ProductName\nFROM Categories c\nJOIN Products p ON c.CategoryID = p.CategoryID\nWHERE c.Description_embedding MATCH lembed('all-MiniLM-L6-v2', \"Sweet treats and desserts\") AND c.k = 5;",
    "complexity": "Moderate",
    "column_count": 1,
    "rows": 54,
    "style": "Descriptive",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Descriptive Style**\n   - Uses detailed descriptions with contextual information.\n   - Example: I want to know the names and home addresses of all students older than 18.\n   - Vector Example: I need to find articles that most closely related to Stable Diffusion, returning the top 3 matches sorted by cosine similarity.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT p.ProductName\nFROM Categories c\nJOIN Products p ON c.CategoryID = p.CategoryID\nWHERE c.Description_embedding MATCH lembed('all-MiniLM-L6-v2', \"Sweet treats and desserts\") AND c.k = 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "retail_world",
    "sql": "SELECT \n  p.ProductID, \n  p.ProductName, \n  c.CategoryName, \n  s.SupplierName\nFROM \n  Products p\nJOIN \n  Categories c ON p.CategoryID = c.CategoryID\nJOIN \n  Suppliers s ON p.SupplierID = s.SupplierID\nWHERE \n  c.Description_embedding MATCH lembed('all-MiniLM-L6-v2', \"beverages\") AND c.k = 5;",
    "complexity": "Moderate",
    "column_count": 4,
    "rows": 54,
    "style": "Imperative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Imperative Style**\n   - Uses command or directive sentences.\n   - Example: Could you please gather all the students who are older than 18? I really need to know their names and where they live!\n   - Vector Example: Please find the three articles most closely related to Stable Diffusion and return their name.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT \n  p.ProductID, \n  p.ProductName, \n  c.CategoryName, \n  s.SupplierName\nFROM \n  Products p\nJOIN \n  Categories c ON p.CategoryID = c.CategoryID\nJOIN \n  Suppliers s ON p.SupplierID = s.SupplierID\nWHERE \n  c.Description_embedding MATCH lembed('all-MiniLM-L6-v2', \"beverages\") AND c.k = 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "chicago_crime",
    "sql": "WITH CrimeCTE AS (\n  SELECT \n    report_no,\n    case_number,\n    date,\n    block,\n    distance\n  FROM Crime\n  WHERE location_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"Residential area with active nightlife and frequent incidents\")\n  AND k = 5\n)\nSELECT \n  CA.community_area_name,\n  CA.population\nFROM CrimeCTE C\nJOIN Community_Area CA ON C.block = CA.community_area_name\nWHERE CA.side_embedding MATCH lembed('all-MiniLM-L6-v2', \"Dense urban population\")\nAND CA.k = 3;",
    "complexity": "Complex",
    "column_count": 2,
    "rows": 0,
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH CrimeCTE AS (\n  SELECT \n    report_no,\n    case_number,\n    date,\n    block,\n    distance\n  FROM Crime\n  WHERE location_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"Residential area with active nightlife and frequent incidents\")\n  AND k = 5\n)\nSELECT \n  CA.community_area_name,\n  CA.population\nFROM CrimeCTE C\nJOIN Community_Area CA ON C.block = CA.community_area_name\nWHERE CA.side_embedding MATCH lembed('all-MiniLM-L6-v2', \"Dense urban population\")\nAND CA.k = 3;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "chicago_crime",
    "sql": "SELECT community_area_name \nFROM Community_Area \nWHERE side_embedding MATCH lembed('all-MiniLM-L6-v2', \"north\") \nLIMIT 1;",
    "complexity": "Simple",
    "column_count": 1,
    "rows": 1,
    "style": "Multi-turn Dialogue",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Multi-turn Dialogue Style**\n    - This involves a dialogue to clarify the user's query needs.\n    - Example: [{\"User\": \"I want to query some student information.\"}, {\"Assistant\": \"Which students' information would you like to query?\"}, {\"User\": \"Students older than 18.\"}, {\"Assistant\": \"What other information would you like to know about them?\"}, {\"User\": \"Names and addresses.\"}, {\"Assistant\": \"Is there anything else you need?\"}, {\"User\": \"No.\"}, {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}]\n    - Vector Example: \n      User: \"I'm looking for some articles.\"\n      Assistant: \"How many articles would you like to find and What field of paper are you looking for?\"\n      User: \"About 3, and they are related to Stable Diffusion.\"\n      Assistant: \"I'll search for 3 articles that most closely related to Stable Diffusion.\"\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT community_area_name \nFROM Community_Area \nWHERE side_embedding MATCH lembed('all-MiniLM-L6-v2', \"north\") \nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Dialogue:** Create a conversation between the User and the Assistant based on the SQL query and its explanation, ensuring vector operations are properly discussed.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the dialogue naturally covers:\n   - The purpose of the vector search;\n   - How many similar items are needed (LIMIT);\n   - What the target vector represents;\n   - Any additional filtering or sorting requirements.\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Multi-turn dialogue covering vector search details)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Create natural dialogue that explores vector search parameters\n4. Ensure LIMIT, target vector and distance sorting are discussed\n",
    "contains_vector": true
  },
  {
    "db_id": "chicago_crime",
    "sql": "SELECT case_number, date \nFROM Crime \nWHERE location_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"Bank ATM in downtown Chicago\") \nLIMIT 5;",
    "complexity": "Simple",
    "column_count": 2,
    "rows": 5,
    "style": "Multi-turn Dialogue",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Multi-turn Dialogue Style**\n    - This involves a dialogue to clarify the user's query needs.\n    - Example: [{\"User\": \"I want to query some student information.\"}, {\"Assistant\": \"Which students' information would you like to query?\"}, {\"User\": \"Students older than 18.\"}, {\"Assistant\": \"What other information would you like to know about them?\"}, {\"User\": \"Names and addresses.\"}, {\"Assistant\": \"Is there anything else you need?\"}, {\"User\": \"No.\"}, {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}]\n    - Vector Example: \n      User: \"I'm looking for some articles.\"\n      Assistant: \"How many articles would you like to find and What field of paper are you looking for?\"\n      User: \"About 3, and they are related to Stable Diffusion.\"\n      Assistant: \"I'll search for 3 articles that most closely related to Stable Diffusion.\"\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT case_number, date \nFROM Crime \nWHERE location_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"Bank ATM in downtown Chicago\") \nLIMIT 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Dialogue:** Create a conversation between the User and the Assistant based on the SQL query and its explanation, ensuring vector operations are properly discussed.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the dialogue naturally covers:\n   - The purpose of the vector search;\n   - How many similar items are needed (LIMIT);\n   - What the target vector represents;\n   - Any additional filtering or sorting requirements.\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Multi-turn dialogue covering vector search details)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Create natural dialogue that explores vector search parameters\n4. Ensure LIMIT, target vector and distance sorting are discussed\n",
    "contains_vector": true
  },
  {
    "db_id": "chicago_crime",
    "sql": "WITH CrimeLocationCTE AS (\n  SELECT report_no, distance\n  FROM Crime\n  WHERE location_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"AUTO\")\n  AND k = 5\n)\nSELECT CTE.report_no\nFROM CrimeLocationCTE AS CTE\nJOIN Community_Area AS CA ON CA.community_area_no = (\n  SELECT community_area_no FROM Crime WHERE report_no = CTE.report_no\n)\nWHERE CA.side = \"Far North \"\nORDER BY CTE.distance\nLIMIT 1;",
    "complexity": "Complex",
    "column_count": 1,
    "rows": 0,
    "style": "Descriptive",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Descriptive Style**\n   - Uses detailed descriptions with contextual information.\n   - Example: I want to know the names and home addresses of all students older than 18.\n   - Vector Example: I need to find articles that most closely related to Stable Diffusion, returning the top 3 matches sorted by cosine similarity.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH CrimeLocationCTE AS (\n  SELECT report_no, distance\n  FROM Crime\n  WHERE location_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"AUTO\")\n  AND k = 5\n)\nSELECT CTE.report_no\nFROM CrimeLocationCTE AS CTE\nJOIN Community_Area AS CA ON CA.community_area_no = (\n  SELECT community_area_no FROM Crime WHERE report_no = CTE.report_no\n)\nWHERE CA.side = \"Far North \"\nORDER BY CTE.distance\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "olympics",
    "sql": "WITH similar_games AS (\n  SELECT g.id AS game_id, g.games_name, g.games_year, gc.city_id, distance\n  FROM games g\n  JOIN games_city gc ON g.id = gc.games_id\n  WHERE g.games_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"Winter sports event with ice skating and skiing\") AND g.k = 5\n),\nsimilar_cities AS (\n  SELECT c.id AS city_id, c.city_name, distance\n  FROM city c\n  WHERE c.city_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"City known for hosting winter sports events\") AND c.k = 5\n)\nSELECT DISTINCT sg.games_name\nFROM similar_games sg\nJOIN similar_cities sc ON sg.city_id = sc.city_id\nORDER BY sg.distance\nLIMIT 1;",
    "complexity": "Highly Complex",
    "column_count": 1,
    "rows": 1,
    "style": "Vague",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Vague Style**\n   - Includes ambiguous vocabulary requiring inference.\n   - Example: What are the names and addresses of those older students? (External Knowledge: 'older students' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with Stable Diffusion. (External Knowledge: 'a few' refers to vector similarity search with k=3 limit)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH similar_games AS (\n  SELECT g.id AS game_id, g.games_name, g.games_year, gc.city_id, distance\n  FROM games g\n  JOIN games_city gc ON g.id = gc.games_id\n  WHERE g.games_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"Winter sports event with ice skating and skiing\") AND g.k = 5\n),\nsimilar_cities AS (\n  SELECT c.id AS city_id, c.city_name, distance\n  FROM city c\n  WHERE c.city_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"City known for hosting winter sports events\") AND c.k = 5\n)\nSELECT DISTINCT sg.games_name\nFROM similar_games sg\nJOIN similar_cities sc ON sg.city_id = sc.city_id\nORDER BY sg.distance\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "olympics",
    "sql": "SELECT c.city_name\nFROM city c\nJOIN games_city gc ON c.id = gc.city_id\nJOIN games g ON gc.games_id = g.id\nWHERE c.city_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"The city with Olympic legacy hosting the games.\")\nAND g.games_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"The Summer Games known for historic performances.\")\nAND g.season = 'Summer'\nAND g.games_year = 1992\nAND c.k = 5\nAND g.k = 5\nORDER BY g.season, c.city_name\nLIMIT 1;",
    "complexity": "Highly Complex",
    "column_count": 1,
    "rows": 0,
    "style": "Vague",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Vague Style**\n   - Includes ambiguous vocabulary requiring inference.\n   - Example: What are the names and addresses of those older students? (External Knowledge: 'older students' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with Stable Diffusion. (External Knowledge: 'a few' refers to vector similarity search with k=3 limit)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT c.city_name\nFROM city c\nJOIN games_city gc ON c.id = gc.city_id\nJOIN games g ON gc.games_id = g.id\nWHERE c.city_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"The city with Olympic legacy hosting the games.\")\nAND g.games_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"The Summer Games known for historic performances.\")\nAND g.season = 'Summer'\nAND g.games_year = 1992\nAND c.k = 5\nAND g.k = 5\nORDER BY g.season, c.city_name\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "olympics",
    "sql": "WITH CityMatches AS (\n  SELECT c.id AS city_id, c.city_name, c.distance AS city_distance\n  FROM city c\n  WHERE c.city_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"A vibrant city known for hosting major international events.\") \n  AND c.k = 5\n),\nGamesMatches AS (\n  SELECT g.id AS games_id, g.games_name, g.distance AS games_distance\n  FROM games g\n  WHERE g.games_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"An international multi-sport event featuring athletes from around the world.\") \n  AND g.k = 5\n)\nSELECT cm.city_name, gm.games_name\nFROM CityMatches cm\nJOIN games_city gc ON cm.city_id = gc.city_id\nJOIN GamesMatches gm ON gc.games_id = gm.games_id\nORDER BY cm.city_distance, gm.games_distance\nLIMIT 10;",
    "complexity": "Highly Complex",
    "column_count": 2,
    "rows": 1,
    "style": "Concise",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Concise Style**\n   - Use short sentences.\n   - Example: Students older than 18, return their names and addresses.\n   - Vector Example: Top 3 related articles to Stable Diffusion.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH CityMatches AS (\n  SELECT c.id AS city_id, c.city_name, c.distance AS city_distance\n  FROM city c\n  WHERE c.city_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"A vibrant city known for hosting major international events.\") \n  AND c.k = 5\n),\nGamesMatches AS (\n  SELECT g.id AS games_id, g.games_name, g.distance AS games_distance\n  FROM games g\n  WHERE g.games_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"An international multi-sport event featuring athletes from around the world.\") \n  AND g.k = 5\n)\nSELECT cm.city_name, gm.games_name\nFROM CityMatches cm\nJOIN games_city gc ON cm.city_id = gc.city_id\nJOIN GamesMatches gm ON gc.games_id = gm.games_id\nORDER BY cm.city_distance, gm.games_distance\nLIMIT 10;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "ice_hockey_draft",
    "sql": "WITH PlayerHeightCTE AS (\n    SELECT p.ELITEID, p.PlayerName, h.height_in_cm\n    FROM PlayerInfo p\n    JOIN height_info h ON p.height = h.height_id\n)\nSELECT ph.ELITEID, ss.GP\nFROM PlayerHeightCTE ph\nJOIN SeasonStatus ss ON ph.ELITEID = ss.ELITEID\nWHERE ss.GAMETYPE_embedding MATCH lembed('all-MiniLM-L6-v2', \"Playoffs\")\nAND ss.k = 5;",
    "complexity": "Complex",
    "column_count": 2,
    "rows": 5,
    "style": "Interrogative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Interrogative Style**\n   - Uses question forms.\n   - Example: Could you tell me which students are older than 18 and what their home addresses are?\n   - Vector Example: Could you show me the 3 articles that most have to do with Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH PlayerHeightCTE AS (\n    SELECT p.ELITEID, p.PlayerName, h.height_in_cm\n    FROM PlayerInfo p\n    JOIN height_info h ON p.height = h.height_id\n)\nSELECT ph.ELITEID, ss.GP\nFROM PlayerHeightCTE ph\nJOIN SeasonStatus ss ON ph.ELITEID = ss.ELITEID\nWHERE ss.GAMETYPE_embedding MATCH lembed('all-MiniLM-L6-v2', \"Playoffs\")\nAND ss.k = 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "ice_hockey_draft",
    "sql": "WITH PlayerHeight AS (\n    SELECT pi.ELITEID, pi.birthplace\n    FROM PlayerInfo pi\n    JOIN height_info hi ON pi.height = hi.height_id\n    WHERE hi.height_in_cm BETWEEN 180 AND 190\n),\nGameTypeCTE AS (\n    SELECT ELITEID, GAMETYPE, distance\n    FROM SeasonStatus\n    WHERE GAMETYPE_embedding MATCH lembed('all-MiniLM-L6-v2', \"Regular Season\") AND k = 5\n)\nSELECT ph.birthplace\nFROM PlayerHeight ph\nJOIN GameTypeCTE gtc ON ph.ELITEID = gtc.ELITEID\nORDER BY gtc.distance\nLIMIT 10;",
    "complexity": "Complex",
    "column_count": 1,
    "rows": 5,
    "style": "Imperative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Imperative Style**\n   - Uses command or directive sentences.\n   - Example: Could you please gather all the students who are older than 18? I really need to know their names and where they live!\n   - Vector Example: Please find the three articles most closely related to Stable Diffusion and return their name.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH PlayerHeight AS (\n    SELECT pi.ELITEID, pi.birthplace\n    FROM PlayerInfo pi\n    JOIN height_info hi ON pi.height = hi.height_id\n    WHERE hi.height_in_cm BETWEEN 180 AND 190\n),\nGameTypeCTE AS (\n    SELECT ELITEID, GAMETYPE, distance\n    FROM SeasonStatus\n    WHERE GAMETYPE_embedding MATCH lembed('all-MiniLM-L6-v2', \"Regular Season\") AND k = 5\n)\nSELECT ph.birthplace\nFROM PlayerHeight ph\nJOIN GameTypeCTE gtc ON ph.ELITEID = gtc.ELITEID\nORDER BY gtc.distance\nLIMIT 10;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "car_retails",
    "sql": "SELECT c.customerName, o.comments, o.distance\nFROM customers c\nJOIN (\n  SELECT orderNumber, comments, customerNumber, distance\n  FROM orders\n  WHERE comments_embedding MATCH lembed('all-MiniLM-L6-v2', \"Check product availability soon\") AND orders.k = 5\n) o ON c.customerNumber = o.customerNumber\nWHERE c.country = 'USA' AND c.creditLimit > 50000\nORDER BY o.distance\nLIMIT 10;",
    "complexity": "Highly Complex",
    "column_count": 3,
    "rows": 2,
    "style": "Multi-turn Dialogue",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Multi-turn Dialogue Style**\n    - This involves a dialogue to clarify the user's query needs.\n    - Example: [{\"User\": \"I want to query some student information.\"}, {\"Assistant\": \"Which students' information would you like to query?\"}, {\"User\": \"Students older than 18.\"}, {\"Assistant\": \"What other information would you like to know about them?\"}, {\"User\": \"Names and addresses.\"}, {\"Assistant\": \"Is there anything else you need?\"}, {\"User\": \"No.\"}, {\"Assistant\": \"OK, I will help you translate your request into an SQL query.\"}]\n    - Vector Example: \n      User: \"I'm looking for some articles.\"\n      Assistant: \"How many articles would you like to find and What field of paper are you looking for?\"\n      User: \"About 3, and they are related to Stable Diffusion.\"\n      Assistant: \"I'll search for 3 articles that most closely related to Stable Diffusion.\"\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT c.customerName, o.comments, o.distance\nFROM customers c\nJOIN (\n  SELECT orderNumber, comments, customerNumber, distance\n  FROM orders\n  WHERE comments_embedding MATCH lembed('all-MiniLM-L6-v2', \"Check product availability soon\") AND orders.k = 5\n) o ON c.customerNumber = o.customerNumber\nWHERE c.country = 'USA' AND c.creditLimit > 50000\nORDER BY o.distance\nLIMIT 10;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Dialogue:** Create a conversation between the User and the Assistant based on the SQL query and its explanation, ensuring vector operations are properly discussed.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the dialogue naturally covers:\n   - The purpose of the vector search;\n   - How many similar items are needed (LIMIT);\n   - What the target vector represents;\n   - Any additional filtering or sorting requirements.\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Multi-turn dialogue covering vector search details)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Create natural dialogue that explores vector search parameters\n4. Ensure LIMIT, target vector and distance sorting are discussed\n",
    "contains_vector": true
  },
  {
    "db_id": "car_retails",
    "sql": "SELECT c.customerName \nFROM orders o\nJOIN customers c ON o.customerNumber = c.customerNumber\nWHERE o.comments_embedding MATCH lembed('all-MiniLM-L6-v2', \"This order includes urgent delivery requirements\") AND o.k = 5\nAND c.country = 'USA';",
    "complexity": "Moderate",
    "column_count": 1,
    "rows": 3,
    "style": "Metaphorical",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Metaphorical Style**\n   - Uses metaphors or metaphorical expressions.\n   - Example: Find the names and addresses of those who have reached adulthood. (External Knowledge: 'reached adulthood' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with SD in ai. (External Knowledge: 'SD in ai' refers to Stable Diffusion)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT c.customerName \nFROM orders o\nJOIN customers c ON o.customerNumber = c.customerNumber\nWHERE o.comments_embedding MATCH lembed('all-MiniLM-L6-v2', \"This order includes urgent delivery requirements\") AND o.k = 5\nAND c.country = 'USA';\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "books",
    "sql": "SELECT status_id\nFROM order_status\nWHERE status_value_embedding MATCH lembed('all-MiniLM-L6-v2', \"Order Dispatched\")\nLIMIT 1;",
    "complexity": "Simple",
    "column_count": 1,
    "rows": 1,
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT status_id\nFROM order_status\nWHERE status_value_embedding MATCH lembed('all-MiniLM-L6-v2', \"Order Dispatched\")\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "soccer_2016",
    "sql": "WITH SimilarPlayers AS (\n    SELECT Player_Id, Player_Name, distance\n    FROM Player\n    WHERE Player_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"Talented right-handed batsman known for aggressive play\") \n    LIMIT 5\n)\nSELECT Player_Name, distance\nFROM SimilarPlayers\nORDER BY distance;",
    "complexity": "Complex",
    "column_count": 2,
    "rows": 5,
    "style": "Formal",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Formal Style**\n   - Uses standard grammar and vocabulary.\n   - Example: Find all students older than 18 years and return their home addresses.\n   - Vector Example: Find the three articles most closely related to Stable Diffusion and return them.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH SimilarPlayers AS (\n    SELECT Player_Id, Player_Name, distance\n    FROM Player\n    WHERE Player_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"Talented right-handed batsman known for aggressive play\") \n    LIMIT 5\n)\nSELECT Player_Name, distance\nFROM SimilarPlayers\nORDER BY distance;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "soccer_2016",
    "sql": "SELECT p.Player_Name, p.DOB, c.Country_Name\nFROM Player p\nJOIN Country c ON p.Country_Name = c.Country_Id\nWHERE p.Player_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"A cricket player with exceptional batting skills\") \nAND p.k = 3;",
    "complexity": "Moderate",
    "column_count": 3,
    "rows": 3,
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT p.Player_Name, p.DOB, c.Country_Name\nFROM Player p\nJOIN Country c ON p.Country_Name = c.Country_Id\nWHERE p.Player_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"A cricket player with exceptional batting skills\") \nAND p.k = 3;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "soccer_2016",
    "sql": "SELECT Player_Name\nFROM Player\nWHERE Player_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"A skilled batsman known for his aggressive play and consistent performance\") \nLIMIT 1;",
    "complexity": "Simple",
    "column_count": 1,
    "rows": 1,
    "style": "Imperative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Imperative Style**\n   - Uses command or directive sentences.\n   - Example: Could you please gather all the students who are older than 18? I really need to know their names and where they live!\n   - Vector Example: Please find the three articles most closely related to Stable Diffusion and return their name.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT Player_Name\nFROM Player\nWHERE Player_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"A skilled batsman known for his aggressive play and consistent performance\") \nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "soccer_2016",
    "sql": "SELECT country.Country_Name\nFROM City city\nJOIN Country country ON city.Country_id = country.Country_Id\nWHERE city.City_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"A bustling metropolitan area known for its vibrant nightlife and cultural heritage\") AND city.k = 1;",
    "complexity": "Moderate",
    "column_count": 1,
    "rows": 1,
    "style": "Imperative",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Imperative Style**\n   - Uses command or directive sentences.\n   - Example: Could you please gather all the students who are older than 18? I really need to know their names and where they live!\n   - Vector Example: Please find the three articles most closely related to Stable Diffusion and return their name.\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT country.Country_Name\nFROM City city\nJOIN Country country ON city.Country_id = country.Country_Id\nWHERE city.City_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"A bustling metropolitan area known for its vibrant nightlife and cultural heritage\") AND city.k = 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "soccer_2016",
    "sql": "WITH PlayerManOfMatch AS (\n  SELECT p.Player_Name, p.Player_description_embedding\n  FROM Player p\n  JOIN Match m ON p.Player_Id = m.Man_of_the_Match\n  WHERE p.Player_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"Cricketer known for right-handed batting\") AND p.k = 5\n),\nVenueInCity AS (\n  SELECT v.Venue_Name, v.Venue_description_embedding\n  FROM Venue v\n  JOIN City c ON v.City_Id = c.City_Id\n  WHERE v.Venue_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"Stadium located in the city with City_Id\") AND v.k = 5\n)\nSELECT p.Player_Name\nFROM PlayerManOfMatch p\nJOIN VenueInCity v ON p.Player_description_embedding = v.Venue_description_embedding\nLIMIT 1;",
    "complexity": "Complex",
    "column_count": 1,
    "rows": 0,
    "style": "Vague",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Vague Style**\n   - Includes ambiguous vocabulary requiring inference.\n   - Example: What are the names and addresses of those older students? (External Knowledge: 'older students' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with Stable Diffusion. (External Knowledge: 'a few' refers to vector similarity search with k=3 limit)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH PlayerManOfMatch AS (\n  SELECT p.Player_Name, p.Player_description_embedding\n  FROM Player p\n  JOIN Match m ON p.Player_Id = m.Man_of_the_Match\n  WHERE p.Player_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"Cricketer known for right-handed batting\") AND p.k = 5\n),\nVenueInCity AS (\n  SELECT v.Venue_Name, v.Venue_description_embedding\n  FROM Venue v\n  JOIN City c ON v.City_Id = c.City_Id\n  WHERE v.Venue_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"Stadium located in the city with City_Id\") AND v.k = 5\n)\nSELECT p.Player_Name\nFROM PlayerManOfMatch p\nJOIN VenueInCity v ON p.Player_description_embedding = v.Venue_description_embedding\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "restaurant",
    "sql": "WITH VectorSearch AS (\n  SELECT gi.id_restaurant, gi.label, gi.review, gi.generalinfo_description, gi.distance\n  FROM generalinfo gi\n  WHERE gi.generalinfo_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"A popular restaurant with diverse food options and excellent service\") AND k = 5\n),\nLocationData AS (\n  SELECT l.id_restaurant, l.street_num, l.street_name, l.city\n  FROM location l\n  JOIN geographic g ON l.city = g.city\n  WHERE g.county = 'Santa Clara'\n)\nSELECT vs.label\nFROM VectorSearch vs\nJOIN LocationData ld ON vs.id_restaurant = ld.id_restaurant\nORDER BY vs.distance\nLIMIT 1;",
    "complexity": "Highly Complex",
    "column_count": 1,
    "rows": 0,
    "style": "Colloquial",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Colloquial Style**\n   - Employs informal vocabulary and expressions.\n   - Example: Hey! Could you help me find all the students who are over 18? I'd love to know their names and where they live.\n   - Vector Example: Hey there! Can you grab me the top 3 articles that are most closely related to Stable Diffusion?\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH VectorSearch AS (\n  SELECT gi.id_restaurant, gi.label, gi.review, gi.generalinfo_description, gi.distance\n  FROM generalinfo gi\n  WHERE gi.generalinfo_description_embedding MATCH lembed('all-MiniLM-L6-v2', \"A popular restaurant with diverse food options and excellent service\") AND k = 5\n),\nLocationData AS (\n  SELECT l.id_restaurant, l.street_num, l.street_name, l.city\n  FROM location l\n  JOIN geographic g ON l.city = g.city\n  WHERE g.county = 'Santa Clara'\n)\nSELECT vs.label\nFROM VectorSearch vs\nJOIN LocationData ld ON vs.id_restaurant = ld.id_restaurant\nORDER BY vs.distance\nLIMIT 1;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query. For example:\n   - \"SELECT * ... FROM ...\" means \"Find all ...\";\n   - \"SELECT f.check_date, f.status, f.remarks, c.year, c.year_min, c.year_max, c.year_average, c.data_quality_score FROM ...\" means \"Return the check dates, statuses, remarks, years, minimum years, maximum years, average years, and quality scores for ...\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") ORDER BY distance LIMIT 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - \"SELECT rowid, vec FROM vec_table WHERE vec MATCH lembed(_,\"xxx\") AND k = 2;\" means \"Return two of the rowid and vec that most related to xxx from vec_table, ordered by similarity distance\".\n   - For vector searches: Always mention the LIMIT value or K value when explaining MATCH operations.\n\n2. Ensure the natural language question accurately captures:\n   - All conditions including vector similarity searches\n   - ORDER BY clauses (especially for distance/similarity)\n   - LIMIT and K clauses\n   - Any window functions or complex joins\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations if present)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question capturing all query elements)\n[QUESTION-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, paying special attention to any vector operations\n2. Generate a clear explanation covering all query elements\n3. Formulate a precise natural language question\n4. Verify all vector operations (MATCH, LIMIT, ORDER BY distance) or (MATCH, And k = ?) are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "beer_factory",
    "sql": "WITH FilteredRootBeers AS (\n    SELECT rb.BrandID\n    FROM rootbeerbrand rb\n    WHERE rb.Caffeinated = 'Yes' AND rb.AvailableInBottles = 'Yes'\n)\n\n\nSELECT rr.Review \nFROM rootbeerreview rr\nJOIN FilteredRootBeers frb ON rr.BrandID = frb.BrandID\nWHERE rr.Review_embedding MATCH lembed('all-MiniLM-L6-v2', \"This root beer has a rich flavor with a hint of vanilla.\")\n  AND rr.k = 5 \nORDER BY rr.distance;",
    "complexity": "Complex",
    "column_count": 1,
    "rows": 0,
    "style": "Vague",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Vague Style**\n   - Includes ambiguous vocabulary requiring inference.\n   - Example: What are the names and addresses of those older students? (External Knowledge: 'older students' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with Stable Diffusion. (External Knowledge: 'a few' refers to vector similarity search with k=3 limit)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nWITH FilteredRootBeers AS (\n    SELECT rb.BrandID\n    FROM rootbeerbrand rb\n    WHERE rb.Caffeinated = 'Yes' AND rb.AvailableInBottles = 'Yes'\n)\n\n\nSELECT rr.Review \nFROM rootbeerreview rr\nJOIN FilteredRootBeers frb ON rr.BrandID = frb.BrandID\nWHERE rr.Review_embedding MATCH lembed('all-MiniLM-L6-v2', \"This root beer has a rich flavor with a hint of vanilla.\")\n  AND rr.k = 5 \nORDER BY rr.distance;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true
  },
  {
    "db_id": "hockey",
    "sql": "SELECT a.name\nFROM AwardsMisc a\nJOIN Teams t ON a.year = t.year AND a.lgID = t.lgID\nJOIN HOF h ON h.year = a.year\nWHERE a.note_embedding MATCH lembed('all-MiniLM-L6-v2', \"Outstanding coach\")\n  AND h.category = 'Coach'\n  AND t.rank = 1\n  AND a.k = 5;",
    "complexity": "Moderate",
    "column_count": 1,
    "rows": 0,
    "style": "Vague",
    "prompt": "**Task Overview**\nYour task is to create a high-quality natural language question based on a given SQL query and other information.\nYou have to use KNN queries, if extension includes sqlite-vec.\n\n**Style**\nThe natural language question should follow this style:\n**Vague Style**\n   - Includes ambiguous vocabulary requiring inference.\n   - Example: What are the names and addresses of those older students? (External Knowledge: 'older students' refers to age >= 18.)\n   - Vector Example: Find a few articles have to do with Stable Diffusion. (External Knowledge: 'a few' refers to vector similarity search with k=3 limit)\n\n**Database Engine**\nSQLite\n\n**Database Extension**\nsqlite-vec and sqlite-lembed\n\n**Column Information**\nBelow are column names and their corresponding descriptions:\n{}\n\n**SQL Query**\nGiven SQL query:\n```sql\nSELECT a.name\nFROM AwardsMisc a\nJOIN Teams t ON a.year = t.year AND a.lgID = t.lgID\nJOIN HOF h ON h.year = a.year\nWHERE a.note_embedding MATCH lembed('all-MiniLM-L6-v2', \"Outstanding coach\")\n  AND h.category = 'Coach'\n  AND t.rank = 1\n  AND a.k = 5;\n```\n\n**Reasoning Steps**\n1. **Explain the SQL Query:** Provide a detailed explanation of what the query does, including any vector search operations.\n2. **Generate a Question:** Formulate a natural language question based on the SQL query and explanation.\n3. **External Knowledge:** For Vague or Metaphorical styles, include external knowledge to enhance clarity, especially for vector operations.\n\n**Guidelines**\n1. Clearly describe the columns being selected by the SQL query (same as above).\n2. Ensure the natural language question captures all query semantics (same as above).\n3. For vector searches, include these common external knowledge points:\n   - \"MATCH\" operator performs approximate nearest neighbor (ANN) search;\n   - \"k=N\" specifies the number of similar items to return;\n   - Vectors are compared using Euclidean distance (L2 norm) by default;\n   - Similarity increases as distance decreases;\n   - Include any domain-specific knowledge about the vector meaning.\n\n**Crucial Rule for Vector Queries**: When generating a question for a SQL query that contains a `lembed()` function, you must follow this rule to ensure the question is natural and useful for training data.\n\n1.  **Abstract and Rephrase the Intent**: Analyze the text inside the `lembed()` function (e.g., `lembed('model', 'some descriptive text')`). This text is a highly specific description. Your task is to generate a question that reflects a user's *intent* behind this search, not the specific text itself.\n2.  **Strictly Prohibit Copying**: You are **strictly forbidden** from using the exact string literal from the `lembed()` function in the natural language question. The question must be a paraphrase, a summary, or a more general expression of the concept.\n\n---\n**Example of Correct vs. Incorrect Behavior:**\n\n* **Input VecSQL**: `SELECT episode_id FROM Episode WHERE summary_embedding MATCH lembed('all-MiniLM-L6-v2', \"An intriguing episode with unexpected plot twists and character development\") LIMIT 5;`\n\n* **BAD Question (Incorrect Generation)**: `\"I need to find the IDs of the top 5 episodes that are most closely related to the description \"An intriguing episode with unexpected plot twists and character development\"...\"`\n    * **Reasoning**: This is bad because it's unnatural and directly copies the search text.\n    \n* **GOOD Question (Correct Generation)**: `\"What are some episodes with surprising plot twists and good character arcs?\"` or `\"Recommend 5 of the most unexpected episodes.\"`\n    * **Reasoning**: This is good because it captures the *semantic essence* of the search text in a natural, human-like way.\n---\n\n**Output Format**\nPlease structure your response as follows:\n\n[EXPLANATION-START]\n(SQL Explanation including vector operations)\n[EXPLANATION-END]\n\n[QUESTION-START]\n(Natural Language Question)\n[QUESTION-END]\n\n[EXTERNAL-KNOWLEDGE-START]\n(Relevant knowledge about vector operations and domain context)\n[EXTERNAL-KNOWLEDGE-END]\n\n**Insturction**\nBased on the above information:\n1. Analyze the SQL query, especially vector operations\n2. Generate explanation covering all elements\n3. Formulate precise question\n4. Add relevant external knowledge about vector operations\n5. Verify all vector elements are properly represented\n",
    "contains_vector": true
  }
]